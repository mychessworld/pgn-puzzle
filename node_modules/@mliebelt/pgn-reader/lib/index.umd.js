(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.pgnReader = {}));
})(this, (function (exports) { 'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var index_umd$2 = {exports: {}};

	(function (module, exports) {
		(function (global, factory) {
			factory(exports) ;
		})(commonjsGlobal, (function (exports) {
			var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

			function getDefaultExportFromCjs (x) {
				return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
			}

			var _pgnParser = {exports: {}};

			(function (module) {
				// @ts-nocheck
				// @generated by Peggy 4.0.0.
				//
				// https://peggyjs.org/
				(function (root, factory) {
				    if (module.exports) {
				        module.exports = factory();
				    }
				})(commonjsGlobal$1, function () {
				    function peg$subclass(child, parent) {
				        function C() { this.constructor = child; }
				        C.prototype = parent.prototype;
				        child.prototype = new C();
				    }
				    function peg$SyntaxError(message, expected, found, location) {
				        var self = Error.call(this, message);
				        // istanbul ignore next Check is a necessary evil to support older environments
				        if (Object.setPrototypeOf) {
				            Object.setPrototypeOf(self, peg$SyntaxError.prototype);
				        }
				        self.expected = expected;
				        self.found = found;
				        self.location = location;
				        self.name = "SyntaxError";
				        return self;
				    }
				    peg$subclass(peg$SyntaxError, Error);
				    function peg$padEnd(str, targetLength, padString) {
				        padString = padString || " ";
				        if (str.length > targetLength) {
				            return str;
				        }
				        targetLength -= str.length;
				        padString += padString.repeat(targetLength);
				        return str + padString.slice(0, targetLength);
				    }
				    peg$SyntaxError.prototype.format = function (sources) {
				        var str = "Error: " + this.message;
				        if (this.location) {
				            var src = null;
				            var k;
				            for (k = 0; k < sources.length; k++) {
				                if (sources[k].source === this.location.source) {
				                    src = sources[k].text.split(/\r\n|\n|\r/g);
				                    break;
				                }
				            }
				            var s = this.location.start;
				            var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
				                ? this.location.source.offset(s)
				                : s;
				            var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
				            if (src) {
				                var e = this.location.end;
				                var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
				                var line = src[s.line - 1];
				                var last = s.line === e.line ? e.column : line.length + 1;
				                var hatLen = (last - s.column) || 1;
				                str += "\n --> " + loc + "\n"
				                    + filler + " |\n"
				                    + offset_s.line + " | " + line + "\n"
				                    + filler + " | " + peg$padEnd("", s.column - 1, ' ')
				                    + peg$padEnd("", hatLen, "^");
				            }
				            else {
				                str += "\n at " + loc;
				            }
				        }
				        return str;
				    };
				    peg$SyntaxError.buildMessage = function (expected, found) {
				        var DESCRIBE_EXPECTATION_FNS = {
				            literal: function (expectation) {
				                return "\"" + literalEscape(expectation.text) + "\"";
				            },
				            class: function (expectation) {
				                var escapedParts = expectation.parts.map(function (part) {
				                    return Array.isArray(part)
				                        ? classEscape(part[0]) + "-" + classEscape(part[1])
				                        : classEscape(part);
				                });
				                return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
				            },
				            any: function () {
				                return "any character";
				            },
				            end: function () {
				                return "end of input";
				            },
				            other: function (expectation) {
				                return expectation.description;
				            }
				        };
				        function hex(ch) {
				            return ch.charCodeAt(0).toString(16).toUpperCase();
				        }
				        function literalEscape(s) {
				            return s
				                .replace(/\\/g, "\\\\")
				                .replace(/"/g, "\\\"")
				                .replace(/\0/g, "\\0")
				                .replace(/\t/g, "\\t")
				                .replace(/\n/g, "\\n")
				                .replace(/\r/g, "\\r")
				                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
				                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
				        }
				        function classEscape(s) {
				            return s
				                .replace(/\\/g, "\\\\")
				                .replace(/\]/g, "\\]")
				                .replace(/\^/g, "\\^")
				                .replace(/-/g, "\\-")
				                .replace(/\0/g, "\\0")
				                .replace(/\t/g, "\\t")
				                .replace(/\n/g, "\\n")
				                .replace(/\r/g, "\\r")
				                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
				                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
				        }
				        function describeExpectation(expectation) {
				            return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
				        }
				        function describeExpected(expected) {
				            var descriptions = expected.map(describeExpectation);
				            var i, j;
				            descriptions.sort();
				            if (descriptions.length > 0) {
				                for (i = 1, j = 1; i < descriptions.length; i++) {
				                    if (descriptions[i - 1] !== descriptions[i]) {
				                        descriptions[j] = descriptions[i];
				                        j++;
				                    }
				                }
				                descriptions.length = j;
				            }
				            switch (descriptions.length) {
				                case 1:
				                    return descriptions[0];
				                case 2:
				                    return descriptions[0] + " or " + descriptions[1];
				                default:
				                    return descriptions.slice(0, -1).join(", ")
				                        + ", or "
				                        + descriptions[descriptions.length - 1];
				            }
				        }
				        function describeFound(found) {
				            return found ? "\"" + literalEscape(found) + "\"" : "end of input";
				        }
				        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
				    };
				    function peg$parse(input, options) {
				        options = options !== undefined ? options : {};
				        var peg$FAILED = {};
				        var peg$source = options.grammarSource;
				        var peg$startRuleFunctions = { pgn: peg$parsepgn, tags: peg$parsetags, game: peg$parsegame, games: peg$parsegames };
				        var peg$startRuleFunction = peg$parsepgn;
				        var peg$c0 = "\uFEFF";
				        var peg$c1 = "Event";
				        var peg$c2 = "event";
				        var peg$c3 = "Site";
				        var peg$c4 = "site";
				        var peg$c5 = "Date";
				        var peg$c6 = "date";
				        var peg$c7 = "Round";
				        var peg$c8 = "round";
				        var peg$c9 = "White";
				        var peg$c10 = "white";
				        var peg$c11 = "Black";
				        var peg$c12 = "black";
				        var peg$c13 = "Result";
				        var peg$c14 = "result";
				        var peg$c15 = "WhiteTitle";
				        var peg$c16 = "Whitetitle";
				        var peg$c17 = "whitetitle";
				        var peg$c18 = "whiteTitle";
				        var peg$c19 = "BlackTitle";
				        var peg$c20 = "Blacktitle";
				        var peg$c21 = "blacktitle";
				        var peg$c22 = "blackTitle";
				        var peg$c23 = "WhiteELO";
				        var peg$c24 = "WhiteElo";
				        var peg$c25 = "Whiteelo";
				        var peg$c26 = "whiteelo";
				        var peg$c27 = "whiteElo";
				        var peg$c28 = "BlackELO";
				        var peg$c29 = "BlackElo";
				        var peg$c30 = "Blackelo";
				        var peg$c31 = "blackelo";
				        var peg$c32 = "blackElo";
				        var peg$c33 = "WhiteUSCF";
				        var peg$c34 = "WhiteUscf";
				        var peg$c35 = "Whiteuscf";
				        var peg$c36 = "whiteuscf";
				        var peg$c37 = "whiteUscf";
				        var peg$c38 = "BlackUSCF";
				        var peg$c39 = "BlackUscf";
				        var peg$c40 = "Blackuscf";
				        var peg$c41 = "blackuscf";
				        var peg$c42 = "blackUscf";
				        var peg$c43 = "WhiteNA";
				        var peg$c44 = "WhiteNa";
				        var peg$c45 = "Whitena";
				        var peg$c46 = "whitena";
				        var peg$c47 = "whiteNa";
				        var peg$c48 = "whiteNA";
				        var peg$c49 = "BlackNA";
				        var peg$c50 = "BlackNa";
				        var peg$c51 = "Blackna";
				        var peg$c52 = "blackna";
				        var peg$c53 = "blackNA";
				        var peg$c54 = "blackNa";
				        var peg$c55 = "WhiteType";
				        var peg$c56 = "Whitetype";
				        var peg$c57 = "whitetype";
				        var peg$c58 = "whiteType";
				        var peg$c59 = "BlackType";
				        var peg$c60 = "Blacktype";
				        var peg$c61 = "blacktype";
				        var peg$c62 = "blackType";
				        var peg$c63 = "EventDate";
				        var peg$c64 = "Eventdate";
				        var peg$c65 = "eventdate";
				        var peg$c66 = "eventDate";
				        var peg$c67 = "EventSponsor";
				        var peg$c68 = "Eventsponsor";
				        var peg$c69 = "eventsponsor";
				        var peg$c70 = "eventSponsor";
				        var peg$c71 = "Section";
				        var peg$c72 = "section";
				        var peg$c73 = "Stage";
				        var peg$c74 = "stage";
				        var peg$c75 = "Board";
				        var peg$c76 = "board";
				        var peg$c77 = "Opening";
				        var peg$c78 = "opening";
				        var peg$c79 = "Variation";
				        var peg$c80 = "variation";
				        var peg$c81 = "SubVariation";
				        var peg$c82 = "Subvariation";
				        var peg$c83 = "subvariation";
				        var peg$c84 = "subVariation";
				        var peg$c85 = "ECO";
				        var peg$c86 = "Eco";
				        var peg$c87 = "eco";
				        var peg$c88 = "NIC";
				        var peg$c89 = "Nic";
				        var peg$c90 = "nic";
				        var peg$c91 = "Time";
				        var peg$c92 = "time";
				        var peg$c93 = "UTCTime";
				        var peg$c94 = "UTCtime";
				        var peg$c95 = "UtcTime";
				        var peg$c96 = "Utctime";
				        var peg$c97 = "utctime";
				        var peg$c98 = "utcTime";
				        var peg$c99 = "UTCDate";
				        var peg$c100 = "UTCdate";
				        var peg$c101 = "UtcDate";
				        var peg$c102 = "Utcdate";
				        var peg$c103 = "utcdate";
				        var peg$c104 = "utcDate";
				        var peg$c105 = "TimeControl";
				        var peg$c106 = "Timecontrol";
				        var peg$c107 = "timecontrol";
				        var peg$c108 = "timeControl";
				        var peg$c109 = "SetUp";
				        var peg$c110 = "Setup";
				        var peg$c111 = "setup";
				        var peg$c112 = "setUp";
				        var peg$c113 = "FEN";
				        var peg$c114 = "Fen";
				        var peg$c115 = "fen";
				        var peg$c116 = "Termination";
				        var peg$c117 = "termination";
				        var peg$c118 = "Annotator";
				        var peg$c119 = "annotator";
				        var peg$c120 = "Mode";
				        var peg$c121 = "mode";
				        var peg$c122 = "PlyCount";
				        var peg$c123 = "Plycount";
				        var peg$c124 = "plycount";
				        var peg$c125 = "plyCount";
				        var peg$c126 = "Variant";
				        var peg$c127 = "variant";
				        var peg$c128 = "WhiteRatingDiff";
				        var peg$c129 = "BlackRatingDiff";
				        var peg$c130 = "WhiteFideId";
				        var peg$c131 = "BlackFideId";
				        var peg$c132 = "WhiteTeam";
				        var peg$c133 = "BlackTeam";
				        var peg$c134 = "Clock";
				        var peg$c135 = "WhiteClock";
				        var peg$c136 = "BlackClock";
				        var peg$c138 = "\"";
				        var peg$c139 = "\\";
				        var peg$c140 = ".";
				        var peg$c141 = ":";
				        var peg$c142 = "/";
				        var peg$c143 = "?";
				        var peg$c144 = "-";
				        var peg$c145 = "+";
				        var peg$c146 = "*";
				        var peg$c147 = "1-0";
				        var peg$c148 = "0-1";
				        var peg$c149 = "1/2-1/2";
				        var peg$c150 = "1/2";
				        var peg$c151 = "=";
				        var peg$c152 = "%csl";
				        var peg$c153 = "%cal";
				        var peg$c154 = "%";
				        var peg$c155 = "%eval";
				        var peg$c156 = "[%";
				        var peg$c157 = "}";
				        var peg$c158 = ",";
				        var peg$c159 = "Y";
				        var peg$c160 = "G";
				        var peg$c161 = "R";
				        var peg$c162 = "B";
				        var peg$c163 = "O";
				        var peg$c164 = "C";
				        var peg$c165 = "{";
				        var peg$c166 = "[";
				        var peg$c167 = "]";
				        var peg$c168 = ";";
				        var peg$c169 = "clk";
				        var peg$c170 = "egt";
				        var peg$c171 = "emt";
				        var peg$c172 = "mct";
				        var peg$c173 = "(";
				        var peg$c174 = ")";
				        var peg$c175 = " ";
				        var peg$c176 = "e.p.";
				        var peg$c177 = "O-O-O";
				        var peg$c178 = "O-O";
				        var peg$c179 = "@";
				        var peg$c180 = "Z0";
				        var peg$c181 = "+-";
				        var peg$c182 = "$$$";
				        var peg$c183 = "#";
				        var peg$c184 = "$";
				        var peg$c185 = "!!";
				        var peg$c186 = "??";
				        var peg$c187 = "!?";
				        var peg$c188 = "?!";
				        var peg$c189 = "!";
				        var peg$c190 = "\u203C";
				        var peg$c191 = "\u2047";
				        var peg$c192 = "\u2049";
				        var peg$c193 = "\u2048";
				        var peg$c194 = "\u25A1";
				        var peg$c195 = "\u221E";
				        var peg$c196 = "\u2A72";
				        var peg$c197 = "\u2A71";
				        var peg$c198 = "\xB1";
				        var peg$c199 = "\u2213";
				        var peg$c200 = "-+";
				        var peg$c201 = "\u2A00";
				        var peg$c202 = "\u27F3";
				        var peg$c203 = "\u2192";
				        var peg$c204 = "\u2191";
				        var peg$c205 = "\u21C6";
				        var peg$c206 = "D";
				        var peg$c207 = "x";
				        var peg$r0 = /^[ \t\n\r]/;
				        var peg$r1 = /^[\n\r]/;
				        var peg$r2 = /^[\-a-zA-Z0-9_.]/;
				        var peg$r3 = /^[^"\\\r\n]/;
				        var peg$r4 = /^[0-9?]/;
				        var peg$r5 = /^[0-9]/;
				        var peg$r6 = /^[BNW]/;
				        var peg$r7 = /^[^\n\r]/;
				        var peg$r8 = /^[1-8a-h]/;
				        var peg$r9 = /^[RNBQKP]/;
				        var peg$r10 = /^[RNBQ]/;
				        var peg$r11 = /^[a-h]/;
				        var peg$r12 = /^[1-8]/;
				        var peg$r13 = /^[\-x]/;
				        var peg$e0 = peg$literalExpectation("\uFEFF", false);
				        var peg$e1 = peg$literalExpectation("Event", false);
				        var peg$e2 = peg$literalExpectation("event", false);
				        var peg$e3 = peg$literalExpectation("Site", false);
				        var peg$e4 = peg$literalExpectation("site", false);
				        var peg$e5 = peg$literalExpectation("Date", false);
				        var peg$e6 = peg$literalExpectation("date", false);
				        var peg$e7 = peg$literalExpectation("Round", false);
				        var peg$e8 = peg$literalExpectation("round", false);
				        var peg$e9 = peg$literalExpectation("White", false);
				        var peg$e10 = peg$literalExpectation("white", false);
				        var peg$e11 = peg$literalExpectation("Black", false);
				        var peg$e12 = peg$literalExpectation("black", false);
				        var peg$e13 = peg$literalExpectation("Result", false);
				        var peg$e14 = peg$literalExpectation("result", false);
				        var peg$e15 = peg$literalExpectation("WhiteTitle", false);
				        var peg$e16 = peg$literalExpectation("Whitetitle", false);
				        var peg$e17 = peg$literalExpectation("whitetitle", false);
				        var peg$e18 = peg$literalExpectation("whiteTitle", false);
				        var peg$e19 = peg$literalExpectation("BlackTitle", false);
				        var peg$e20 = peg$literalExpectation("Blacktitle", false);
				        var peg$e21 = peg$literalExpectation("blacktitle", false);
				        var peg$e22 = peg$literalExpectation("blackTitle", false);
				        var peg$e23 = peg$literalExpectation("WhiteELO", false);
				        var peg$e24 = peg$literalExpectation("WhiteElo", false);
				        var peg$e25 = peg$literalExpectation("Whiteelo", false);
				        var peg$e26 = peg$literalExpectation("whiteelo", false);
				        var peg$e27 = peg$literalExpectation("whiteElo", false);
				        var peg$e28 = peg$literalExpectation("BlackELO", false);
				        var peg$e29 = peg$literalExpectation("BlackElo", false);
				        var peg$e30 = peg$literalExpectation("Blackelo", false);
				        var peg$e31 = peg$literalExpectation("blackelo", false);
				        var peg$e32 = peg$literalExpectation("blackElo", false);
				        var peg$e33 = peg$literalExpectation("WhiteUSCF", false);
				        var peg$e34 = peg$literalExpectation("WhiteUscf", false);
				        var peg$e35 = peg$literalExpectation("Whiteuscf", false);
				        var peg$e36 = peg$literalExpectation("whiteuscf", false);
				        var peg$e37 = peg$literalExpectation("whiteUscf", false);
				        var peg$e38 = peg$literalExpectation("BlackUSCF", false);
				        var peg$e39 = peg$literalExpectation("BlackUscf", false);
				        var peg$e40 = peg$literalExpectation("Blackuscf", false);
				        var peg$e41 = peg$literalExpectation("blackuscf", false);
				        var peg$e42 = peg$literalExpectation("blackUscf", false);
				        var peg$e43 = peg$literalExpectation("WhiteNA", false);
				        var peg$e44 = peg$literalExpectation("WhiteNa", false);
				        var peg$e45 = peg$literalExpectation("Whitena", false);
				        var peg$e46 = peg$literalExpectation("whitena", false);
				        var peg$e47 = peg$literalExpectation("whiteNa", false);
				        var peg$e48 = peg$literalExpectation("whiteNA", false);
				        var peg$e49 = peg$literalExpectation("BlackNA", false);
				        var peg$e50 = peg$literalExpectation("BlackNa", false);
				        var peg$e51 = peg$literalExpectation("Blackna", false);
				        var peg$e52 = peg$literalExpectation("blackna", false);
				        var peg$e53 = peg$literalExpectation("blackNA", false);
				        var peg$e54 = peg$literalExpectation("blackNa", false);
				        var peg$e55 = peg$literalExpectation("WhiteType", false);
				        var peg$e56 = peg$literalExpectation("Whitetype", false);
				        var peg$e57 = peg$literalExpectation("whitetype", false);
				        var peg$e58 = peg$literalExpectation("whiteType", false);
				        var peg$e59 = peg$literalExpectation("BlackType", false);
				        var peg$e60 = peg$literalExpectation("Blacktype", false);
				        var peg$e61 = peg$literalExpectation("blacktype", false);
				        var peg$e62 = peg$literalExpectation("blackType", false);
				        var peg$e63 = peg$literalExpectation("EventDate", false);
				        var peg$e64 = peg$literalExpectation("Eventdate", false);
				        var peg$e65 = peg$literalExpectation("eventdate", false);
				        var peg$e66 = peg$literalExpectation("eventDate", false);
				        var peg$e67 = peg$literalExpectation("EventSponsor", false);
				        var peg$e68 = peg$literalExpectation("Eventsponsor", false);
				        var peg$e69 = peg$literalExpectation("eventsponsor", false);
				        var peg$e70 = peg$literalExpectation("eventSponsor", false);
				        var peg$e71 = peg$literalExpectation("Section", false);
				        var peg$e72 = peg$literalExpectation("section", false);
				        var peg$e73 = peg$literalExpectation("Stage", false);
				        var peg$e74 = peg$literalExpectation("stage", false);
				        var peg$e75 = peg$literalExpectation("Board", false);
				        var peg$e76 = peg$literalExpectation("board", false);
				        var peg$e77 = peg$literalExpectation("Opening", false);
				        var peg$e78 = peg$literalExpectation("opening", false);
				        var peg$e79 = peg$literalExpectation("Variation", false);
				        var peg$e80 = peg$literalExpectation("variation", false);
				        var peg$e81 = peg$literalExpectation("SubVariation", false);
				        var peg$e82 = peg$literalExpectation("Subvariation", false);
				        var peg$e83 = peg$literalExpectation("subvariation", false);
				        var peg$e84 = peg$literalExpectation("subVariation", false);
				        var peg$e85 = peg$literalExpectation("ECO", false);
				        var peg$e86 = peg$literalExpectation("Eco", false);
				        var peg$e87 = peg$literalExpectation("eco", false);
				        var peg$e88 = peg$literalExpectation("NIC", false);
				        var peg$e89 = peg$literalExpectation("Nic", false);
				        var peg$e90 = peg$literalExpectation("nic", false);
				        var peg$e91 = peg$literalExpectation("Time", false);
				        var peg$e92 = peg$literalExpectation("time", false);
				        var peg$e93 = peg$literalExpectation("UTCTime", false);
				        var peg$e94 = peg$literalExpectation("UTCtime", false);
				        var peg$e95 = peg$literalExpectation("UtcTime", false);
				        var peg$e96 = peg$literalExpectation("Utctime", false);
				        var peg$e97 = peg$literalExpectation("utctime", false);
				        var peg$e98 = peg$literalExpectation("utcTime", false);
				        var peg$e99 = peg$literalExpectation("UTCDate", false);
				        var peg$e100 = peg$literalExpectation("UTCdate", false);
				        var peg$e101 = peg$literalExpectation("UtcDate", false);
				        var peg$e102 = peg$literalExpectation("Utcdate", false);
				        var peg$e103 = peg$literalExpectation("utcdate", false);
				        var peg$e104 = peg$literalExpectation("utcDate", false);
				        var peg$e105 = peg$literalExpectation("TimeControl", false);
				        var peg$e106 = peg$literalExpectation("Timecontrol", false);
				        var peg$e107 = peg$literalExpectation("timecontrol", false);
				        var peg$e108 = peg$literalExpectation("timeControl", false);
				        var peg$e109 = peg$literalExpectation("SetUp", false);
				        var peg$e110 = peg$literalExpectation("Setup", false);
				        var peg$e111 = peg$literalExpectation("setup", false);
				        var peg$e112 = peg$literalExpectation("setUp", false);
				        var peg$e113 = peg$literalExpectation("FEN", false);
				        var peg$e114 = peg$literalExpectation("Fen", false);
				        var peg$e115 = peg$literalExpectation("fen", false);
				        var peg$e116 = peg$literalExpectation("Termination", false);
				        var peg$e117 = peg$literalExpectation("termination", false);
				        var peg$e118 = peg$literalExpectation("Annotator", false);
				        var peg$e119 = peg$literalExpectation("annotator", false);
				        var peg$e120 = peg$literalExpectation("Mode", false);
				        var peg$e121 = peg$literalExpectation("mode", false);
				        var peg$e122 = peg$literalExpectation("PlyCount", false);
				        var peg$e123 = peg$literalExpectation("Plycount", false);
				        var peg$e124 = peg$literalExpectation("plycount", false);
				        var peg$e125 = peg$literalExpectation("plyCount", false);
				        var peg$e126 = peg$literalExpectation("Variant", false);
				        var peg$e127 = peg$literalExpectation("variant", false);
				        var peg$e128 = peg$literalExpectation("WhiteRatingDiff", false);
				        var peg$e129 = peg$literalExpectation("BlackRatingDiff", false);
				        var peg$e130 = peg$literalExpectation("WhiteFideId", false);
				        var peg$e131 = peg$literalExpectation("BlackFideId", false);
				        var peg$e132 = peg$literalExpectation("WhiteTeam", false);
				        var peg$e133 = peg$literalExpectation("BlackTeam", false);
				        var peg$e134 = peg$literalExpectation("Clock", false);
				        var peg$e135 = peg$literalExpectation("WhiteClock", false);
				        var peg$e136 = peg$literalExpectation("BlackClock", false);
				        var peg$e137 = peg$otherExpectation("whitespace");
				        var peg$e138 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
				        var peg$e139 = peg$classExpectation(["\n", "\r"], false, false);
				        var peg$e141 = peg$classExpectation(["-", ["a", "z"], ["A", "Z"], ["0", "9"], "_", "."], false, false);
				        var peg$e142 = peg$literalExpectation("\"", false);
				        var peg$e143 = peg$classExpectation(["\"", "\\", "\r", "\n"], true, false);
				        var peg$e144 = peg$literalExpectation("\\", false);
				        var peg$e145 = peg$classExpectation([["0", "9"], "?"], false, false);
				        var peg$e146 = peg$literalExpectation(".", false);
				        var peg$e147 = peg$classExpectation([["0", "9"]], false, false);
				        var peg$e148 = peg$literalExpectation(":", false);
				        var peg$e149 = peg$literalExpectation("/", false);
				        var peg$e150 = peg$classExpectation(["B", "N", "W"], false, false);
				        var peg$e151 = peg$literalExpectation("?", false);
				        var peg$e152 = peg$literalExpectation("-", false);
				        var peg$e153 = peg$literalExpectation("+", false);
				        var peg$e154 = peg$literalExpectation("*", false);
				        var peg$e155 = peg$literalExpectation("1-0", false);
				        var peg$e156 = peg$literalExpectation("0-1", false);
				        var peg$e157 = peg$literalExpectation("1/2-1/2", false);
				        var peg$e158 = peg$literalExpectation("1/2", false);
				        var peg$e159 = peg$literalExpectation("=", false);
				        var peg$e160 = peg$literalExpectation("%csl", false);
				        var peg$e161 = peg$literalExpectation("%cal", false);
				        var peg$e162 = peg$literalExpectation("%", false);
				        var peg$e163 = peg$literalExpectation("%eval", false);
				        var peg$e164 = peg$literalExpectation("[%", false);
				        var peg$e165 = peg$literalExpectation("}", false);
				        var peg$e166 = peg$anyExpectation();
				        var peg$e167 = peg$classExpectation(["\n", "\r"], true, false);
				        var peg$e168 = peg$literalExpectation(",", false);
				        var peg$e169 = peg$literalExpectation("Y", false);
				        var peg$e170 = peg$literalExpectation("G", false);
				        var peg$e171 = peg$literalExpectation("R", false);
				        var peg$e172 = peg$literalExpectation("B", false);
				        var peg$e173 = peg$literalExpectation("O", false);
				        var peg$e174 = peg$literalExpectation("C", false);
				        var peg$e175 = peg$literalExpectation("{", false);
				        var peg$e176 = peg$literalExpectation("[", false);
				        var peg$e177 = peg$literalExpectation("]", false);
				        var peg$e178 = peg$literalExpectation(";", false);
				        var peg$e179 = peg$literalExpectation("clk", false);
				        var peg$e180 = peg$literalExpectation("egt", false);
				        var peg$e181 = peg$literalExpectation("emt", false);
				        var peg$e182 = peg$literalExpectation("mct", false);
				        var peg$e183 = peg$literalExpectation("(", false);
				        var peg$e184 = peg$literalExpectation(")", false);
				        var peg$e185 = peg$otherExpectation("integer");
				        var peg$e186 = peg$literalExpectation(" ", false);
				        var peg$e187 = peg$literalExpectation("e.p.", false);
				        var peg$e188 = peg$literalExpectation("O-O-O", false);
				        var peg$e189 = peg$literalExpectation("O-O", false);
				        var peg$e190 = peg$literalExpectation("@", false);
				        var peg$e191 = peg$literalExpectation("Z0", false);
				        var peg$e192 = peg$literalExpectation("+-", false);
				        var peg$e193 = peg$literalExpectation("$$$", false);
				        var peg$e194 = peg$literalExpectation("#", false);
				        var peg$e195 = peg$literalExpectation("$", false);
				        var peg$e196 = peg$literalExpectation("!!", false);
				        var peg$e197 = peg$literalExpectation("??", false);
				        var peg$e198 = peg$literalExpectation("!?", false);
				        var peg$e199 = peg$literalExpectation("?!", false);
				        var peg$e200 = peg$literalExpectation("!", false);
				        var peg$e201 = peg$literalExpectation("\u203C", false);
				        var peg$e202 = peg$literalExpectation("\u2047", false);
				        var peg$e203 = peg$literalExpectation("\u2049", false);
				        var peg$e204 = peg$literalExpectation("\u2048", false);
				        var peg$e205 = peg$literalExpectation("\u25A1", false);
				        var peg$e206 = peg$literalExpectation("\u221E", false);
				        var peg$e207 = peg$literalExpectation("\u2A72", false);
				        var peg$e208 = peg$literalExpectation("\u2A71", false);
				        var peg$e209 = peg$literalExpectation("\xB1", false);
				        var peg$e210 = peg$literalExpectation("\u2213", false);
				        var peg$e211 = peg$literalExpectation("-+", false);
				        var peg$e212 = peg$literalExpectation("\u2A00", false);
				        var peg$e213 = peg$literalExpectation("\u27F3", false);
				        var peg$e214 = peg$literalExpectation("\u2192", false);
				        var peg$e215 = peg$literalExpectation("\u2191", false);
				        var peg$e216 = peg$literalExpectation("\u21C6", false);
				        var peg$e217 = peg$literalExpectation("D", false);
				        var peg$e218 = peg$classExpectation([["1", "8"], ["a", "h"]], false, false);
				        var peg$e219 = peg$classExpectation(["R", "N", "B", "Q", "K", "P"], false, false);
				        var peg$e220 = peg$classExpectation(["R", "N", "B", "Q"], false, false);
				        var peg$e221 = peg$classExpectation([["a", "h"]], false, false);
				        var peg$e222 = peg$classExpectation([["1", "8"]], false, false);
				        var peg$e223 = peg$literalExpectation("x", false);
				        var peg$e224 = peg$classExpectation(["-", "x"], false, false);
				        var peg$f0 = function (head, m) { return m; };
				        var peg$f1 = function (head, tail) {
				            //console.log("Length tail: " + tail.length);
				            return [head].concat(tail);
				        };
				        var peg$f2 = function (games) {
				            //console.log("Length: " + games.length);
				            return games;
				        };
				        var peg$f3 = function (t, c, p) {
				            //console.log("Length pgn: " + p.length);
				            var mess = messages;
				            messages = [];
				            return { tags: t, gameComment: c, moves: p, messages: mess };
				        };
				        var peg$f4 = function (head, m) { return m; };
				        var peg$f5 = function (head, tail) {
				            var result = {};
				            [head].concat(tail).forEach(function (element) {
				                result[element.name] = element.value;
				            });
				            return result;
				        };
				        var peg$f6 = function (members) {
				            if (members === null)
				                return {};
				            members.messages = messages;
				            return members;
				        };
				        var peg$f7 = function (tag) { return tag; };
				        var peg$f8 = function (value) { return { name: 'Event', value: value }; };
				        var peg$f9 = function (value) { return { name: 'Site', value: value }; };
				        var peg$f10 = function (value) { return { name: 'Date', value: value }; };
				        var peg$f11 = function (value) { return { name: 'Round', value: value }; };
				        var peg$f12 = function (value) { return { name: 'WhiteTitle', value: value }; };
				        var peg$f13 = function (value) { return { name: 'BlackTitle', value: value }; };
				        var peg$f14 = function (value) { return { name: 'WhiteElo', value: value }; };
				        var peg$f15 = function (value) { return { name: 'BlackElo', value: value }; };
				        var peg$f16 = function (value) { return { name: 'WhiteUSCF', value: value }; };
				        var peg$f17 = function (value) { return { name: 'BlackUSCF', value: value }; };
				        var peg$f18 = function (value) { return { name: 'WhiteNA', value: value }; };
				        var peg$f19 = function (value) { return { name: 'BlackNA', value: value }; };
				        var peg$f20 = function (value) { return { name: 'WhiteType', value: value }; };
				        var peg$f21 = function (value) { return { name: 'BlackType', value: value }; };
				        var peg$f22 = function (value) { return { name: 'White', value: value }; };
				        var peg$f23 = function (value) { return { name: 'Black', value: value }; };
				        var peg$f24 = function (value) { return { name: 'Result', value: value }; };
				        var peg$f25 = function (value) { return { name: 'EventDate', value: value }; };
				        var peg$f26 = function (value) { return { name: 'EventSponsor', value: value }; };
				        var peg$f27 = function (value) { return { name: 'Section', value: value }; };
				        var peg$f28 = function (value) { return { name: 'Stage', value: value }; };
				        var peg$f29 = function (value) { return { name: 'Board', value: value }; };
				        var peg$f30 = function (value) { return { name: 'Opening', value: value }; };
				        var peg$f31 = function (value) { return { name: 'Variation', value: value }; };
				        var peg$f32 = function (value) { return { name: 'SubVariation', value: value }; };
				        var peg$f33 = function (value) { return { name: 'ECO', value: value }; };
				        var peg$f34 = function (value) { return { name: 'NIC', value: value }; };
				        var peg$f35 = function (value) { return { name: 'Time', value: value }; };
				        var peg$f36 = function (value) { return { name: 'UTCTime', value: value }; };
				        var peg$f37 = function (value) { return { name: 'UTCDate', value: value }; };
				        var peg$f38 = function (value) { return { name: 'TimeControl', value: value }; };
				        var peg$f39 = function (value) { return { name: 'SetUp', value: value }; };
				        var peg$f40 = function (value) { return { name: 'FEN', value: value }; };
				        var peg$f41 = function (value) { return { name: 'Termination', value: value }; };
				        var peg$f42 = function (value) { return { name: 'Annotator', value: value }; };
				        var peg$f43 = function (value) { return { name: 'Mode', value: value }; };
				        var peg$f44 = function (value) { return { name: 'PlyCount', value: value }; };
				        var peg$f45 = function (value) { return { name: 'Variant', value: value }; };
				        var peg$f46 = function (value) { return { name: 'WhiteRatingDiff', value: value }; };
				        var peg$f47 = function (value) { return { name: 'BlackRatingDiff', value: value }; };
				        var peg$f48 = function (value) { return { name: 'WhiteFideId', value: value }; };
				        var peg$f49 = function (value) { return { name: 'BlackFideId', value: value }; };
				        var peg$f50 = function (value) { return { name: 'WhiteTeam', value: value }; };
				        var peg$f51 = function (value) { return { name: 'BlackTeam', value: value }; };
				        var peg$f52 = function (value) { return { name: 'Clock', value: value }; };
				        var peg$f53 = function (value) { return { name: 'WhiteClock', value: value }; };
				        var peg$f54 = function (value) { return { name: 'BlackClock', value: value }; };
				        var peg$f55 = function (a, value) {
				            addMessage({ key: a, value: value, message: `Format of tag: "${a}" not correct: "${value}"` });
				            return { name: a, value: value };
				        };
				        var peg$f56 = function (a, value) {
				            addMessage({ key: a, value: value, message: `Tag: "${a}" not known: "${value}"` });
				            return { name: a, value: value };
				        };
				        var peg$f58 = function (chars) { return chars.join(""); };
				        var peg$f59 = function (stringContent) { return stringContent.map(c => c.char || c).join(''); };
				        var peg$f60 = function () { return { type: "char", char: "\\" }; };
				        var peg$f61 = function () { return { type: "char", char: '"' }; };
				        var peg$f62 = function (sequence) { return sequence; };
				        var peg$f63 = function (year, month, day) {
				            let val = "" + year.join("") + '.' + month.join("") + '.' + day.join("");
				            return { value: val, year: mi(year), month: mi(month), day: mi(day) };
				        };
				        var peg$f64 = function (hour, minute, second, millis) {
				            let val = hour.join("") + ':' + minute.join("") + ':' + second.join("");
				            let ms = 0;
				            if (millis) {
				                val = val + '.' + millis;
				                addMessage({ message: `Unusual use of millis in time: ${val}` });
				                mi(millis);
				            }
				            return { value: val, hour: mi(hour), minute: mi(minute), second: mi(second), millis: ms };
				        };
				        var peg$f65 = function (millis) { return millis.join(""); };
				        var peg$f66 = function (value) { return value; };
				        var peg$f67 = function (c, t) { return c + '/' + t; };
				        var peg$f68 = function (value) { return value; };
				        var peg$f69 = function (value) { return value; };
				        var peg$f70 = function (res) {
				            if (!res) {
				                addMessage({ message: "Tag TimeControl has to have a value" });
				                return "";
				            }
				            return res;
				        };
				        var peg$f71 = function (head, m) { return m; };
				        var peg$f72 = function (head, tail) { let ret = [head].concat(tail); ret.value = ret.map(ret => ret.value).join(':'); return ret; };
				        var peg$f73 = function (tcnqs) { return tcnqs; };
				        var peg$f74 = function () { return { kind: 'unknown', value: '?' }; };
				        var peg$f75 = function () { return { kind: 'unlimited', value: '-' }; };
				        var peg$f76 = function (moves, seconds, incr) { return { kind: 'movesInSecondsIncrement', moves: moves, seconds: seconds, increment: incr, value: '' + moves + '/' + seconds + '+' + incr }; };
				        var peg$f77 = function (moves, seconds) { return { kind: 'movesInSeconds', moves: moves, seconds: seconds, value: '' + moves + '/' + seconds }; };
				        var peg$f78 = function (seconds, incr) { return { kind: 'increment', seconds: seconds, increment: incr, value: '' + seconds + '+' + incr }; };
				        var peg$f79 = function (seconds) { return { kind: 'suddenDeath', seconds: seconds, value: '' + seconds }; };
				        var peg$f80 = function (seconds) { return { kind: 'hourglass', seconds: seconds, value: '*' + seconds }; };
				        var peg$f81 = function (res) { return res; };
				        var peg$f82 = function (res) { return res; };
				        var peg$f83 = function (res) { return res; };
				        var peg$f84 = function (res) { return res; };
				        var peg$f85 = function () { return "1/2-1/2"; };
				        var peg$f86 = function (res) { return res; };
				        var peg$f87 = function (v) { return v; };
				        var peg$f88 = function () { return 0; };
				        var peg$f89 = function () { addMessage({ message: 'Use "-" for an unknown value' }); return 0; };
				        var peg$f90 = function (digits) { return makeInteger(digits); };
				        var peg$f91 = function (cm, mn, hm, nag, dr, ca, vari, all) {
				            var arr = (all ? all : []);
				            var move = {};
				            move.moveNumber = mn;
				            move.notation = hm;
				            if (ca) {
				                move.commentAfter = ca.comment;
				            }
				            if (cm) {
				                move.commentMove = cm.comment;
				            }
				            if (dr) {
				                move.drawOffer = true;
				            }
				            move.variations = (vari ? vari : []);
				            move.nag = (nag ? nag : null);
				            arr.unshift(move);
				            move.commentDiag = ca;
				            return arr;
				        };
				        var peg$f92 = function (e) { return e; };
				        var peg$f93 = function (eg) { return [eg]; };
				        var peg$f94 = function (cf, c) { return c; };
				        var peg$f95 = function (cf, cfl) { return merge([cf].concat(cfl)); };
				        var peg$f96 = function () { return; };
				        var peg$f97 = function (cm) { return cm; };
				        var peg$f98 = function (cm) { return { comment: cm }; };
				        var peg$f99 = function (cf, ic) { return ic; };
				        var peg$f100 = function (cf, tail) { return merge([{ colorFields: cf }].concat(tail[0])); };
				        var peg$f101 = function (ca, ic) { return ic; };
				        var peg$f102 = function (ca, tail) { return merge([{ colorArrows: ca }].concat(tail[0])); };
				        var peg$f103 = function (cc, cv, ic) { return ic; };
				        var peg$f104 = function (cc, cv, tail) { var ret = {}; ret[cc] = cv; return merge([ret].concat(tail[0])); };
				        var peg$f105 = function (cc, cv, ic) { return ic; };
				        var peg$f106 = function (cc, cv, tail) { var ret = {}; ret[cc] = cv; return merge([ret].concat(tail[0])); };
				        var peg$f107 = function (ev, ic) { return ic; };
				        var peg$f108 = function (ev, tail) { var ret = {}; ret["eval"] = parseFloat(ev); return merge([ret].concat(tail[0])); };
				        var peg$f109 = function (ac, val, ic) { return ic; };
				        var peg$f110 = function (ac, val, tail) { var ret = {}; ret[ac] = val.join(""); return merge([ret].concat(tail[0])); };
				        var peg$f111 = function (c, ic) { return ic; };
				        var peg$f112 = function (c, tail) {
				            if (tail.length > 0) {
				                return merge([{ comment: trimEnd(c.join("")) }].concat(trimStart(tail[0])));
				            }
				            else {
				                return { comment: c.join("") };
				            }
				        };
				        var peg$f113 = function (ch) { return ch; };
				        var peg$f114 = function (ch) { return ch; };
				        var peg$f115 = function (cm) { return cm.join(""); };
				        var peg$f116 = function (cf, cfl) { var arr = []; arr.push(cf); for (var i = 0; i < cfl.length; i++) {
				            arr.push(cfl[i][2]);
				        } return arr; };
				        var peg$f117 = function (col, f) { return col + f; };
				        var peg$f118 = function (cf, cfl) { var arr = []; arr.push(cf); for (var i = 0; i < cfl.length; i++) {
				            arr.push(cfl[i][2]);
				        } return arr; };
				        var peg$f119 = function (col, ff, ft) { return col + ff + ft; };
				        var peg$f120 = function () { return "Y"; };
				        var peg$f121 = function () { return "G"; };
				        var peg$f122 = function () { return "R"; };
				        var peg$f123 = function () { return "B"; };
				        var peg$f124 = function () { return "O"; };
				        var peg$f125 = function () { return "C"; };
				        var peg$f126 = function (col, row) { return col + row; };
				        var peg$f131 = function () { return "clk"; };
				        var peg$f132 = function () { return "egt"; };
				        var peg$f133 = function () { return "emt"; };
				        var peg$f134 = function () { return "mct"; };
				        var peg$f135 = function (hm, s1, s2, millis) {
				            let ret = s1;
				            if (!hm) {
				                addMessage({ message: `Hours and minutes missing` });
				            }
				            else {
				                ret = hm + ret;
				            }
				            if (hm && ((hm.match(/:/g) || []).length == 2)) {
				                if (hm.search(':') == 2) {
				                    addMessage({ message: `Only 1 digit for hours normally used` });
				                }
				            }
				            if (!s2) {
				                addMessage({ message: `Only 2 digit for seconds normally used` });
				            }
				            else {
				                ret += s2;
				            }
				            if (millis) {
				                addMessage({ message: `Unusual use of millis in clock value` });
				                ret += '.' + millis;
				            }
				            return ret;
				        };
				        var peg$f136 = function (hm, s1, s2) {
				            let ret = s1;
				            if (!hm) {
				                addMessage({ message: `Hours and minutes missing` });
				            }
				            else {
				                ret = hm + ret;
				            }
				            if (hm && ((hm.match(/:/g) || []).length == 2)) {
				                if (hm.search(':') == 1) {
				                    addMessage({ message: `Only 2 digits for hours normally used` });
				                }
				            }
				            if (!s2) {
				                addMessage({ message: `Only 2 digit for seconds normally used` });
				            }
				            else {
				                ret += s2;
				            }
				            return ret;
				        };
				        var peg$f137 = function (hours, minutes) {
				            if (!minutes) {
				                addMessage({ message: `No hours found` });
				                return hours;
				            }
				            return hours + minutes;
				        };
				        var peg$f138 = function (h1, h2) {
				            let ret = h1;
				            if (h2) {
				                ret += h2 + ":";
				            }
				            else {
				                ret += ":";
				            }
				            return ret;
				        };
				        var peg$f139 = function (m1, m2) {
				            let ret = m1;
				            if (m2) {
				                ret += m2 + ":";
				            }
				            else {
				                ret += ":";
				                addMessage({ message: `Only 2 digits for minutes normally used` });
				            }
				            return ret;
				        };
				        var peg$f140 = function (d) { return d; };
				        var peg$f141 = function (vari, all) { var arr = (all ? all : []); arr.unshift(vari); return arr; };
				        var peg$f142 = function (num) { return num; };
				        var peg$f143 = function (digits) { return makeInteger(digits); };
				        var peg$f144 = function () { return ''; };
				        var peg$f145 = function (fig, disc, str, col, row, pr, ch) {
				            var hm = {};
				            hm.fig = (fig ? fig : null);
				            hm.disc = (disc ? disc : null);
				            hm.strike = (str ? str : null);
				            hm.col = col;
				            hm.row = row;
				            hm.check = (ch ? ch : null);
				            hm.promotion = pr;
				            hm.notation = (fig ? fig : "") + (disc ? disc : "") + (str ? str : "") + col + row + (pr ? pr : "") + (ch ? ch : "");
				            return hm;
				        };
				        var peg$f146 = function (fig, cols, rows, str, col, row, pr, ch) {
				            var hm = {};
				            hm.fig = (fig ? fig : null);
				            hm.strike = (str == 'x' ? str : null);
				            hm.col = col;
				            hm.row = row;
				            hm.notation = (fig && (fig !== 'P') ? fig : "") + cols + rows + (str == 'x' ? str : "-") + col + row + (pr ? pr : "") + (ch ? ch : "");
				            hm.check = (ch ? ch : null);
				            hm.promotion = pr;
				            return hm;
				        };
				        var peg$f147 = function (fig, str, col, row, pr, ch) {
				            var hm = {};
				            hm.fig = (fig ? fig : null);
				            hm.strike = (str ? str : null);
				            hm.col = col;
				            hm.row = row;
				            hm.check = (ch ? ch : null);
				            hm.promotion = pr;
				            hm.notation = (fig ? fig : "") + (str ? str : "") + col + row + (pr ? pr : "") + (ch ? ch : "");
				            return hm;
				        };
				        var peg$f148 = function (ch) { var hm = {}; hm.notation = 'O-O-O' + (ch ? ch : ""); hm.check = (ch ? ch : null); return hm; };
				        var peg$f149 = function (ch) { var hm = {}; hm.notation = 'O-O' + (ch ? ch : ""); hm.check = (ch ? ch : null); return hm; };
				        var peg$f150 = function (fig, col, row) { var hm = {}; hm.fig = fig; hm.drop = true; hm.col = col; hm.row = row; hm.notation = fig + '@' + col + row; return hm; };
				        var peg$f151 = function () { var hm = {}; hm.notation = "Z0"; return hm; };
				        var peg$f152 = function (ch) { return ch[1]; };
				        var peg$f153 = function (ch) { return ch[1]; };
				        var peg$f154 = function (f) { return '=' + f; };
				        var peg$f155 = function (nag, nags) { var arr = (nags ? nags : []); arr.unshift(nag); return arr; };
				        var peg$f156 = function (num) { return '$' + num; };
				        var peg$f157 = function () { return '$3'; };
				        var peg$f158 = function () { return '$4'; };
				        var peg$f159 = function () { return '$5'; };
				        var peg$f160 = function () { return '$6'; };
				        var peg$f161 = function () { return '$1'; };
				        var peg$f162 = function () { return '$2'; };
				        var peg$f163 = function () { return '$3'; };
				        var peg$f164 = function () { return '$4'; };
				        var peg$f165 = function () { return '$5'; };
				        var peg$f166 = function () { return '$6'; };
				        var peg$f167 = function () { return '$7'; };
				        var peg$f168 = function () { return '$10'; };
				        var peg$f169 = function () { return '$13'; };
				        var peg$f170 = function () { return '$14'; };
				        var peg$f171 = function () { return '$15'; };
				        var peg$f172 = function () { return '$16'; };
				        var peg$f173 = function () { return '$17'; };
				        var peg$f174 = function () { return '$18'; };
				        var peg$f175 = function () { return '$19'; };
				        var peg$f176 = function () { return '$22'; };
				        var peg$f177 = function () { return '$32'; };
				        var peg$f178 = function () { return '$36'; };
				        var peg$f179 = function () { return '$40'; };
				        var peg$f180 = function () { return '$132'; };
				        var peg$f181 = function () { return '$220'; };
				        var peg$currPos = options.peg$currPos | 0;
				        var peg$savedPos = peg$currPos;
				        var peg$posDetailsCache = [{ line: 1, column: 1 }];
				        var peg$maxFailPos = peg$currPos;
				        var peg$maxFailExpected = options.peg$maxFailExpected || [];
				        var peg$silentFails = options.peg$silentFails | 0;
				        var peg$result;
				        if (options.startRule) {
				            if (!(options.startRule in peg$startRuleFunctions)) {
				                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
				            }
				            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
				        }
				        function location() {
				            return peg$computeLocation(peg$savedPos, peg$currPos);
				        }
				        function peg$literalExpectation(text, ignoreCase) {
				            return { type: "literal", text: text, ignoreCase: ignoreCase };
				        }
				        function peg$classExpectation(parts, inverted, ignoreCase) {
				            return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
				        }
				        function peg$anyExpectation() {
				            return { type: "any" };
				        }
				        function peg$endExpectation() {
				            return { type: "end" };
				        }
				        function peg$otherExpectation(description) {
				            return { type: "other", description: description };
				        }
				        function peg$computePosDetails(pos) {
				            var details = peg$posDetailsCache[pos];
				            var p;
				            if (details) {
				                return details;
				            }
				            else {
				                if (pos >= peg$posDetailsCache.length) {
				                    p = peg$posDetailsCache.length - 1;
				                }
				                else {
				                    p = pos;
				                    while (!peg$posDetailsCache[--p]) { }
				                }
				                details = peg$posDetailsCache[p];
				                details = {
				                    line: details.line,
				                    column: details.column
				                };
				                while (p < pos) {
				                    if (input.charCodeAt(p) === 10) {
				                        details.line++;
				                        details.column = 1;
				                    }
				                    else {
				                        details.column++;
				                    }
				                    p++;
				                }
				                peg$posDetailsCache[pos] = details;
				                return details;
				            }
				        }
				        function peg$computeLocation(startPos, endPos, offset) {
				            var startPosDetails = peg$computePosDetails(startPos);
				            var endPosDetails = peg$computePosDetails(endPos);
				            var res = {
				                source: peg$source,
				                start: {
				                    offset: startPos,
				                    line: startPosDetails.line,
				                    column: startPosDetails.column
				                },
				                end: {
				                    offset: endPos,
				                    line: endPosDetails.line,
				                    column: endPosDetails.column
				                }
				            };
				            return res;
				        }
				        function peg$fail(expected) {
				            if (peg$currPos < peg$maxFailPos) {
				                return;
				            }
				            if (peg$currPos > peg$maxFailPos) {
				                peg$maxFailPos = peg$currPos;
				                peg$maxFailExpected = [];
				            }
				            peg$maxFailExpected.push(expected);
				        }
				        function peg$buildStructuredError(expected, found, location) {
				            return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
				        }
				        function peg$parseBOM() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 65279) {
				                s0 = peg$c0;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e0);
				                }
				            }
				            return s0;
				        }
				        function peg$parsegames() {
				            var s0, s3, s4, s5, s6, s8;
				            s0 = peg$currPos;
				            peg$parseBOM();
				            peg$parsews();
				            s3 = peg$currPos;
				            s4 = peg$parsegame();
				            if (s4 !== peg$FAILED) {
				                s5 = [];
				                s6 = peg$currPos;
				                peg$parsews();
				                s8 = peg$parsegame();
				                if (s8 !== peg$FAILED) {
				                    peg$savedPos = s6;
				                    s6 = peg$f0(s4, s8);
				                }
				                else {
				                    peg$currPos = s6;
				                    s6 = peg$FAILED;
				                }
				                while (s6 !== peg$FAILED) {
				                    s5.push(s6);
				                    s6 = peg$currPos;
				                    peg$parsews();
				                    s8 = peg$parsegame();
				                    if (s8 !== peg$FAILED) {
				                        peg$savedPos = s6;
				                        s6 = peg$f0(s4, s8);
				                    }
				                    else {
				                        peg$currPos = s6;
				                        s6 = peg$FAILED;
				                    }
				                }
				                peg$savedPos = s3;
				                s3 = peg$f1(s4, s5);
				            }
				            else {
				                peg$currPos = s3;
				                s3 = peg$FAILED;
				            }
				            if (s3 === peg$FAILED) {
				                s3 = null;
				            }
				            peg$savedPos = s0;
				            s0 = peg$f2(s3);
				            return s0;
				        }
				        function peg$parsegame() {
				            var s0, s2, s3, s4;
				            s0 = peg$currPos;
				            peg$parseBOM();
				            s2 = peg$parsetags();
				            s3 = peg$parsecomments();
				            if (s3 === peg$FAILED) {
				                s3 = null;
				            }
				            s4 = peg$parsepgn();
				            if (s4 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s0 = peg$f3(s2, s3, s4);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsetags() {
				            var s0, s3, s4, s5, s6, s8;
				            s0 = peg$currPos;
				            peg$parseBOM();
				            peg$parsews();
				            s3 = peg$currPos;
				            s4 = peg$parsetag();
				            if (s4 !== peg$FAILED) {
				                s5 = [];
				                s6 = peg$currPos;
				                peg$parsews();
				                s8 = peg$parsetag();
				                if (s8 !== peg$FAILED) {
				                    peg$savedPos = s6;
				                    s6 = peg$f4(s4, s8);
				                }
				                else {
				                    peg$currPos = s6;
				                    s6 = peg$FAILED;
				                }
				                while (s6 !== peg$FAILED) {
				                    s5.push(s6);
				                    s6 = peg$currPos;
				                    peg$parsews();
				                    s8 = peg$parsetag();
				                    if (s8 !== peg$FAILED) {
				                        peg$savedPos = s6;
				                        s6 = peg$f4(s4, s8);
				                    }
				                    else {
				                        peg$currPos = s6;
				                        s6 = peg$FAILED;
				                    }
				                }
				                peg$savedPos = s3;
				                s3 = peg$f5(s4, s5);
				            }
				            else {
				                peg$currPos = s3;
				                s3 = peg$FAILED;
				            }
				            if (s3 === peg$FAILED) {
				                s3 = null;
				            }
				            s4 = peg$parsews();
				            peg$savedPos = s0;
				            s0 = peg$f6(s3);
				            return s0;
				        }
				        function peg$parsetag() {
				            var s0, s1, s3, s5;
				            s0 = peg$currPos;
				            s1 = peg$parsebl();
				            if (s1 !== peg$FAILED) {
				                peg$parsews();
				                s3 = peg$parsetagKeyValue();
				                if (s3 !== peg$FAILED) {
				                    peg$parsews();
				                    s5 = peg$parsebr();
				                    if (s5 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f7(s3);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsetagKeyValue() {
				            var s0, s1, s2, s3, s4;
				            s0 = peg$currPos;
				            s1 = peg$parseeventKey();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsews();
				                s3 = peg$parsestring();
				                if (s3 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f8(s3);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$parsesiteKey();
				                if (s1 !== peg$FAILED) {
				                    s2 = peg$parsews();
				                    s3 = peg$parsestring();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f9(s3);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    s1 = peg$parsedateKey();
				                    if (s1 !== peg$FAILED) {
				                        s2 = peg$parsews();
				                        s3 = peg$parsedateString();
				                        if (s3 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s0 = peg$f10(s3);
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        s1 = peg$parseroundKey();
				                        if (s1 !== peg$FAILED) {
				                            s2 = peg$parsews();
				                            s3 = peg$parsestring();
				                            if (s3 !== peg$FAILED) {
				                                peg$savedPos = s0;
				                                s0 = peg$f11(s3);
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            s1 = peg$parsewhiteTitleKey();
				                            if (s1 !== peg$FAILED) {
				                                s2 = peg$parsews();
				                                s3 = peg$parsestring();
				                                if (s3 !== peg$FAILED) {
				                                    peg$savedPos = s0;
				                                    s0 = peg$f12(s3);
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$currPos;
				                                s1 = peg$parseblackTitleKey();
				                                if (s1 !== peg$FAILED) {
				                                    s2 = peg$parsews();
				                                    s3 = peg$parsestring();
				                                    if (s3 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s0 = peg$f13(s3);
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                                if (s0 === peg$FAILED) {
				                                    s0 = peg$currPos;
				                                    s1 = peg$parsewhiteEloKey();
				                                    if (s1 !== peg$FAILED) {
				                                        s2 = peg$parsews();
				                                        s3 = peg$parseintegerOrDashString();
				                                        if (s3 !== peg$FAILED) {
				                                            peg$savedPos = s0;
				                                            s0 = peg$f14(s3);
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                    if (s0 === peg$FAILED) {
				                                        s0 = peg$currPos;
				                                        s1 = peg$parseblackEloKey();
				                                        if (s1 !== peg$FAILED) {
				                                            s2 = peg$parsews();
				                                            s3 = peg$parseintegerOrDashString();
				                                            if (s3 !== peg$FAILED) {
				                                                peg$savedPos = s0;
				                                                s0 = peg$f15(s3);
				                                            }
				                                            else {
				                                                peg$currPos = s0;
				                                                s0 = peg$FAILED;
				                                            }
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                        if (s0 === peg$FAILED) {
				                                            s0 = peg$currPos;
				                                            s1 = peg$parsewhiteUSCFKey();
				                                            if (s1 !== peg$FAILED) {
				                                                s2 = peg$parsews();
				                                                s3 = peg$parseintegerString();
				                                                if (s3 !== peg$FAILED) {
				                                                    peg$savedPos = s0;
				                                                    s0 = peg$f16(s3);
				                                                }
				                                                else {
				                                                    peg$currPos = s0;
				                                                    s0 = peg$FAILED;
				                                                }
				                                            }
				                                            else {
				                                                peg$currPos = s0;
				                                                s0 = peg$FAILED;
				                                            }
				                                            if (s0 === peg$FAILED) {
				                                                s0 = peg$currPos;
				                                                s1 = peg$parseblackUSCFKey();
				                                                if (s1 !== peg$FAILED) {
				                                                    s2 = peg$parsews();
				                                                    s3 = peg$parseintegerString();
				                                                    if (s3 !== peg$FAILED) {
				                                                        peg$savedPos = s0;
				                                                        s0 = peg$f17(s3);
				                                                    }
				                                                    else {
				                                                        peg$currPos = s0;
				                                                        s0 = peg$FAILED;
				                                                    }
				                                                }
				                                                else {
				                                                    peg$currPos = s0;
				                                                    s0 = peg$FAILED;
				                                                }
				                                                if (s0 === peg$FAILED) {
				                                                    s0 = peg$currPos;
				                                                    s1 = peg$parsewhiteNAKey();
				                                                    if (s1 !== peg$FAILED) {
				                                                        s2 = peg$parsews();
				                                                        s3 = peg$parsestring();
				                                                        if (s3 !== peg$FAILED) {
				                                                            peg$savedPos = s0;
				                                                            s0 = peg$f18(s3);
				                                                        }
				                                                        else {
				                                                            peg$currPos = s0;
				                                                            s0 = peg$FAILED;
				                                                        }
				                                                    }
				                                                    else {
				                                                        peg$currPos = s0;
				                                                        s0 = peg$FAILED;
				                                                    }
				                                                    if (s0 === peg$FAILED) {
				                                                        s0 = peg$currPos;
				                                                        s1 = peg$parseblackNAKey();
				                                                        if (s1 !== peg$FAILED) {
				                                                            s2 = peg$parsews();
				                                                            s3 = peg$parsestring();
				                                                            if (s3 !== peg$FAILED) {
				                                                                peg$savedPos = s0;
				                                                                s0 = peg$f19(s3);
				                                                            }
				                                                            else {
				                                                                peg$currPos = s0;
				                                                                s0 = peg$FAILED;
				                                                            }
				                                                        }
				                                                        else {
				                                                            peg$currPos = s0;
				                                                            s0 = peg$FAILED;
				                                                        }
				                                                        if (s0 === peg$FAILED) {
				                                                            s0 = peg$currPos;
				                                                            s1 = peg$parsewhiteTypeKey();
				                                                            if (s1 !== peg$FAILED) {
				                                                                s2 = peg$parsews();
				                                                                s3 = peg$parsestring();
				                                                                if (s3 !== peg$FAILED) {
				                                                                    peg$savedPos = s0;
				                                                                    s0 = peg$f20(s3);
				                                                                }
				                                                                else {
				                                                                    peg$currPos = s0;
				                                                                    s0 = peg$FAILED;
				                                                                }
				                                                            }
				                                                            else {
				                                                                peg$currPos = s0;
				                                                                s0 = peg$FAILED;
				                                                            }
				                                                            if (s0 === peg$FAILED) {
				                                                                s0 = peg$currPos;
				                                                                s1 = peg$parseblackTypeKey();
				                                                                if (s1 !== peg$FAILED) {
				                                                                    s2 = peg$parsews();
				                                                                    s3 = peg$parsestring();
				                                                                    if (s3 !== peg$FAILED) {
				                                                                        peg$savedPos = s0;
				                                                                        s0 = peg$f21(s3);
				                                                                    }
				                                                                    else {
				                                                                        peg$currPos = s0;
				                                                                        s0 = peg$FAILED;
				                                                                    }
				                                                                }
				                                                                else {
				                                                                    peg$currPos = s0;
				                                                                    s0 = peg$FAILED;
				                                                                }
				                                                                if (s0 === peg$FAILED) {
				                                                                    s0 = peg$currPos;
				                                                                    s1 = peg$parsewhiteKey();
				                                                                    if (s1 !== peg$FAILED) {
				                                                                        s2 = peg$parsews();
				                                                                        s3 = peg$parsestring();
				                                                                        if (s3 !== peg$FAILED) {
				                                                                            peg$savedPos = s0;
				                                                                            s0 = peg$f22(s3);
				                                                                        }
				                                                                        else {
				                                                                            peg$currPos = s0;
				                                                                            s0 = peg$FAILED;
				                                                                        }
				                                                                    }
				                                                                    else {
				                                                                        peg$currPos = s0;
				                                                                        s0 = peg$FAILED;
				                                                                    }
				                                                                    if (s0 === peg$FAILED) {
				                                                                        s0 = peg$currPos;
				                                                                        s1 = peg$parseblackKey();
				                                                                        if (s1 !== peg$FAILED) {
				                                                                            s2 = peg$parsews();
				                                                                            s3 = peg$parsestring();
				                                                                            if (s3 !== peg$FAILED) {
				                                                                                peg$savedPos = s0;
				                                                                                s0 = peg$f23(s3);
				                                                                            }
				                                                                            else {
				                                                                                peg$currPos = s0;
				                                                                                s0 = peg$FAILED;
				                                                                            }
				                                                                        }
				                                                                        else {
				                                                                            peg$currPos = s0;
				                                                                            s0 = peg$FAILED;
				                                                                        }
				                                                                        if (s0 === peg$FAILED) {
				                                                                            s0 = peg$currPos;
				                                                                            s1 = peg$parseresultKey();
				                                                                            if (s1 !== peg$FAILED) {
				                                                                                s2 = peg$parsews();
				                                                                                s3 = peg$parseresult();
				                                                                                if (s3 !== peg$FAILED) {
				                                                                                    peg$savedPos = s0;
				                                                                                    s0 = peg$f24(s3);
				                                                                                }
				                                                                                else {
				                                                                                    peg$currPos = s0;
				                                                                                    s0 = peg$FAILED;
				                                                                                }
				                                                                            }
				                                                                            else {
				                                                                                peg$currPos = s0;
				                                                                                s0 = peg$FAILED;
				                                                                            }
				                                                                            if (s0 === peg$FAILED) {
				                                                                                s0 = peg$currPos;
				                                                                                s1 = peg$parseeventDateKey();
				                                                                                if (s1 !== peg$FAILED) {
				                                                                                    s2 = peg$parsews();
				                                                                                    s3 = peg$parsedateString();
				                                                                                    if (s3 !== peg$FAILED) {
				                                                                                        peg$savedPos = s0;
				                                                                                        s0 = peg$f25(s3);
				                                                                                    }
				                                                                                    else {
				                                                                                        peg$currPos = s0;
				                                                                                        s0 = peg$FAILED;
				                                                                                    }
				                                                                                }
				                                                                                else {
				                                                                                    peg$currPos = s0;
				                                                                                    s0 = peg$FAILED;
				                                                                                }
				                                                                                if (s0 === peg$FAILED) {
				                                                                                    s0 = peg$currPos;
				                                                                                    s1 = peg$parseeventSponsorKey();
				                                                                                    if (s1 !== peg$FAILED) {
				                                                                                        s2 = peg$parsews();
				                                                                                        s3 = peg$parsestring();
				                                                                                        if (s3 !== peg$FAILED) {
				                                                                                            peg$savedPos = s0;
				                                                                                            s0 = peg$f26(s3);
				                                                                                        }
				                                                                                        else {
				                                                                                            peg$currPos = s0;
				                                                                                            s0 = peg$FAILED;
				                                                                                        }
				                                                                                    }
				                                                                                    else {
				                                                                                        peg$currPos = s0;
				                                                                                        s0 = peg$FAILED;
				                                                                                    }
				                                                                                    if (s0 === peg$FAILED) {
				                                                                                        s0 = peg$currPos;
				                                                                                        s1 = peg$parsesectionKey();
				                                                                                        if (s1 !== peg$FAILED) {
				                                                                                            s2 = peg$parsews();
				                                                                                            s3 = peg$parsestring();
				                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                peg$savedPos = s0;
				                                                                                                s0 = peg$f27(s3);
				                                                                                            }
				                                                                                            else {
				                                                                                                peg$currPos = s0;
				                                                                                                s0 = peg$FAILED;
				                                                                                            }
				                                                                                        }
				                                                                                        else {
				                                                                                            peg$currPos = s0;
				                                                                                            s0 = peg$FAILED;
				                                                                                        }
				                                                                                        if (s0 === peg$FAILED) {
				                                                                                            s0 = peg$currPos;
				                                                                                            s1 = peg$parsestageKey();
				                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                s2 = peg$parsews();
				                                                                                                s3 = peg$parsestring();
				                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                    peg$savedPos = s0;
				                                                                                                    s0 = peg$f28(s3);
				                                                                                                }
				                                                                                                else {
				                                                                                                    peg$currPos = s0;
				                                                                                                    s0 = peg$FAILED;
				                                                                                                }
				                                                                                            }
				                                                                                            else {
				                                                                                                peg$currPos = s0;
				                                                                                                s0 = peg$FAILED;
				                                                                                            }
				                                                                                            if (s0 === peg$FAILED) {
				                                                                                                s0 = peg$currPos;
				                                                                                                s1 = peg$parseboardKey();
				                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                    s2 = peg$parsews();
				                                                                                                    s3 = peg$parseintegerString();
				                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                        peg$savedPos = s0;
				                                                                                                        s0 = peg$f29(s3);
				                                                                                                    }
				                                                                                                    else {
				                                                                                                        peg$currPos = s0;
				                                                                                                        s0 = peg$FAILED;
				                                                                                                    }
				                                                                                                }
				                                                                                                else {
				                                                                                                    peg$currPos = s0;
				                                                                                                    s0 = peg$FAILED;
				                                                                                                }
				                                                                                                if (s0 === peg$FAILED) {
				                                                                                                    s0 = peg$currPos;
				                                                                                                    s1 = peg$parseopeningKey();
				                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                        s2 = peg$parsews();
				                                                                                                        s3 = peg$parsestring();
				                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                            peg$savedPos = s0;
				                                                                                                            s0 = peg$f30(s3);
				                                                                                                        }
				                                                                                                        else {
				                                                                                                            peg$currPos = s0;
				                                                                                                            s0 = peg$FAILED;
				                                                                                                        }
				                                                                                                    }
				                                                                                                    else {
				                                                                                                        peg$currPos = s0;
				                                                                                                        s0 = peg$FAILED;
				                                                                                                    }
				                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                        s0 = peg$currPos;
				                                                                                                        s1 = peg$parsevariationKey();
				                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                            s2 = peg$parsews();
				                                                                                                            s3 = peg$parsestring();
				                                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                                peg$savedPos = s0;
				                                                                                                                s0 = peg$f31(s3);
				                                                                                                            }
				                                                                                                            else {
				                                                                                                                peg$currPos = s0;
				                                                                                                                s0 = peg$FAILED;
				                                                                                                            }
				                                                                                                        }
				                                                                                                        else {
				                                                                                                            peg$currPos = s0;
				                                                                                                            s0 = peg$FAILED;
				                                                                                                        }
				                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                            s0 = peg$currPos;
				                                                                                                            s1 = peg$parsesubVariationKey();
				                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                s2 = peg$parsews();
				                                                                                                                s3 = peg$parsestring();
				                                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                                    peg$savedPos = s0;
				                                                                                                                    s0 = peg$f32(s3);
				                                                                                                                }
				                                                                                                                else {
				                                                                                                                    peg$currPos = s0;
				                                                                                                                    s0 = peg$FAILED;
				                                                                                                                }
				                                                                                                            }
				                                                                                                            else {
				                                                                                                                peg$currPos = s0;
				                                                                                                                s0 = peg$FAILED;
				                                                                                                            }
				                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                s0 = peg$currPos;
				                                                                                                                s1 = peg$parseecoKey();
				                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                    s2 = peg$parsews();
				                                                                                                                    s3 = peg$parsestring();
				                                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                                        peg$savedPos = s0;
				                                                                                                                        s0 = peg$f33(s3);
				                                                                                                                    }
				                                                                                                                    else {
				                                                                                                                        peg$currPos = s0;
				                                                                                                                        s0 = peg$FAILED;
				                                                                                                                    }
				                                                                                                                }
				                                                                                                                else {
				                                                                                                                    peg$currPos = s0;
				                                                                                                                    s0 = peg$FAILED;
				                                                                                                                }
				                                                                                                                if (s0 === peg$FAILED) {
				                                                                                                                    s0 = peg$currPos;
				                                                                                                                    s1 = peg$parsenicKey();
				                                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                                        s2 = peg$parsews();
				                                                                                                                        s3 = peg$parsestring();
				                                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                                            peg$savedPos = s0;
				                                                                                                                            s0 = peg$f34(s3);
				                                                                                                                        }
				                                                                                                                        else {
				                                                                                                                            peg$currPos = s0;
				                                                                                                                            s0 = peg$FAILED;
				                                                                                                                        }
				                                                                                                                    }
				                                                                                                                    else {
				                                                                                                                        peg$currPos = s0;
				                                                                                                                        s0 = peg$FAILED;
				                                                                                                                    }
				                                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                                        s0 = peg$currPos;
				                                                                                                                        s1 = peg$parsetimeKey();
				                                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                                            s2 = peg$parsews();
				                                                                                                                            s3 = peg$parsetimeString();
				                                                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                                                peg$savedPos = s0;
				                                                                                                                                s0 = peg$f35(s3);
				                                                                                                                            }
				                                                                                                                            else {
				                                                                                                                                peg$currPos = s0;
				                                                                                                                                s0 = peg$FAILED;
				                                                                                                                            }
				                                                                                                                        }
				                                                                                                                        else {
				                                                                                                                            peg$currPos = s0;
				                                                                                                                            s0 = peg$FAILED;
				                                                                                                                        }
				                                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                                            s0 = peg$currPos;
				                                                                                                                            s1 = peg$parseutcTimeKey();
				                                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                                s2 = peg$parsews();
				                                                                                                                                s3 = peg$parsetimeString();
				                                                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                                                    peg$savedPos = s0;
				                                                                                                                                    s0 = peg$f36(s3);
				                                                                                                                                }
				                                                                                                                                else {
				                                                                                                                                    peg$currPos = s0;
				                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                }
				                                                                                                                            }
				                                                                                                                            else {
				                                                                                                                                peg$currPos = s0;
				                                                                                                                                s0 = peg$FAILED;
				                                                                                                                            }
				                                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                                s0 = peg$currPos;
				                                                                                                                                s1 = peg$parseutcDateKey();
				                                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                                    s2 = peg$parsews();
				                                                                                                                                    s3 = peg$parsedateString();
				                                                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                                                        peg$savedPos = s0;
				                                                                                                                                        s0 = peg$f37(s3);
				                                                                                                                                    }
				                                                                                                                                    else {
				                                                                                                                                        peg$currPos = s0;
				                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                    }
				                                                                                                                                }
				                                                                                                                                else {
				                                                                                                                                    peg$currPos = s0;
				                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                }
				                                                                                                                                if (s0 === peg$FAILED) {
				                                                                                                                                    s0 = peg$currPos;
				                                                                                                                                    s1 = peg$parsetimeControlKey();
				                                                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                                                        s2 = peg$parsews();
				                                                                                                                                        s3 = peg$parsetimeControl();
				                                                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                                                            peg$savedPos = s0;
				                                                                                                                                            s0 = peg$f38(s3);
				                                                                                                                                        }
				                                                                                                                                        else {
				                                                                                                                                            peg$currPos = s0;
				                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                        }
				                                                                                                                                    }
				                                                                                                                                    else {
				                                                                                                                                        peg$currPos = s0;
				                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                    }
				                                                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                                                        s0 = peg$currPos;
				                                                                                                                                        s1 = peg$parsesetUpKey();
				                                                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                                                            s2 = peg$parsews();
				                                                                                                                                            s3 = peg$parsestring();
				                                                                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                                                                peg$savedPos = s0;
				                                                                                                                                                s0 = peg$f39(s3);
				                                                                                                                                            }
				                                                                                                                                            else {
				                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                            }
				                                                                                                                                        }
				                                                                                                                                        else {
				                                                                                                                                            peg$currPos = s0;
				                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                        }
				                                                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                                                            s0 = peg$currPos;
				                                                                                                                                            s1 = peg$parsefenKey();
				                                                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                                                s2 = peg$parsews();
				                                                                                                                                                s3 = peg$parsestring();
				                                                                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                                                                    peg$savedPos = s0;
				                                                                                                                                                    s0 = peg$f40(s3);
				                                                                                                                                                }
				                                                                                                                                                else {
				                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                }
				                                                                                                                                            }
				                                                                                                                                            else {
				                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                            }
				                                                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                                                s0 = peg$currPos;
				                                                                                                                                                s1 = peg$parseterminationKey();
				                                                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                                                    s2 = peg$parsews();
				                                                                                                                                                    s3 = peg$parsestring();
				                                                                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                                                                        peg$savedPos = s0;
				                                                                                                                                                        s0 = peg$f41(s3);
				                                                                                                                                                    }
				                                                                                                                                                    else {
				                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                    }
				                                                                                                                                                }
				                                                                                                                                                else {
				                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                }
				                                                                                                                                                if (s0 === peg$FAILED) {
				                                                                                                                                                    s0 = peg$currPos;
				                                                                                                                                                    s1 = peg$parseannotatorKey();
				                                                                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                                                                        s2 = peg$parsews();
				                                                                                                                                                        s3 = peg$parsestring();
				                                                                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                                                                            peg$savedPos = s0;
				                                                                                                                                                            s0 = peg$f42(s3);
				                                                                                                                                                        }
				                                                                                                                                                        else {
				                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                        }
				                                                                                                                                                    }
				                                                                                                                                                    else {
				                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                    }
				                                                                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                                                                        s0 = peg$currPos;
				                                                                                                                                                        s1 = peg$parsemodeKey();
				                                                                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                                                                            s2 = peg$parsews();
				                                                                                                                                                            s3 = peg$parsestring();
				                                                                                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                                                                                peg$savedPos = s0;
				                                                                                                                                                                s0 = peg$f43(s3);
				                                                                                                                                                            }
				                                                                                                                                                            else {
				                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                            }
				                                                                                                                                                        }
				                                                                                                                                                        else {
				                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                        }
				                                                                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                                                                            s0 = peg$currPos;
				                                                                                                                                                            s1 = peg$parseplyCountKey();
				                                                                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                                                                s2 = peg$parsews();
				                                                                                                                                                                s3 = peg$parseintegerString();
				                                                                                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                                                                                    peg$savedPos = s0;
				                                                                                                                                                                    s0 = peg$f44(s3);
				                                                                                                                                                                }
				                                                                                                                                                                else {
				                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                }
				                                                                                                                                                            }
				                                                                                                                                                            else {
				                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                            }
				                                                                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                                                                s0 = peg$currPos;
				                                                                                                                                                                s1 = peg$parsevariantKey();
				                                                                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                                                                    s2 = peg$parsews();
				                                                                                                                                                                    s3 = peg$parsestring();
				                                                                                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                                                                                        peg$savedPos = s0;
				                                                                                                                                                                        s0 = peg$f45(s3);
				                                                                                                                                                                    }
				                                                                                                                                                                    else {
				                                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                                    }
				                                                                                                                                                                }
				                                                                                                                                                                else {
				                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                }
				                                                                                                                                                                if (s0 === peg$FAILED) {
				                                                                                                                                                                    s0 = peg$currPos;
				                                                                                                                                                                    s1 = peg$parsewhiteRatingDiffKey();
				                                                                                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                                                                                        s2 = peg$parsews();
				                                                                                                                                                                        s3 = peg$parsestring();
				                                                                                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                                                                                            peg$savedPos = s0;
				                                                                                                                                                                            s0 = peg$f46(s3);
				                                                                                                                                                                        }
				                                                                                                                                                                        else {
				                                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                                        }
				                                                                                                                                                                    }
				                                                                                                                                                                    else {
				                                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                                    }
				                                                                                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                                                                                        s0 = peg$currPos;
				                                                                                                                                                                        s1 = peg$parseblackRatingDiffKey();
				                                                                                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                                                                                            s2 = peg$parsews();
				                                                                                                                                                                            s3 = peg$parsestring();
				                                                                                                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                                                                                                peg$savedPos = s0;
				                                                                                                                                                                                s0 = peg$f47(s3);
				                                                                                                                                                                            }
				                                                                                                                                                                            else {
				                                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                                            }
				                                                                                                                                                                        }
				                                                                                                                                                                        else {
				                                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                                        }
				                                                                                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                                                                                            s0 = peg$currPos;
				                                                                                                                                                                            s1 = peg$parsewhiteFideIdKey();
				                                                                                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                                                                                s2 = peg$parsews();
				                                                                                                                                                                                s3 = peg$parsestring();
				                                                                                                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                                                                                                    peg$savedPos = s0;
				                                                                                                                                                                                    s0 = peg$f48(s3);
				                                                                                                                                                                                }
				                                                                                                                                                                                else {
				                                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                                }
				                                                                                                                                                                            }
				                                                                                                                                                                            else {
				                                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                                            }
				                                                                                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                                                                                s0 = peg$currPos;
				                                                                                                                                                                                s1 = peg$parseblackFideIdKey();
				                                                                                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                                                                                    s2 = peg$parsews();
				                                                                                                                                                                                    s3 = peg$parsestring();
				                                                                                                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                                                                                                        peg$savedPos = s0;
				                                                                                                                                                                                        s0 = peg$f49(s3);
				                                                                                                                                                                                    }
				                                                                                                                                                                                    else {
				                                                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                                                    }
				                                                                                                                                                                                }
				                                                                                                                                                                                else {
				                                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                                }
				                                                                                                                                                                                if (s0 === peg$FAILED) {
				                                                                                                                                                                                    s0 = peg$currPos;
				                                                                                                                                                                                    s1 = peg$parsewhiteTeamKey();
				                                                                                                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                                                                                                        s2 = peg$parsews();
				                                                                                                                                                                                        s3 = peg$parsestring();
				                                                                                                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                                                                                                            peg$savedPos = s0;
				                                                                                                                                                                                            s0 = peg$f50(s3);
				                                                                                                                                                                                        }
				                                                                                                                                                                                        else {
				                                                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                                                        }
				                                                                                                                                                                                    }
				                                                                                                                                                                                    else {
				                                                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                                                    }
				                                                                                                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                                                                                                        s0 = peg$currPos;
				                                                                                                                                                                                        s1 = peg$parseblackTeamKey();
				                                                                                                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                                                                                                            s2 = peg$parsews();
				                                                                                                                                                                                            s3 = peg$parsestring();
				                                                                                                                                                                                            if (s3 !== peg$FAILED) {
				                                                                                                                                                                                                peg$savedPos = s0;
				                                                                                                                                                                                                s0 = peg$f51(s3);
				                                                                                                                                                                                            }
				                                                                                                                                                                                            else {
				                                                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                                                            }
				                                                                                                                                                                                        }
				                                                                                                                                                                                        else {
				                                                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                                                        }
				                                                                                                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                                                                                                            s0 = peg$currPos;
				                                                                                                                                                                                            s1 = peg$parseclockKey();
				                                                                                                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                                                                                                s2 = peg$parsews();
				                                                                                                                                                                                                s3 = peg$parsecolorClockTimeQ();
				                                                                                                                                                                                                if (s3 !== peg$FAILED) {
				                                                                                                                                                                                                    peg$savedPos = s0;
				                                                                                                                                                                                                    s0 = peg$f52(s3);
				                                                                                                                                                                                                }
				                                                                                                                                                                                                else {
				                                                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                                                }
				                                                                                                                                                                                            }
				                                                                                                                                                                                            else {
				                                                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                                                            }
				                                                                                                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                                                                                                s0 = peg$currPos;
				                                                                                                                                                                                                s1 = peg$parsewhiteClockKey();
				                                                                                                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                                                                                                    s2 = peg$parsews();
				                                                                                                                                                                                                    s3 = peg$parseclockTimeQ();
				                                                                                                                                                                                                    if (s3 !== peg$FAILED) {
				                                                                                                                                                                                                        peg$savedPos = s0;
				                                                                                                                                                                                                        s0 = peg$f53(s3);
				                                                                                                                                                                                                    }
				                                                                                                                                                                                                    else {
				                                                                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                                                                    }
				                                                                                                                                                                                                }
				                                                                                                                                                                                                else {
				                                                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                                                }
				                                                                                                                                                                                                if (s0 === peg$FAILED) {
				                                                                                                                                                                                                    s0 = peg$currPos;
				                                                                                                                                                                                                    s1 = peg$parseblackClockKey();
				                                                                                                                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                                                                                                                        s2 = peg$parsews();
				                                                                                                                                                                                                        s3 = peg$parseclockTimeQ();
				                                                                                                                                                                                                        if (s3 !== peg$FAILED) {
				                                                                                                                                                                                                            peg$savedPos = s0;
				                                                                                                                                                                                                            s0 = peg$f54(s3);
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                        else {
				                                                                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                    }
				                                                                                                                                                                                                    else {
				                                                                                                                                                                                                        peg$currPos = s0;
				                                                                                                                                                                                                        s0 = peg$FAILED;
				                                                                                                                                                                                                    }
				                                                                                                                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                                                                                                                        s0 = peg$currPos;
				                                                                                                                                                                                                        s1 = peg$currPos;
				                                                                                                                                                                                                        peg$silentFails++;
				                                                                                                                                                                                                        s2 = peg$parsevalidatedKey();
				                                                                                                                                                                                                        peg$silentFails--;
				                                                                                                                                                                                                        if (s2 !== peg$FAILED) {
				                                                                                                                                                                                                            peg$currPos = s1;
				                                                                                                                                                                                                            s1 = undefined;
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                        else {
				                                                                                                                                                                                                            s1 = peg$FAILED;
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                                                                                                                            s2 = peg$parsestringNoQuot();
				                                                                                                                                                                                                            s3 = peg$parsews();
				                                                                                                                                                                                                            s4 = peg$parsestring();
				                                                                                                                                                                                                            if (s4 !== peg$FAILED) {
				                                                                                                                                                                                                                peg$savedPos = s0;
				                                                                                                                                                                                                                s0 = peg$f55(s2, s4);
				                                                                                                                                                                                                            }
				                                                                                                                                                                                                            else {
				                                                                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                                                                            }
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                        else {
				                                                                                                                                                                                                            peg$currPos = s0;
				                                                                                                                                                                                                            s0 = peg$FAILED;
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                                                                                                                            s0 = peg$currPos;
				                                                                                                                                                                                                            s1 = peg$currPos;
				                                                                                                                                                                                                            peg$silentFails++;
				                                                                                                                                                                                                            s2 = peg$parsevalidatedKey();
				                                                                                                                                                                                                            peg$silentFails--;
				                                                                                                                                                                                                            if (s2 === peg$FAILED) {
				                                                                                                                                                                                                                s1 = undefined;
				                                                                                                                                                                                                            }
				                                                                                                                                                                                                            else {
				                                                                                                                                                                                                                peg$currPos = s1;
				                                                                                                                                                                                                                s1 = peg$FAILED;
				                                                                                                                                                                                                            }
				                                                                                                                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                                                                                                                s2 = peg$parsestringNoQuot();
				                                                                                                                                                                                                                s3 = peg$parsews();
				                                                                                                                                                                                                                s4 = peg$parsestring();
				                                                                                                                                                                                                                if (s4 !== peg$FAILED) {
				                                                                                                                                                                                                                    peg$savedPos = s0;
				                                                                                                                                                                                                                    s0 = peg$f56(s2, s4);
				                                                                                                                                                                                                                }
				                                                                                                                                                                                                                else {
				                                                                                                                                                                                                                    peg$currPos = s0;
				                                                                                                                                                                                                                    s0 = peg$FAILED;
				                                                                                                                                                                                                                }
				                                                                                                                                                                                                            }
				                                                                                                                                                                                                            else {
				                                                                                                                                                                                                                peg$currPos = s0;
				                                                                                                                                                                                                                s0 = peg$FAILED;
				                                                                                                                                                                                                            }
				                                                                                                                                                                                                        }
				                                                                                                                                                                                                    }
				                                                                                                                                                                                                }
				                                                                                                                                                                                            }
				                                                                                                                                                                                        }
				                                                                                                                                                                                    }
				                                                                                                                                                                                }
				                                                                                                                                                                            }
				                                                                                                                                                                        }
				                                                                                                                                                                    }
				                                                                                                                                                                }
				                                                                                                                                                            }
				                                                                                                                                                        }
				                                                                                                                                                    }
				                                                                                                                                                }
				                                                                                                                                            }
				                                                                                                                                        }
				                                                                                                                                    }
				                                                                                                                                }
				                                                                                                                            }
				                                                                                                                        }
				                                                                                                                    }
				                                                                                                                }
				                                                                                                            }
				                                                                                                        }
				                                                                                                    }
				                                                                                                }
				                                                                                            }
				                                                                                        }
				                                                                                    }
				                                                                                }
				                                                                            }
				                                                                        }
				                                                                    }
				                                                                }
				                                                            }
				                                                        }
				                                                    }
				                                                }
				                                            }
				                                        }
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsevalidatedKey() {
				            var s0;
				            s0 = peg$parsedateKey();
				            if (s0 === peg$FAILED) {
				                s0 = peg$parsewhiteEloKey();
				                if (s0 === peg$FAILED) {
				                    s0 = peg$parseblackEloKey();
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$parsewhiteUSCFKey();
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$parseblackUSCFKey();
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$parseresultKey();
				                                if (s0 === peg$FAILED) {
				                                    s0 = peg$parseeventDateKey();
				                                    if (s0 === peg$FAILED) {
				                                        s0 = peg$parseboardKey();
				                                        if (s0 === peg$FAILED) {
				                                            s0 = peg$parsetimeKey();
				                                            if (s0 === peg$FAILED) {
				                                                s0 = peg$parseutcTimeKey();
				                                                if (s0 === peg$FAILED) {
				                                                    s0 = peg$parseutcDateKey();
				                                                    if (s0 === peg$FAILED) {
				                                                        s0 = peg$parsetimeControlKey();
				                                                        if (s0 === peg$FAILED) {
				                                                            s0 = peg$parseplyCountKey();
				                                                            if (s0 === peg$FAILED) {
				                                                                s0 = peg$parseclockKey();
				                                                                if (s0 === peg$FAILED) {
				                                                                    s0 = peg$parsewhiteClockKey();
				                                                                    if (s0 === peg$FAILED) {
				                                                                        s0 = peg$parseblackClockKey();
				                                                                    }
				                                                                }
				                                                            }
				                                                        }
				                                                    }
				                                                }
				                                            }
				                                        }
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseeventKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c1) {
				                s0 = peg$c1;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e1);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c2) {
				                    s0 = peg$c2;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e2);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsesiteKey() {
				            var s0;
				            if (input.substr(peg$currPos, 4) === peg$c3) {
				                s0 = peg$c3;
				                peg$currPos += 4;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e3);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 4) === peg$c4) {
				                    s0 = peg$c4;
				                    peg$currPos += 4;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e4);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsedateKey() {
				            var s0;
				            if (input.substr(peg$currPos, 4) === peg$c5) {
				                s0 = peg$c5;
				                peg$currPos += 4;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e5);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 4) === peg$c6) {
				                    s0 = peg$c6;
				                    peg$currPos += 4;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e6);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseroundKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c7) {
				                s0 = peg$c7;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e7);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c8) {
				                    s0 = peg$c8;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e8);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c9) {
				                s0 = peg$c9;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e9);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c10) {
				                    s0 = peg$c10;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e10);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c11) {
				                s0 = peg$c11;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e11);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c12) {
				                    s0 = peg$c12;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e12);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseresultKey() {
				            var s0;
				            if (input.substr(peg$currPos, 6) === peg$c13) {
				                s0 = peg$c13;
				                peg$currPos += 6;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e13);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 6) === peg$c14) {
				                    s0 = peg$c14;
				                    peg$currPos += 6;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e14);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteTitleKey() {
				            var s0;
				            if (input.substr(peg$currPos, 10) === peg$c15) {
				                s0 = peg$c15;
				                peg$currPos += 10;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e15);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 10) === peg$c16) {
				                    s0 = peg$c16;
				                    peg$currPos += 10;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e16);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 10) === peg$c17) {
				                        s0 = peg$c17;
				                        peg$currPos += 10;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e17);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 10) === peg$c18) {
				                            s0 = peg$c18;
				                            peg$currPos += 10;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e18);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackTitleKey() {
				            var s0;
				            if (input.substr(peg$currPos, 10) === peg$c19) {
				                s0 = peg$c19;
				                peg$currPos += 10;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e19);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 10) === peg$c20) {
				                    s0 = peg$c20;
				                    peg$currPos += 10;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e20);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 10) === peg$c21) {
				                        s0 = peg$c21;
				                        peg$currPos += 10;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e21);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 10) === peg$c22) {
				                            s0 = peg$c22;
				                            peg$currPos += 10;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e22);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteEloKey() {
				            var s0;
				            if (input.substr(peg$currPos, 8) === peg$c23) {
				                s0 = peg$c23;
				                peg$currPos += 8;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e23);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 8) === peg$c24) {
				                    s0 = peg$c24;
				                    peg$currPos += 8;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e24);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 8) === peg$c25) {
				                        s0 = peg$c25;
				                        peg$currPos += 8;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e25);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 8) === peg$c26) {
				                            s0 = peg$c26;
				                            peg$currPos += 8;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e26);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 8) === peg$c27) {
				                                s0 = peg$c27;
				                                peg$currPos += 8;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e27);
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackEloKey() {
				            var s0;
				            if (input.substr(peg$currPos, 8) === peg$c28) {
				                s0 = peg$c28;
				                peg$currPos += 8;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e28);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 8) === peg$c29) {
				                    s0 = peg$c29;
				                    peg$currPos += 8;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e29);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 8) === peg$c30) {
				                        s0 = peg$c30;
				                        peg$currPos += 8;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e30);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 8) === peg$c31) {
				                            s0 = peg$c31;
				                            peg$currPos += 8;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e31);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 8) === peg$c32) {
				                                s0 = peg$c32;
				                                peg$currPos += 8;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e32);
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteUSCFKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c33) {
				                s0 = peg$c33;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e33);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c34) {
				                    s0 = peg$c34;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e34);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 9) === peg$c35) {
				                        s0 = peg$c35;
				                        peg$currPos += 9;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e35);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 9) === peg$c36) {
				                            s0 = peg$c36;
				                            peg$currPos += 9;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e36);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 9) === peg$c37) {
				                                s0 = peg$c37;
				                                peg$currPos += 9;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e37);
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackUSCFKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c38) {
				                s0 = peg$c38;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e38);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c39) {
				                    s0 = peg$c39;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e39);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 9) === peg$c40) {
				                        s0 = peg$c40;
				                        peg$currPos += 9;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e40);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 9) === peg$c41) {
				                            s0 = peg$c41;
				                            peg$currPos += 9;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e41);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 9) === peg$c42) {
				                                s0 = peg$c42;
				                                peg$currPos += 9;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e42);
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteNAKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c43) {
				                s0 = peg$c43;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e43);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c44) {
				                    s0 = peg$c44;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e44);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 7) === peg$c45) {
				                        s0 = peg$c45;
				                        peg$currPos += 7;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e45);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 7) === peg$c46) {
				                            s0 = peg$c46;
				                            peg$currPos += 7;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e46);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 7) === peg$c47) {
				                                s0 = peg$c47;
				                                peg$currPos += 7;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e47);
				                                }
				                            }
				                            if (s0 === peg$FAILED) {
				                                if (input.substr(peg$currPos, 7) === peg$c48) {
				                                    s0 = peg$c48;
				                                    peg$currPos += 7;
				                                }
				                                else {
				                                    s0 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e48);
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackNAKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c49) {
				                s0 = peg$c49;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e49);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c50) {
				                    s0 = peg$c50;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e50);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 7) === peg$c51) {
				                        s0 = peg$c51;
				                        peg$currPos += 7;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e51);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 7) === peg$c52) {
				                            s0 = peg$c52;
				                            peg$currPos += 7;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e52);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 7) === peg$c53) {
				                                s0 = peg$c53;
				                                peg$currPos += 7;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e53);
				                                }
				                            }
				                            if (s0 === peg$FAILED) {
				                                if (input.substr(peg$currPos, 7) === peg$c54) {
				                                    s0 = peg$c54;
				                                    peg$currPos += 7;
				                                }
				                                else {
				                                    s0 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e54);
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteTypeKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c55) {
				                s0 = peg$c55;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e55);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c56) {
				                    s0 = peg$c56;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e56);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 9) === peg$c57) {
				                        s0 = peg$c57;
				                        peg$currPos += 9;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e57);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 9) === peg$c58) {
				                            s0 = peg$c58;
				                            peg$currPos += 9;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e58);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackTypeKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c59) {
				                s0 = peg$c59;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e59);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c60) {
				                    s0 = peg$c60;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e60);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 9) === peg$c61) {
				                        s0 = peg$c61;
				                        peg$currPos += 9;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e61);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 9) === peg$c62) {
				                            s0 = peg$c62;
				                            peg$currPos += 9;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e62);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseeventDateKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c63) {
				                s0 = peg$c63;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e63);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c64) {
				                    s0 = peg$c64;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e64);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 9) === peg$c65) {
				                        s0 = peg$c65;
				                        peg$currPos += 9;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e65);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 9) === peg$c66) {
				                            s0 = peg$c66;
				                            peg$currPos += 9;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e66);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseeventSponsorKey() {
				            var s0;
				            if (input.substr(peg$currPos, 12) === peg$c67) {
				                s0 = peg$c67;
				                peg$currPos += 12;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e67);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 12) === peg$c68) {
				                    s0 = peg$c68;
				                    peg$currPos += 12;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e68);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 12) === peg$c69) {
				                        s0 = peg$c69;
				                        peg$currPos += 12;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e69);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 12) === peg$c70) {
				                            s0 = peg$c70;
				                            peg$currPos += 12;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e70);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsesectionKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c71) {
				                s0 = peg$c71;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e71);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c72) {
				                    s0 = peg$c72;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e72);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsestageKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c73) {
				                s0 = peg$c73;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e73);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c74) {
				                    s0 = peg$c74;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e74);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseboardKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c75) {
				                s0 = peg$c75;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e75);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c76) {
				                    s0 = peg$c76;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e76);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseopeningKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c77) {
				                s0 = peg$c77;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e77);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c78) {
				                    s0 = peg$c78;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e78);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsevariationKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c79) {
				                s0 = peg$c79;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e79);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c80) {
				                    s0 = peg$c80;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e80);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsesubVariationKey() {
				            var s0;
				            if (input.substr(peg$currPos, 12) === peg$c81) {
				                s0 = peg$c81;
				                peg$currPos += 12;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e81);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 12) === peg$c82) {
				                    s0 = peg$c82;
				                    peg$currPos += 12;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e82);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 12) === peg$c83) {
				                        s0 = peg$c83;
				                        peg$currPos += 12;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e83);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 12) === peg$c84) {
				                            s0 = peg$c84;
				                            peg$currPos += 12;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e84);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseecoKey() {
				            var s0;
				            if (input.substr(peg$currPos, 3) === peg$c85) {
				                s0 = peg$c85;
				                peg$currPos += 3;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e85);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 3) === peg$c86) {
				                    s0 = peg$c86;
				                    peg$currPos += 3;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e86);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 3) === peg$c87) {
				                        s0 = peg$c87;
				                        peg$currPos += 3;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e87);
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsenicKey() {
				            var s0;
				            if (input.substr(peg$currPos, 3) === peg$c88) {
				                s0 = peg$c88;
				                peg$currPos += 3;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e88);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 3) === peg$c89) {
				                    s0 = peg$c89;
				                    peg$currPos += 3;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e89);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 3) === peg$c90) {
				                        s0 = peg$c90;
				                        peg$currPos += 3;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e90);
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsetimeKey() {
				            var s0;
				            if (input.substr(peg$currPos, 4) === peg$c91) {
				                s0 = peg$c91;
				                peg$currPos += 4;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e91);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 4) === peg$c92) {
				                    s0 = peg$c92;
				                    peg$currPos += 4;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e92);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseutcTimeKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c93) {
				                s0 = peg$c93;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e93);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c94) {
				                    s0 = peg$c94;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e94);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 7) === peg$c95) {
				                        s0 = peg$c95;
				                        peg$currPos += 7;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e95);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 7) === peg$c96) {
				                            s0 = peg$c96;
				                            peg$currPos += 7;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e96);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 7) === peg$c97) {
				                                s0 = peg$c97;
				                                peg$currPos += 7;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e97);
				                                }
				                            }
				                            if (s0 === peg$FAILED) {
				                                if (input.substr(peg$currPos, 7) === peg$c98) {
				                                    s0 = peg$c98;
				                                    peg$currPos += 7;
				                                }
				                                else {
				                                    s0 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e98);
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseutcDateKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c99) {
				                s0 = peg$c99;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e99);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c100) {
				                    s0 = peg$c100;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e100);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 7) === peg$c101) {
				                        s0 = peg$c101;
				                        peg$currPos += 7;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e101);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 7) === peg$c102) {
				                            s0 = peg$c102;
				                            peg$currPos += 7;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e102);
				                            }
				                        }
				                        if (s0 === peg$FAILED) {
				                            if (input.substr(peg$currPos, 7) === peg$c103) {
				                                s0 = peg$c103;
				                                peg$currPos += 7;
				                            }
				                            else {
				                                s0 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e103);
				                                }
				                            }
				                            if (s0 === peg$FAILED) {
				                                if (input.substr(peg$currPos, 7) === peg$c104) {
				                                    s0 = peg$c104;
				                                    peg$currPos += 7;
				                                }
				                                else {
				                                    s0 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e104);
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsetimeControlKey() {
				            var s0;
				            if (input.substr(peg$currPos, 11) === peg$c105) {
				                s0 = peg$c105;
				                peg$currPos += 11;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e105);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 11) === peg$c106) {
				                    s0 = peg$c106;
				                    peg$currPos += 11;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e106);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 11) === peg$c107) {
				                        s0 = peg$c107;
				                        peg$currPos += 11;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e107);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 11) === peg$c108) {
				                            s0 = peg$c108;
				                            peg$currPos += 11;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e108);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsesetUpKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c109) {
				                s0 = peg$c109;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e109);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 5) === peg$c110) {
				                    s0 = peg$c110;
				                    peg$currPos += 5;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e110);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 5) === peg$c111) {
				                        s0 = peg$c111;
				                        peg$currPos += 5;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e111);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 5) === peg$c112) {
				                            s0 = peg$c112;
				                            peg$currPos += 5;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e112);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsefenKey() {
				            var s0;
				            if (input.substr(peg$currPos, 3) === peg$c113) {
				                s0 = peg$c113;
				                peg$currPos += 3;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e113);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 3) === peg$c114) {
				                    s0 = peg$c114;
				                    peg$currPos += 3;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e114);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 3) === peg$c115) {
				                        s0 = peg$c115;
				                        peg$currPos += 3;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e115);
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseterminationKey() {
				            var s0;
				            if (input.substr(peg$currPos, 11) === peg$c116) {
				                s0 = peg$c116;
				                peg$currPos += 11;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e116);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 11) === peg$c117) {
				                    s0 = peg$c117;
				                    peg$currPos += 11;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e117);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseannotatorKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c118) {
				                s0 = peg$c118;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e118);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 9) === peg$c119) {
				                    s0 = peg$c119;
				                    peg$currPos += 9;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e119);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsemodeKey() {
				            var s0;
				            if (input.substr(peg$currPos, 4) === peg$c120) {
				                s0 = peg$c120;
				                peg$currPos += 4;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e120);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 4) === peg$c121) {
				                    s0 = peg$c121;
				                    peg$currPos += 4;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e121);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseplyCountKey() {
				            var s0;
				            if (input.substr(peg$currPos, 8) === peg$c122) {
				                s0 = peg$c122;
				                peg$currPos += 8;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e122);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 8) === peg$c123) {
				                    s0 = peg$c123;
				                    peg$currPos += 8;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e123);
				                    }
				                }
				                if (s0 === peg$FAILED) {
				                    if (input.substr(peg$currPos, 8) === peg$c124) {
				                        s0 = peg$c124;
				                        peg$currPos += 8;
				                    }
				                    else {
				                        s0 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e124);
				                        }
				                    }
				                    if (s0 === peg$FAILED) {
				                        if (input.substr(peg$currPos, 8) === peg$c125) {
				                            s0 = peg$c125;
				                            peg$currPos += 8;
				                        }
				                        else {
				                            s0 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e125);
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsevariantKey() {
				            var s0;
				            if (input.substr(peg$currPos, 7) === peg$c126) {
				                s0 = peg$c126;
				                peg$currPos += 7;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e126);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                if (input.substr(peg$currPos, 7) === peg$c127) {
				                    s0 = peg$c127;
				                    peg$currPos += 7;
				                }
				                else {
				                    s0 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e127);
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteRatingDiffKey() {
				            var s0;
				            if (input.substr(peg$currPos, 15) === peg$c128) {
				                s0 = peg$c128;
				                peg$currPos += 15;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e128);
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackRatingDiffKey() {
				            var s0;
				            if (input.substr(peg$currPos, 15) === peg$c129) {
				                s0 = peg$c129;
				                peg$currPos += 15;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e129);
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteFideIdKey() {
				            var s0;
				            if (input.substr(peg$currPos, 11) === peg$c130) {
				                s0 = peg$c130;
				                peg$currPos += 11;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e130);
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackFideIdKey() {
				            var s0;
				            if (input.substr(peg$currPos, 11) === peg$c131) {
				                s0 = peg$c131;
				                peg$currPos += 11;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e131);
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteTeamKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c132) {
				                s0 = peg$c132;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e132);
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackTeamKey() {
				            var s0;
				            if (input.substr(peg$currPos, 9) === peg$c133) {
				                s0 = peg$c133;
				                peg$currPos += 9;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e133);
				                }
				            }
				            return s0;
				        }
				        function peg$parseclockKey() {
				            var s0;
				            if (input.substr(peg$currPos, 5) === peg$c134) {
				                s0 = peg$c134;
				                peg$currPos += 5;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e134);
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteClockKey() {
				            var s0;
				            if (input.substr(peg$currPos, 10) === peg$c135) {
				                s0 = peg$c135;
				                peg$currPos += 10;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e135);
				                }
				            }
				            return s0;
				        }
				        function peg$parseblackClockKey() {
				            var s0;
				            if (input.substr(peg$currPos, 10) === peg$c136) {
				                s0 = peg$c136;
				                peg$currPos += 10;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e136);
				                }
				            }
				            return s0;
				        }
				        function peg$parsews() {
				            var s0, s1;
				            peg$silentFails++;
				            s0 = [];
				            s1 = input.charAt(peg$currPos);
				            if (peg$r0.test(s1)) {
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e138);
				                }
				            }
				            while (s1 !== peg$FAILED) {
				                s0.push(s1);
				                s1 = input.charAt(peg$currPos);
				                if (peg$r0.test(s1)) {
				                    peg$currPos++;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e138);
				                    }
				                }
				            }
				            peg$silentFails--;
				            s1 = peg$FAILED;
				            if (peg$silentFails === 0) {
				                peg$fail(peg$e137);
				            }
				            return s0;
				        }
				        function peg$parsewsp() {
				            var s0, s1;
				            s0 = [];
				            s1 = input.charAt(peg$currPos);
				            if (peg$r0.test(s1)) {
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e138);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                while (s1 !== peg$FAILED) {
				                    s0.push(s1);
				                    s1 = input.charAt(peg$currPos);
				                    if (peg$r0.test(s1)) {
				                        peg$currPos++;
				                    }
				                    else {
				                        s1 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e138);
				                        }
				                    }
				                }
				            }
				            else {
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseeol() {
				            var s0, s1;
				            s0 = [];
				            s1 = input.charAt(peg$currPos);
				            if (peg$r1.test(s1)) {
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e139);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                while (s1 !== peg$FAILED) {
				                    s0.push(s1);
				                    s1 = input.charAt(peg$currPos);
				                    if (peg$r1.test(s1)) {
				                        peg$currPos++;
				                    }
				                    else {
				                        s1 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e139);
				                        }
				                    }
				                }
				            }
				            else {
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsestringNoQuot() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            s1 = [];
				            s2 = input.charAt(peg$currPos);
				            if (peg$r2.test(s2)) {
				                peg$currPos++;
				            }
				            else {
				                s2 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e141);
				                }
				            }
				            while (s2 !== peg$FAILED) {
				                s1.push(s2);
				                s2 = input.charAt(peg$currPos);
				                if (peg$r2.test(s2)) {
				                    peg$currPos++;
				                }
				                else {
				                    s2 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e141);
				                    }
				                }
				            }
				            peg$savedPos = s0;
				            s1 = peg$f58(s1);
				            s0 = s1;
				            return s0;
				        }
				        function peg$parsequotation_mark() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 34) {
				                s0 = peg$c138;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e142);
				                }
				            }
				            return s0;
				        }
				        function peg$parsestring() {
				            var s0, s1, s3, s4, s5;
				            s0 = peg$currPos;
				            if (input.charCodeAt(peg$currPos) === 34) {
				                s1 = peg$c138;
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e142);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$parse_();
				                s3 = [];
				                s4 = peg$parsestringChar();
				                while (s4 !== peg$FAILED) {
				                    s3.push(s4);
				                    s4 = peg$parsestringChar();
				                }
				                s4 = peg$parse_();
				                if (input.charCodeAt(peg$currPos) === 34) {
				                    s5 = peg$c138;
				                    peg$currPos++;
				                }
				                else {
				                    s5 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e142);
				                    }
				                }
				                if (s5 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f59(s3);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsestringChar() {
				            var s0, s1, s2, s3;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r3.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e143);
				                }
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$parseEscape();
				                if (s1 !== peg$FAILED) {
				                    s2 = peg$currPos;
				                    if (input.charCodeAt(peg$currPos) === 92) {
				                        s3 = peg$c139;
				                        peg$currPos++;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e144);
				                        }
				                    }
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s2;
				                        s3 = peg$f60();
				                    }
				                    s2 = s3;
				                    if (s2 === peg$FAILED) {
				                        s2 = peg$currPos;
				                        if (input.charCodeAt(peg$currPos) === 34) {
				                            s3 = peg$c138;
				                            peg$currPos++;
				                        }
				                        else {
				                            s3 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e142);
				                            }
				                        }
				                        if (s3 !== peg$FAILED) {
				                            peg$savedPos = s2;
				                            s3 = peg$f61();
				                        }
				                        s2 = s3;
				                    }
				                    if (s2 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f62(s2);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            return s0;
				        }
				        function peg$parse_() {
				            var s0, s1;
				            peg$silentFails++;
				            s0 = [];
				            s1 = input.charAt(peg$currPos);
				            if (peg$r0.test(s1)) {
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e138);
				                }
				            }
				            while (s1 !== peg$FAILED) {
				                s0.push(s1);
				                s1 = input.charAt(peg$currPos);
				                if (peg$r0.test(s1)) {
				                    peg$currPos++;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e138);
				                    }
				                }
				            }
				            peg$silentFails--;
				            s1 = peg$FAILED;
				            if (peg$silentFails === 0) {
				                peg$fail(peg$e137);
				            }
				            return s0;
				        }
				        function peg$parseEscape() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 92) {
				                s0 = peg$c139;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e144);
				                }
				            }
				            return s0;
				        }
				        function peg$parsedateString() {
				            var s0, s1, s2, s3, s4, s5, s6, s7, s8;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$currPos;
				                s3 = input.charAt(peg$currPos);
				                if (peg$r4.test(s3)) {
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e145);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    s4 = input.charAt(peg$currPos);
				                    if (peg$r4.test(s4)) {
				                        peg$currPos++;
				                    }
				                    else {
				                        s4 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e145);
				                        }
				                    }
				                    if (s4 !== peg$FAILED) {
				                        s5 = input.charAt(peg$currPos);
				                        if (peg$r4.test(s5)) {
				                            peg$currPos++;
				                        }
				                        else {
				                            s5 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e145);
				                            }
				                        }
				                        if (s5 !== peg$FAILED) {
				                            s6 = input.charAt(peg$currPos);
				                            if (peg$r4.test(s6)) {
				                                peg$currPos++;
				                            }
				                            else {
				                                s6 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e145);
				                                }
				                            }
				                            if (s6 !== peg$FAILED) {
				                                s3 = [s3, s4, s5, s6];
				                                s2 = s3;
				                            }
				                            else {
				                                peg$currPos = s2;
				                                s2 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s2;
				                            s2 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s2;
				                        s2 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s2;
				                    s2 = peg$FAILED;
				                }
				                if (s2 !== peg$FAILED) {
				                    if (input.charCodeAt(peg$currPos) === 46) {
				                        s3 = peg$c140;
				                        peg$currPos++;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e146);
				                        }
				                    }
				                    if (s3 !== peg$FAILED) {
				                        s4 = peg$currPos;
				                        s5 = input.charAt(peg$currPos);
				                        if (peg$r4.test(s5)) {
				                            peg$currPos++;
				                        }
				                        else {
				                            s5 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e145);
				                            }
				                        }
				                        if (s5 !== peg$FAILED) {
				                            s6 = input.charAt(peg$currPos);
				                            if (peg$r4.test(s6)) {
				                                peg$currPos++;
				                            }
				                            else {
				                                s6 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e145);
				                                }
				                            }
				                            if (s6 !== peg$FAILED) {
				                                s5 = [s5, s6];
				                                s4 = s5;
				                            }
				                            else {
				                                peg$currPos = s4;
				                                s4 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s4;
				                            s4 = peg$FAILED;
				                        }
				                        if (s4 !== peg$FAILED) {
				                            if (input.charCodeAt(peg$currPos) === 46) {
				                                s5 = peg$c140;
				                                peg$currPos++;
				                            }
				                            else {
				                                s5 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e146);
				                                }
				                            }
				                            if (s5 !== peg$FAILED) {
				                                s6 = peg$currPos;
				                                s7 = input.charAt(peg$currPos);
				                                if (peg$r4.test(s7)) {
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s7 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e145);
				                                    }
				                                }
				                                if (s7 !== peg$FAILED) {
				                                    s8 = input.charAt(peg$currPos);
				                                    if (peg$r4.test(s8)) {
				                                        peg$currPos++;
				                                    }
				                                    else {
				                                        s8 = peg$FAILED;
				                                        if (peg$silentFails === 0) {
				                                            peg$fail(peg$e145);
				                                        }
				                                    }
				                                    if (s8 !== peg$FAILED) {
				                                        s7 = [s7, s8];
				                                        s6 = s7;
				                                    }
				                                    else {
				                                        peg$currPos = s6;
				                                        s6 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s6;
				                                    s6 = peg$FAILED;
				                                }
				                                if (s6 !== peg$FAILED) {
				                                    s7 = peg$parsequotation_mark();
				                                    if (s7 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s0 = peg$f63(s2, s4, s6);
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsetimeString() {
				            var s0, s1, s2, s3, s4, s5, s6, s7, s8;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = [];
				                s3 = input.charAt(peg$currPos);
				                if (peg$r5.test(s3)) {
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e147);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    while (s3 !== peg$FAILED) {
				                        s2.push(s3);
				                        s3 = input.charAt(peg$currPos);
				                        if (peg$r5.test(s3)) {
				                            peg$currPos++;
				                        }
				                        else {
				                            s3 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e147);
				                            }
				                        }
				                    }
				                }
				                else {
				                    s2 = peg$FAILED;
				                }
				                if (s2 !== peg$FAILED) {
				                    if (input.charCodeAt(peg$currPos) === 58) {
				                        s3 = peg$c141;
				                        peg$currPos++;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e148);
				                        }
				                    }
				                    if (s3 !== peg$FAILED) {
				                        s4 = [];
				                        s5 = input.charAt(peg$currPos);
				                        if (peg$r5.test(s5)) {
				                            peg$currPos++;
				                        }
				                        else {
				                            s5 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e147);
				                            }
				                        }
				                        if (s5 !== peg$FAILED) {
				                            while (s5 !== peg$FAILED) {
				                                s4.push(s5);
				                                s5 = input.charAt(peg$currPos);
				                                if (peg$r5.test(s5)) {
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s5 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e147);
				                                    }
				                                }
				                            }
				                        }
				                        else {
				                            s4 = peg$FAILED;
				                        }
				                        if (s4 !== peg$FAILED) {
				                            if (input.charCodeAt(peg$currPos) === 58) {
				                                s5 = peg$c141;
				                                peg$currPos++;
				                            }
				                            else {
				                                s5 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e148);
				                                }
				                            }
				                            if (s5 !== peg$FAILED) {
				                                s6 = [];
				                                s7 = input.charAt(peg$currPos);
				                                if (peg$r5.test(s7)) {
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s7 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e147);
				                                    }
				                                }
				                                if (s7 !== peg$FAILED) {
				                                    while (s7 !== peg$FAILED) {
				                                        s6.push(s7);
				                                        s7 = input.charAt(peg$currPos);
				                                        if (peg$r5.test(s7)) {
				                                            peg$currPos++;
				                                        }
				                                        else {
				                                            s7 = peg$FAILED;
				                                            if (peg$silentFails === 0) {
				                                                peg$fail(peg$e147);
				                                            }
				                                        }
				                                    }
				                                }
				                                else {
				                                    s6 = peg$FAILED;
				                                }
				                                if (s6 !== peg$FAILED) {
				                                    s7 = peg$parsemillis();
				                                    if (s7 === peg$FAILED) {
				                                        s7 = null;
				                                    }
				                                    s8 = peg$parsequotation_mark();
				                                    if (s8 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s0 = peg$f64(s2, s4, s6, s7);
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsemillis() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            if (input.charCodeAt(peg$currPos) === 46) {
				                s1 = peg$c140;
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e146);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                s2 = [];
				                s3 = input.charAt(peg$currPos);
				                if (peg$r5.test(s3)) {
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e147);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    while (s3 !== peg$FAILED) {
				                        s2.push(s3);
				                        s3 = input.charAt(peg$currPos);
				                        if (peg$r5.test(s3)) {
				                            peg$currPos++;
				                        }
				                        else {
				                            s3 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e147);
				                            }
				                        }
				                    }
				                }
				                else {
				                    s2 = peg$FAILED;
				                }
				                if (s2 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f65(s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolorClockTimeQ() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsecolorClockTime();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsequotation_mark();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f66(s2);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolorClockTime() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parseclockColor();
				            if (s1 !== peg$FAILED) {
				                if (input.charCodeAt(peg$currPos) === 47) {
				                    s2 = peg$c142;
				                    peg$currPos++;
				                }
				                else {
				                    s2 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e149);
				                    }
				                }
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parseclockTime();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f67(s1, s3);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseclockColor() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r6.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e150);
				                }
				            }
				            return s0;
				        }
				        function peg$parseclockTimeQ() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parseclockTime();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsequotation_mark();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f68(s2);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseclockTime() {
				            var s0, s1;
				            s0 = peg$currPos;
				            s1 = peg$parseclockValue1D();
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f69(s1);
				            }
				            s0 = s1;
				            return s0;
				        }
				        function peg$parsetimeControl() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsetcnqs();
				                s3 = peg$parsequotation_mark();
				                if (s3 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f70(s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsetcnqs() {
				            var s0, s1, s2, s3, s4, s5, s6;
				            s0 = peg$currPos;
				            s1 = peg$currPos;
				            s2 = peg$parsetcnq();
				            if (s2 !== peg$FAILED) {
				                s3 = [];
				                s4 = peg$currPos;
				                if (input.charCodeAt(peg$currPos) === 58) {
				                    s5 = peg$c141;
				                    peg$currPos++;
				                }
				                else {
				                    s5 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e148);
				                    }
				                }
				                if (s5 !== peg$FAILED) {
				                    s6 = peg$parsetcnq();
				                    if (s6 !== peg$FAILED) {
				                        peg$savedPos = s4;
				                        s4 = peg$f71(s2, s6);
				                    }
				                    else {
				                        peg$currPos = s4;
				                        s4 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s4;
				                    s4 = peg$FAILED;
				                }
				                while (s4 !== peg$FAILED) {
				                    s3.push(s4);
				                    s4 = peg$currPos;
				                    if (input.charCodeAt(peg$currPos) === 58) {
				                        s5 = peg$c141;
				                        peg$currPos++;
				                    }
				                    else {
				                        s5 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e148);
				                        }
				                    }
				                    if (s5 !== peg$FAILED) {
				                        s6 = peg$parsetcnq();
				                        if (s6 !== peg$FAILED) {
				                            peg$savedPos = s4;
				                            s4 = peg$f71(s2, s6);
				                        }
				                        else {
				                            peg$currPos = s4;
				                            s4 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s4;
				                        s4 = peg$FAILED;
				                    }
				                }
				                peg$savedPos = s1;
				                s1 = peg$f72(s2, s3);
				            }
				            else {
				                peg$currPos = s1;
				                s1 = peg$FAILED;
				            }
				            if (s1 === peg$FAILED) {
				                s1 = null;
				            }
				            peg$savedPos = s0;
				            s1 = peg$f73(s1);
				            s0 = s1;
				            return s0;
				        }
				        function peg$parsetcnq() {
				            var s0, s1, s2, s3, s4, s5;
				            s0 = peg$currPos;
				            if (input.charCodeAt(peg$currPos) === 63) {
				                s1 = peg$c143;
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e151);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f74();
				            }
				            s0 = s1;
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                if (input.charCodeAt(peg$currPos) === 45) {
				                    s1 = peg$c144;
				                    peg$currPos++;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e152);
				                    }
				                }
				                if (s1 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s1 = peg$f75();
				                }
				                s0 = s1;
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    s1 = peg$parseinteger();
				                    if (s1 !== peg$FAILED) {
				                        if (input.charCodeAt(peg$currPos) === 47) {
				                            s2 = peg$c142;
				                            peg$currPos++;
				                        }
				                        else {
				                            s2 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e149);
				                            }
				                        }
				                        if (s2 !== peg$FAILED) {
				                            s3 = peg$parseinteger();
				                            if (s3 !== peg$FAILED) {
				                                if (input.charCodeAt(peg$currPos) === 43) {
				                                    s4 = peg$c145;
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s4 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e153);
				                                    }
				                                }
				                                if (s4 !== peg$FAILED) {
				                                    s5 = peg$parseinteger();
				                                    if (s5 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s0 = peg$f76(s1, s3, s5);
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        s1 = peg$parseinteger();
				                        if (s1 !== peg$FAILED) {
				                            if (input.charCodeAt(peg$currPos) === 47) {
				                                s2 = peg$c142;
				                                peg$currPos++;
				                            }
				                            else {
				                                s2 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e149);
				                                }
				                            }
				                            if (s2 !== peg$FAILED) {
				                                s3 = peg$parseinteger();
				                                if (s3 !== peg$FAILED) {
				                                    peg$savedPos = s0;
				                                    s0 = peg$f77(s1, s3);
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            s1 = peg$parseinteger();
				                            if (s1 !== peg$FAILED) {
				                                if (input.charCodeAt(peg$currPos) === 43) {
				                                    s2 = peg$c145;
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s2 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e153);
				                                    }
				                                }
				                                if (s2 !== peg$FAILED) {
				                                    s3 = peg$parseinteger();
				                                    if (s3 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s0 = peg$f78(s1, s3);
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$currPos;
				                                s1 = peg$parseinteger();
				                                if (s1 !== peg$FAILED) {
				                                    peg$savedPos = s0;
				                                    s1 = peg$f79(s1);
				                                }
				                                s0 = s1;
				                                if (s0 === peg$FAILED) {
				                                    s0 = peg$currPos;
				                                    if (input.charCodeAt(peg$currPos) === 42) {
				                                        s1 = peg$c146;
				                                        peg$currPos++;
				                                    }
				                                    else {
				                                        s1 = peg$FAILED;
				                                        if (peg$silentFails === 0) {
				                                            peg$fail(peg$e154);
				                                        }
				                                    }
				                                    if (s1 !== peg$FAILED) {
				                                        s2 = peg$parseinteger();
				                                        if (s2 !== peg$FAILED) {
				                                            peg$savedPos = s0;
				                                            s0 = peg$f80(s2);
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseresult() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parseinnerResult();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsequotation_mark();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f81(s2);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseinnerResult() {
				            var s0, s1;
				            s0 = peg$currPos;
				            if (input.substr(peg$currPos, 3) === peg$c147) {
				                s1 = peg$c147;
				                peg$currPos += 3;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e155);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f82(s1);
				            }
				            s0 = s1;
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                if (input.substr(peg$currPos, 3) === peg$c148) {
				                    s1 = peg$c148;
				                    peg$currPos += 3;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e156);
				                    }
				                }
				                if (s1 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s1 = peg$f83(s1);
				                }
				                s0 = s1;
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    if (input.substr(peg$currPos, 7) === peg$c149) {
				                        s1 = peg$c149;
				                        peg$currPos += 7;
				                    }
				                    else {
				                        s1 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e157);
				                        }
				                    }
				                    if (s1 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s1 = peg$f84(s1);
				                    }
				                    s0 = s1;
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        if (input.substr(peg$currPos, 3) === peg$c150) {
				                            s1 = peg$c150;
				                            peg$currPos += 3;
				                        }
				                        else {
				                            s1 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e158);
				                            }
				                        }
				                        if (s1 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s1 = peg$f85();
				                        }
				                        s0 = s1;
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            if (input.charCodeAt(peg$currPos) === 42) {
				                                s1 = peg$c146;
				                                peg$currPos++;
				                            }
				                            else {
				                                s1 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e154);
				                                }
				                            }
				                            if (s1 !== peg$FAILED) {
				                                peg$savedPos = s0;
				                                s1 = peg$f86(s1);
				                            }
				                            s0 = s1;
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseintegerOrDashString() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parseintegerString();
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f87(s1);
				            }
				            s0 = s1;
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$parsequotation_mark();
				                if (s1 !== peg$FAILED) {
				                    if (input.charCodeAt(peg$currPos) === 45) {
				                        s2 = peg$c144;
				                        peg$currPos++;
				                    }
				                    else {
				                        s2 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e152);
				                        }
				                    }
				                    if (s2 !== peg$FAILED) {
				                        s3 = peg$parsequotation_mark();
				                        if (s3 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s0 = peg$f88();
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    s1 = peg$parsequotation_mark();
				                    if (s1 !== peg$FAILED) {
				                        s2 = peg$parsequotation_mark();
				                        if (s2 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s0 = peg$f89();
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parseintegerString() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsequotation_mark();
				            if (s1 !== peg$FAILED) {
				                s2 = [];
				                s3 = input.charAt(peg$currPos);
				                if (peg$r5.test(s3)) {
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e147);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    while (s3 !== peg$FAILED) {
				                        s2.push(s3);
				                        s3 = input.charAt(peg$currPos);
				                        if (peg$r5.test(s3)) {
				                            peg$currPos++;
				                        }
				                        else {
				                            s3 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e147);
				                            }
				                        }
				                    }
				                }
				                else {
				                    s2 = peg$FAILED;
				                }
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsequotation_mark();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f90(s2);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsepgn() {
				            var s0, s2, s3, s5, s7, s9, s10, s12, s14, s15;
				            s0 = peg$currPos;
				            peg$parseBOM();
				            s2 = peg$parsews();
				            s3 = peg$parsecomments();
				            if (s3 === peg$FAILED) {
				                s3 = null;
				            }
				            peg$parsews();
				            s5 = peg$parsemoveNumber();
				            if (s5 === peg$FAILED) {
				                s5 = null;
				            }
				            peg$parsews();
				            s7 = peg$parsehalfMove();
				            if (s7 !== peg$FAILED) {
				                peg$parsews();
				                s9 = peg$parsenags();
				                if (s9 === peg$FAILED) {
				                    s9 = null;
				                }
				                s10 = peg$parsedrawOffer();
				                if (s10 === peg$FAILED) {
				                    s10 = null;
				                }
				                peg$parsews();
				                s12 = peg$parsecomments();
				                if (s12 === peg$FAILED) {
				                    s12 = null;
				                }
				                peg$parsews();
				                s14 = peg$parsevariation();
				                if (s14 === peg$FAILED) {
				                    s14 = null;
				                }
				                s15 = peg$parsepgn();
				                if (s15 === peg$FAILED) {
				                    s15 = null;
				                }
				                peg$savedPos = s0;
				                s0 = peg$f91(s3, s5, s7, s9, s10, s12, s14, s15);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                peg$parsews();
				                s2 = peg$parseendGame();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsews();
				                    peg$savedPos = s0;
				                    s0 = peg$f92(s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            return s0;
				        }
				        function peg$parsedrawOffer() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsepl();
				            if (s1 !== peg$FAILED) {
				                if (input.charCodeAt(peg$currPos) === 61) {
				                    s2 = peg$c151;
				                    peg$currPos++;
				                }
				                else {
				                    s2 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e159);
				                    }
				                }
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsepr();
				                    if (s3 !== peg$FAILED) {
				                        s1 = [s1, s2, s3];
				                        s0 = s1;
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseendGame() {
				            var s0, s1;
				            s0 = peg$currPos;
				            s1 = peg$parseinnerResult();
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f93(s1);
				            }
				            s0 = s1;
				            return s0;
				        }
				        function peg$parsecomments() {
				            var s0, s1, s2, s3, s5;
				            s0 = peg$currPos;
				            s1 = peg$parsecomment();
				            if (s1 !== peg$FAILED) {
				                s2 = [];
				                s3 = peg$currPos;
				                peg$parsews();
				                s5 = peg$parsecomment();
				                if (s5 !== peg$FAILED) {
				                    peg$savedPos = s3;
				                    s3 = peg$f94(s1, s5);
				                }
				                else {
				                    peg$currPos = s3;
				                    s3 = peg$FAILED;
				                }
				                while (s3 !== peg$FAILED) {
				                    s2.push(s3);
				                    s3 = peg$currPos;
				                    peg$parsews();
				                    s5 = peg$parsecomment();
				                    if (s5 !== peg$FAILED) {
				                        peg$savedPos = s3;
				                        s3 = peg$f94(s1, s5);
				                    }
				                    else {
				                        peg$currPos = s3;
				                        s3 = peg$FAILED;
				                    }
				                }
				                peg$savedPos = s0;
				                s0 = peg$f95(s1, s2);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecomment() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsecl();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsecr();
				                if (s2 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f96();
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$parsecl();
				                if (s1 !== peg$FAILED) {
				                    s2 = peg$parseinnerComment();
				                    if (s2 !== peg$FAILED) {
				                        s3 = peg$parsecr();
				                        if (s3 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s0 = peg$f97(s2);
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    s1 = peg$parsecommentEndOfLine();
				                    if (s1 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s1 = peg$f98(s1);
				                    }
				                    s0 = s1;
				                }
				            }
				            return s0;
				        }
				        function peg$parseinnerComment() {
				            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
				            s0 = peg$currPos;
				            s1 = peg$parsews();
				            s2 = peg$parsebl();
				            if (s2 !== peg$FAILED) {
				                if (input.substr(peg$currPos, 4) === peg$c152) {
				                    s3 = peg$c152;
				                    peg$currPos += 4;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e160);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    s4 = peg$parsewsp();
				                    if (s4 !== peg$FAILED) {
				                        s5 = peg$parsecolorFields();
				                        if (s5 === peg$FAILED) {
				                            s5 = null;
				                        }
				                        s6 = peg$parsews();
				                        s7 = peg$parsebr();
				                        if (s7 !== peg$FAILED) {
				                            s8 = peg$parsews();
				                            s9 = [];
				                            s10 = peg$currPos;
				                            s11 = peg$parseinnerComment();
				                            if (s11 !== peg$FAILED) {
				                                peg$savedPos = s10;
				                                s11 = peg$f99(s5, s11);
				                            }
				                            s10 = s11;
				                            while (s10 !== peg$FAILED) {
				                                s9.push(s10);
				                                s10 = peg$currPos;
				                                s11 = peg$parseinnerComment();
				                                if (s11 !== peg$FAILED) {
				                                    peg$savedPos = s10;
				                                    s11 = peg$f99(s5, s11);
				                                }
				                                s10 = s11;
				                            }
				                            peg$savedPos = s0;
				                            s0 = peg$f100(s5, s9);
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$parsews();
				                s2 = peg$parsebl();
				                if (s2 !== peg$FAILED) {
				                    if (input.substr(peg$currPos, 4) === peg$c153) {
				                        s3 = peg$c153;
				                        peg$currPos += 4;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e161);
				                        }
				                    }
				                    if (s3 !== peg$FAILED) {
				                        s4 = peg$parsewsp();
				                        if (s4 !== peg$FAILED) {
				                            s5 = peg$parsecolorArrows();
				                            if (s5 === peg$FAILED) {
				                                s5 = null;
				                            }
				                            s6 = peg$parsews();
				                            s7 = peg$parsebr();
				                            if (s7 !== peg$FAILED) {
				                                s8 = peg$parsews();
				                                s9 = [];
				                                s10 = peg$currPos;
				                                s11 = peg$parseinnerComment();
				                                if (s11 !== peg$FAILED) {
				                                    peg$savedPos = s10;
				                                    s11 = peg$f101(s5, s11);
				                                }
				                                s10 = s11;
				                                while (s10 !== peg$FAILED) {
				                                    s9.push(s10);
				                                    s10 = peg$currPos;
				                                    s11 = peg$parseinnerComment();
				                                    if (s11 !== peg$FAILED) {
				                                        peg$savedPos = s10;
				                                        s11 = peg$f101(s5, s11);
				                                    }
				                                    s10 = s11;
				                                }
				                                peg$savedPos = s0;
				                                s0 = peg$f102(s5, s9);
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    s1 = peg$parsews();
				                    s2 = peg$parsebl();
				                    if (s2 !== peg$FAILED) {
				                        if (input.charCodeAt(peg$currPos) === 37) {
				                            s3 = peg$c154;
				                            peg$currPos++;
				                        }
				                        else {
				                            s3 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e162);
				                            }
				                        }
				                        if (s3 !== peg$FAILED) {
				                            s4 = peg$parseclockCommand1D();
				                            if (s4 !== peg$FAILED) {
				                                s5 = peg$parsewsp();
				                                if (s5 !== peg$FAILED) {
				                                    s6 = peg$parseclockValue1D();
				                                    if (s6 !== peg$FAILED) {
				                                        s7 = peg$parsews();
				                                        s8 = peg$parsebr();
				                                        if (s8 !== peg$FAILED) {
				                                            s9 = peg$parsews();
				                                            s10 = [];
				                                            s11 = peg$currPos;
				                                            s12 = peg$parseinnerComment();
				                                            if (s12 !== peg$FAILED) {
				                                                peg$savedPos = s11;
				                                                s12 = peg$f103(s4, s6, s12);
				                                            }
				                                            s11 = s12;
				                                            while (s11 !== peg$FAILED) {
				                                                s10.push(s11);
				                                                s11 = peg$currPos;
				                                                s12 = peg$parseinnerComment();
				                                                if (s12 !== peg$FAILED) {
				                                                    peg$savedPos = s11;
				                                                    s12 = peg$f103(s4, s6, s12);
				                                                }
				                                                s11 = s12;
				                                            }
				                                            peg$savedPos = s0;
				                                            s0 = peg$f104(s4, s6, s10);
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        s1 = peg$parsews();
				                        s2 = peg$parsebl();
				                        if (s2 !== peg$FAILED) {
				                            if (input.charCodeAt(peg$currPos) === 37) {
				                                s3 = peg$c154;
				                                peg$currPos++;
				                            }
				                            else {
				                                s3 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e162);
				                                }
				                            }
				                            if (s3 !== peg$FAILED) {
				                                s4 = peg$parseclockCommand2D();
				                                if (s4 !== peg$FAILED) {
				                                    s5 = peg$parsewsp();
				                                    if (s5 !== peg$FAILED) {
				                                        s6 = peg$parseclockValue2D();
				                                        if (s6 !== peg$FAILED) {
				                                            s7 = peg$parsews();
				                                            s8 = peg$parsebr();
				                                            if (s8 !== peg$FAILED) {
				                                                s9 = peg$parsews();
				                                                s10 = [];
				                                                s11 = peg$currPos;
				                                                s12 = peg$parseinnerComment();
				                                                if (s12 !== peg$FAILED) {
				                                                    peg$savedPos = s11;
				                                                    s12 = peg$f105(s4, s6, s12);
				                                                }
				                                                s11 = s12;
				                                                while (s11 !== peg$FAILED) {
				                                                    s10.push(s11);
				                                                    s11 = peg$currPos;
				                                                    s12 = peg$parseinnerComment();
				                                                    if (s12 !== peg$FAILED) {
				                                                        peg$savedPos = s11;
				                                                        s12 = peg$f105(s4, s6, s12);
				                                                    }
				                                                    s11 = s12;
				                                                }
				                                                peg$savedPos = s0;
				                                                s0 = peg$f106(s4, s6, s10);
				                                            }
				                                            else {
				                                                peg$currPos = s0;
				                                                s0 = peg$FAILED;
				                                            }
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            s1 = peg$parsews();
				                            s2 = peg$parsebl();
				                            if (s2 !== peg$FAILED) {
				                                if (input.substr(peg$currPos, 5) === peg$c155) {
				                                    s3 = peg$c155;
				                                    peg$currPos += 5;
				                                }
				                                else {
				                                    s3 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e163);
				                                    }
				                                }
				                                if (s3 !== peg$FAILED) {
				                                    s4 = peg$parsewsp();
				                                    if (s4 !== peg$FAILED) {
				                                        s5 = peg$parsestringNoQuot();
				                                        s6 = peg$parsews();
				                                        s7 = peg$parsebr();
				                                        if (s7 !== peg$FAILED) {
				                                            s8 = peg$parsews();
				                                            s9 = [];
				                                            s10 = peg$currPos;
				                                            s11 = peg$parseinnerComment();
				                                            if (s11 !== peg$FAILED) {
				                                                peg$savedPos = s10;
				                                                s11 = peg$f107(s5, s11);
				                                            }
				                                            s10 = s11;
				                                            while (s10 !== peg$FAILED) {
				                                                s9.push(s10);
				                                                s10 = peg$currPos;
				                                                s11 = peg$parseinnerComment();
				                                                if (s11 !== peg$FAILED) {
				                                                    peg$savedPos = s10;
				                                                    s11 = peg$f107(s5, s11);
				                                                }
				                                                s10 = s11;
				                                            }
				                                            peg$savedPos = s0;
				                                            s0 = peg$f108(s5, s9);
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$currPos;
				                                s1 = peg$parsews();
				                                s2 = peg$parsebl();
				                                if (s2 !== peg$FAILED) {
				                                    if (input.charCodeAt(peg$currPos) === 37) {
				                                        s3 = peg$c154;
				                                        peg$currPos++;
				                                    }
				                                    else {
				                                        s3 = peg$FAILED;
				                                        if (peg$silentFails === 0) {
				                                            peg$fail(peg$e162);
				                                        }
				                                    }
				                                    if (s3 !== peg$FAILED) {
				                                        s4 = peg$parsestringNoQuot();
				                                        s5 = peg$parsewsp();
				                                        if (s5 !== peg$FAILED) {
				                                            s6 = [];
				                                            s7 = peg$parsenbr();
				                                            if (s7 !== peg$FAILED) {
				                                                while (s7 !== peg$FAILED) {
				                                                    s6.push(s7);
				                                                    s7 = peg$parsenbr();
				                                                }
				                                            }
				                                            else {
				                                                s6 = peg$FAILED;
				                                            }
				                                            if (s6 !== peg$FAILED) {
				                                                s7 = peg$parsebr();
				                                                if (s7 !== peg$FAILED) {
				                                                    s8 = peg$parsews();
				                                                    s9 = [];
				                                                    s10 = peg$currPos;
				                                                    s11 = peg$parseinnerComment();
				                                                    if (s11 !== peg$FAILED) {
				                                                        peg$savedPos = s10;
				                                                        s11 = peg$f109(s4, s6, s11);
				                                                    }
				                                                    s10 = s11;
				                                                    while (s10 !== peg$FAILED) {
				                                                        s9.push(s10);
				                                                        s10 = peg$currPos;
				                                                        s11 = peg$parseinnerComment();
				                                                        if (s11 !== peg$FAILED) {
				                                                            peg$savedPos = s10;
				                                                            s11 = peg$f109(s4, s6, s11);
				                                                        }
				                                                        s10 = s11;
				                                                    }
				                                                    peg$savedPos = s0;
				                                                    s0 = peg$f110(s4, s6, s9);
				                                                }
				                                                else {
				                                                    peg$currPos = s0;
				                                                    s0 = peg$FAILED;
				                                                }
				                                            }
				                                            else {
				                                                peg$currPos = s0;
				                                                s0 = peg$FAILED;
				                                            }
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                                if (s0 === peg$FAILED) {
				                                    s0 = peg$currPos;
				                                    s1 = [];
				                                    s2 = peg$parsenonCommand();
				                                    if (s2 !== peg$FAILED) {
				                                        while (s2 !== peg$FAILED) {
				                                            s1.push(s2);
				                                            s2 = peg$parsenonCommand();
				                                        }
				                                    }
				                                    else {
				                                        s1 = peg$FAILED;
				                                    }
				                                    if (s1 !== peg$FAILED) {
				                                        s2 = [];
				                                        s3 = peg$currPos;
				                                        s4 = peg$parsews();
				                                        s5 = peg$parseinnerComment();
				                                        if (s5 !== peg$FAILED) {
				                                            peg$savedPos = s3;
				                                            s3 = peg$f111(s1, s5);
				                                        }
				                                        else {
				                                            peg$currPos = s3;
				                                            s3 = peg$FAILED;
				                                        }
				                                        while (s3 !== peg$FAILED) {
				                                            s2.push(s3);
				                                            s3 = peg$currPos;
				                                            s4 = peg$parsews();
				                                            s5 = peg$parseinnerComment();
				                                            if (s5 !== peg$FAILED) {
				                                                peg$savedPos = s3;
				                                                s3 = peg$f111(s1, s5);
				                                            }
				                                            else {
				                                                peg$currPos = s3;
				                                                s3 = peg$FAILED;
				                                            }
				                                        }
				                                        peg$savedPos = s0;
				                                        s0 = peg$f112(s1, s2);
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsenonCommand() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$currPos;
				            peg$silentFails++;
				            if (input.substr(peg$currPos, 2) === peg$c156) {
				                s2 = peg$c156;
				                peg$currPos += 2;
				            }
				            else {
				                s2 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e164);
				                }
				            }
				            peg$silentFails--;
				            if (s2 === peg$FAILED) {
				                s1 = undefined;
				            }
				            else {
				                peg$currPos = s1;
				                s1 = peg$FAILED;
				            }
				            if (s1 !== peg$FAILED) {
				                s2 = peg$currPos;
				                peg$silentFails++;
				                if (input.charCodeAt(peg$currPos) === 125) {
				                    s3 = peg$c157;
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e165);
				                    }
				                }
				                peg$silentFails--;
				                if (s3 === peg$FAILED) {
				                    s2 = undefined;
				                }
				                else {
				                    peg$currPos = s2;
				                    s2 = peg$FAILED;
				                }
				                if (s2 !== peg$FAILED) {
				                    if (input.length > peg$currPos) {
				                        s3 = input.charAt(peg$currPos);
				                        peg$currPos++;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e166);
				                        }
				                    }
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f113(s3);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsenbr() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            s1 = peg$currPos;
				            peg$silentFails++;
				            s2 = peg$parsebr();
				            peg$silentFails--;
				            if (s2 === peg$FAILED) {
				                s1 = undefined;
				            }
				            else {
				                peg$currPos = s1;
				                s1 = peg$FAILED;
				            }
				            if (s1 !== peg$FAILED) {
				                if (input.length > peg$currPos) {
				                    s2 = input.charAt(peg$currPos);
				                    peg$currPos++;
				                }
				                else {
				                    s2 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e166);
				                    }
				                }
				                if (s2 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f114(s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecommentEndOfLine() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsesemicolon();
				            if (s1 !== peg$FAILED) {
				                s2 = [];
				                s3 = input.charAt(peg$currPos);
				                if (peg$r7.test(s3)) {
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e167);
				                    }
				                }
				                while (s3 !== peg$FAILED) {
				                    s2.push(s3);
				                    s3 = input.charAt(peg$currPos);
				                    if (peg$r7.test(s3)) {
				                        peg$currPos++;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e167);
				                        }
				                    }
				                }
				                s3 = peg$parseeol();
				                if (s3 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f115(s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolorFields() {
				            var s0, s1, s3, s4, s5, s6, s7;
				            s0 = peg$currPos;
				            s1 = peg$parsecolorField();
				            if (s1 !== peg$FAILED) {
				                peg$parsews();
				                s3 = [];
				                s4 = peg$currPos;
				                if (input.charCodeAt(peg$currPos) === 44) {
				                    s5 = peg$c158;
				                    peg$currPos++;
				                }
				                else {
				                    s5 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e168);
				                    }
				                }
				                if (s5 !== peg$FAILED) {
				                    s6 = peg$parsews();
				                    s7 = peg$parsecolorField();
				                    if (s7 !== peg$FAILED) {
				                        s5 = [s5, s6, s7];
				                        s4 = s5;
				                    }
				                    else {
				                        peg$currPos = s4;
				                        s4 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s4;
				                    s4 = peg$FAILED;
				                }
				                while (s4 !== peg$FAILED) {
				                    s3.push(s4);
				                    s4 = peg$currPos;
				                    if (input.charCodeAt(peg$currPos) === 44) {
				                        s5 = peg$c158;
				                        peg$currPos++;
				                    }
				                    else {
				                        s5 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e168);
				                        }
				                    }
				                    if (s5 !== peg$FAILED) {
				                        s6 = peg$parsews();
				                        s7 = peg$parsecolorField();
				                        if (s7 !== peg$FAILED) {
				                            s5 = [s5, s6, s7];
				                            s4 = s5;
				                        }
				                        else {
				                            peg$currPos = s4;
				                            s4 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s4;
				                        s4 = peg$FAILED;
				                    }
				                }
				                peg$savedPos = s0;
				                s0 = peg$f116(s1, s3);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolorField() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            s1 = peg$parsecolor();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsefield();
				                if (s2 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f117(s1, s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolorArrows() {
				            var s0, s1, s3, s4, s5, s6, s7;
				            s0 = peg$currPos;
				            s1 = peg$parsecolorArrow();
				            if (s1 !== peg$FAILED) {
				                peg$parsews();
				                s3 = [];
				                s4 = peg$currPos;
				                if (input.charCodeAt(peg$currPos) === 44) {
				                    s5 = peg$c158;
				                    peg$currPos++;
				                }
				                else {
				                    s5 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e168);
				                    }
				                }
				                if (s5 !== peg$FAILED) {
				                    s6 = peg$parsews();
				                    s7 = peg$parsecolorArrow();
				                    if (s7 !== peg$FAILED) {
				                        s5 = [s5, s6, s7];
				                        s4 = s5;
				                    }
				                    else {
				                        peg$currPos = s4;
				                        s4 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s4;
				                    s4 = peg$FAILED;
				                }
				                while (s4 !== peg$FAILED) {
				                    s3.push(s4);
				                    s4 = peg$currPos;
				                    if (input.charCodeAt(peg$currPos) === 44) {
				                        s5 = peg$c158;
				                        peg$currPos++;
				                    }
				                    else {
				                        s5 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e168);
				                        }
				                    }
				                    if (s5 !== peg$FAILED) {
				                        s6 = peg$parsews();
				                        s7 = peg$parsecolorArrow();
				                        if (s7 !== peg$FAILED) {
				                            s5 = [s5, s6, s7];
				                            s4 = s5;
				                        }
				                        else {
				                            peg$currPos = s4;
				                            s4 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s4;
				                        s4 = peg$FAILED;
				                    }
				                }
				                peg$savedPos = s0;
				                s0 = peg$f118(s1, s3);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolorArrow() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsecolor();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsefield();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsefield();
				                    if (s3 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s0 = peg$f119(s1, s2, s3);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecolor() {
				            var s0, s1;
				            s0 = peg$currPos;
				            if (input.charCodeAt(peg$currPos) === 89) {
				                s1 = peg$c159;
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e169);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f120();
				            }
				            s0 = s1;
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                if (input.charCodeAt(peg$currPos) === 71) {
				                    s1 = peg$c160;
				                    peg$currPos++;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e170);
				                    }
				                }
				                if (s1 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s1 = peg$f121();
				                }
				                s0 = s1;
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    if (input.charCodeAt(peg$currPos) === 82) {
				                        s1 = peg$c161;
				                        peg$currPos++;
				                    }
				                    else {
				                        s1 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e171);
				                        }
				                    }
				                    if (s1 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s1 = peg$f122();
				                    }
				                    s0 = s1;
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        if (input.charCodeAt(peg$currPos) === 66) {
				                            s1 = peg$c162;
				                            peg$currPos++;
				                        }
				                        else {
				                            s1 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e172);
				                            }
				                        }
				                        if (s1 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s1 = peg$f123();
				                        }
				                        s0 = s1;
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            if (input.charCodeAt(peg$currPos) === 79) {
				                                s1 = peg$c163;
				                                peg$currPos++;
				                            }
				                            else {
				                                s1 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e173);
				                                }
				                            }
				                            if (s1 !== peg$FAILED) {
				                                peg$savedPos = s0;
				                                s1 = peg$f124();
				                            }
				                            s0 = s1;
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$currPos;
				                                if (input.charCodeAt(peg$currPos) === 67) {
				                                    s1 = peg$c164;
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s1 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e174);
				                                    }
				                                }
				                                if (s1 !== peg$FAILED) {
				                                    peg$savedPos = s0;
				                                    s1 = peg$f125();
				                                }
				                                s0 = s1;
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsefield() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            s1 = peg$parsecolumn();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parserow();
				                if (s2 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f126(s1, s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsecl() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 123) {
				                s0 = peg$c165;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e175);
				                }
				            }
				            return s0;
				        }
				        function peg$parsecr() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 125) {
				                s0 = peg$c157;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e165);
				                }
				            }
				            return s0;
				        }
				        function peg$parsebl() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 91) {
				                s0 = peg$c166;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e176);
				                }
				            }
				            return s0;
				        }
				        function peg$parsebr() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 93) {
				                s0 = peg$c167;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e177);
				                }
				            }
				            return s0;
				        }
				        function peg$parsesemicolon() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 59) {
				                s0 = peg$c168;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e178);
				                }
				            }
				            return s0;
				        }
				        function peg$parseclockCommand1D() {
				            var s0, s1;
				            s0 = peg$currPos;
				            if (input.substr(peg$currPos, 3) === peg$c169) {
				                s1 = peg$c169;
				                peg$currPos += 3;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e179);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f131();
				            }
				            s0 = s1;
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                if (input.substr(peg$currPos, 3) === peg$c170) {
				                    s1 = peg$c170;
				                    peg$currPos += 3;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e180);
				                    }
				                }
				                if (s1 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s1 = peg$f132();
				                }
				                s0 = s1;
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    if (input.substr(peg$currPos, 3) === peg$c171) {
				                        s1 = peg$c171;
				                        peg$currPos += 3;
				                    }
				                    else {
				                        s1 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e181);
				                        }
				                    }
				                    if (s1 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s1 = peg$f133();
				                    }
				                    s0 = s1;
				                }
				            }
				            return s0;
				        }
				        function peg$parseclockCommand2D() {
				            var s0, s1;
				            s0 = peg$currPos;
				            if (input.substr(peg$currPos, 3) === peg$c172) {
				                s1 = peg$c172;
				                peg$currPos += 3;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e182);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f134();
				            }
				            s0 = s1;
				            return s0;
				        }
				        function peg$parseclockValue1D() {
				            var s0, s1, s2, s3, s4;
				            s0 = peg$currPos;
				            s1 = peg$parsehoursMinutes();
				            if (s1 === peg$FAILED) {
				                s1 = null;
				            }
				            s2 = peg$parsedigit();
				            if (s2 !== peg$FAILED) {
				                s3 = peg$parsedigit();
				                if (s3 === peg$FAILED) {
				                    s3 = null;
				                }
				                s4 = peg$parsemillis();
				                if (s4 === peg$FAILED) {
				                    s4 = null;
				                }
				                peg$savedPos = s0;
				                s0 = peg$f135(s1, s2, s3, s4);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseclockValue2D() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsehoursMinutes();
				            if (s1 === peg$FAILED) {
				                s1 = null;
				            }
				            s2 = peg$parsedigit();
				            if (s2 !== peg$FAILED) {
				                s3 = peg$parsedigit();
				                if (s3 === peg$FAILED) {
				                    s3 = null;
				                }
				                peg$savedPos = s0;
				                s0 = peg$f136(s1, s2, s3);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsehoursMinutes() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            s1 = peg$parsehoursClock();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parseminutesClock();
				                if (s2 === peg$FAILED) {
				                    s2 = null;
				                }
				                peg$savedPos = s0;
				                s0 = peg$f137(s1, s2);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsehoursClock() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsedigit();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsedigit();
				                if (s2 === peg$FAILED) {
				                    s2 = null;
				                }
				                if (input.charCodeAt(peg$currPos) === 58) {
				                    s3 = peg$c141;
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e148);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f138(s1, s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parseminutesClock() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsedigit();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsedigit();
				                if (s2 === peg$FAILED) {
				                    s2 = null;
				                }
				                if (input.charCodeAt(peg$currPos) === 58) {
				                    s3 = peg$c141;
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e148);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f139(s1, s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsedigit() {
				            var s0, s1;
				            s0 = peg$currPos;
				            s1 = input.charAt(peg$currPos);
				            if (peg$r5.test(s1)) {
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e147);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f140(s1);
				            }
				            s0 = s1;
				            return s0;
				        }
				        function peg$parsevariation() {
				            var s0, s1, s2, s3, s5;
				            s0 = peg$currPos;
				            s1 = peg$parsepl();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsepgn();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parsepr();
				                    if (s3 !== peg$FAILED) {
				                        peg$parsews();
				                        s5 = peg$parsevariation();
				                        if (s5 === peg$FAILED) {
				                            s5 = null;
				                        }
				                        peg$savedPos = s0;
				                        s0 = peg$f141(s2, s5);
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsepl() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 40) {
				                s0 = peg$c173;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e183);
				                }
				            }
				            return s0;
				        }
				        function peg$parsepr() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 41) {
				                s0 = peg$c174;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e184);
				                }
				            }
				            return s0;
				        }
				        function peg$parsemoveNumber() {
				            var s0, s1, s2, s3, s4, s5, s6;
				            s0 = peg$currPos;
				            s1 = peg$parseinteger();
				            if (s1 !== peg$FAILED) {
				                s2 = [];
				                s3 = peg$parsewhiteSpace();
				                while (s3 !== peg$FAILED) {
				                    s2.push(s3);
				                    s3 = peg$parsewhiteSpace();
				                }
				                s3 = [];
				                s4 = peg$parsedot();
				                while (s4 !== peg$FAILED) {
				                    s3.push(s4);
				                    s4 = peg$parsedot();
				                }
				                s4 = [];
				                s5 = peg$parsewhiteSpace();
				                while (s5 !== peg$FAILED) {
				                    s4.push(s5);
				                    s5 = peg$parsewhiteSpace();
				                }
				                s5 = [];
				                s6 = peg$parsedot();
				                while (s6 !== peg$FAILED) {
				                    s5.push(s6);
				                    s6 = peg$parsedot();
				                }
				                peg$savedPos = s0;
				                s0 = peg$f142(s1);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsedot() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 46) {
				                s0 = peg$c140;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e146);
				                }
				            }
				            return s0;
				        }
				        function peg$parseinteger() {
				            var s0, s1, s2;
				            peg$silentFails++;
				            s0 = peg$currPos;
				            s1 = [];
				            s2 = input.charAt(peg$currPos);
				            if (peg$r5.test(s2)) {
				                peg$currPos++;
				            }
				            else {
				                s2 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e147);
				                }
				            }
				            if (s2 !== peg$FAILED) {
				                while (s2 !== peg$FAILED) {
				                    s1.push(s2);
				                    s2 = input.charAt(peg$currPos);
				                    if (peg$r5.test(s2)) {
				                        peg$currPos++;
				                    }
				                    else {
				                        s2 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e147);
				                        }
				                    }
				                }
				            }
				            else {
				                s1 = peg$FAILED;
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f143(s1);
				            }
				            s0 = s1;
				            peg$silentFails--;
				            if (s0 === peg$FAILED) {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e185);
				                }
				            }
				            return s0;
				        }
				        function peg$parsewhiteSpace() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            s1 = [];
				            if (input.charCodeAt(peg$currPos) === 32) {
				                s2 = peg$c175;
				                peg$currPos++;
				            }
				            else {
				                s2 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e186);
				                }
				            }
				            if (s2 !== peg$FAILED) {
				                while (s2 !== peg$FAILED) {
				                    s1.push(s2);
				                    if (input.charCodeAt(peg$currPos) === 32) {
				                        s2 = peg$c175;
				                        peg$currPos++;
				                    }
				                    else {
				                        s2 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e186);
				                        }
				                    }
				                }
				            }
				            else {
				                s1 = peg$FAILED;
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f144();
				            }
				            s0 = s1;
				            return s0;
				        }
				        function peg$parsehalfMove() {
				            var s0, s1, s2, s3, s4, s5, s6, s7, s8;
				            s0 = peg$currPos;
				            s1 = peg$parsefigure();
				            if (s1 === peg$FAILED) {
				                s1 = null;
				            }
				            s2 = peg$currPos;
				            peg$silentFails++;
				            s3 = peg$parsecheckdisc();
				            peg$silentFails--;
				            if (s3 !== peg$FAILED) {
				                peg$currPos = s2;
				                s2 = undefined;
				            }
				            else {
				                s2 = peg$FAILED;
				            }
				            if (s2 !== peg$FAILED) {
				                s3 = peg$parsediscriminator();
				                if (s3 !== peg$FAILED) {
				                    s4 = peg$parsestrike();
				                    if (s4 === peg$FAILED) {
				                        s4 = null;
				                    }
				                    s5 = peg$parsecolumn();
				                    if (s5 !== peg$FAILED) {
				                        s6 = peg$parserow();
				                        if (s6 !== peg$FAILED) {
				                            s7 = peg$parsepromotion();
				                            if (s7 === peg$FAILED) {
				                                s7 = null;
				                            }
				                            s8 = peg$parsecheck();
				                            if (s8 === peg$FAILED) {
				                                s8 = null;
				                            }
				                            peg$parsews();
				                            if (input.substr(peg$currPos, 4) === peg$c176) {
				                                peg$currPos += 4;
				                            }
				                            else {
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e187);
				                                }
				                            }
				                            peg$savedPos = s0;
				                            s0 = peg$f145(s1, s3, s4, s5, s6, s7, s8);
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$parsefigure();
				                if (s1 === peg$FAILED) {
				                    s1 = null;
				                }
				                s2 = peg$parsecolumn();
				                if (s2 !== peg$FAILED) {
				                    s3 = peg$parserow();
				                    if (s3 !== peg$FAILED) {
				                        s4 = peg$parsestrikeOrDash();
				                        if (s4 === peg$FAILED) {
				                            s4 = null;
				                        }
				                        s5 = peg$parsecolumn();
				                        if (s5 !== peg$FAILED) {
				                            s6 = peg$parserow();
				                            if (s6 !== peg$FAILED) {
				                                s7 = peg$parsepromotion();
				                                if (s7 === peg$FAILED) {
				                                    s7 = null;
				                                }
				                                s8 = peg$parsecheck();
				                                if (s8 === peg$FAILED) {
				                                    s8 = null;
				                                }
				                                peg$savedPos = s0;
				                                s0 = peg$f146(s1, s2, s3, s4, s5, s6, s7, s8);
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    s1 = peg$parsefigure();
				                    if (s1 === peg$FAILED) {
				                        s1 = null;
				                    }
				                    s2 = peg$parsestrike();
				                    if (s2 === peg$FAILED) {
				                        s2 = null;
				                    }
				                    s3 = peg$parsecolumn();
				                    if (s3 !== peg$FAILED) {
				                        s4 = peg$parserow();
				                        if (s4 !== peg$FAILED) {
				                            s5 = peg$parsepromotion();
				                            if (s5 === peg$FAILED) {
				                                s5 = null;
				                            }
				                            s6 = peg$parsecheck();
				                            if (s6 === peg$FAILED) {
				                                s6 = null;
				                            }
				                            peg$savedPos = s0;
				                            s0 = peg$f147(s1, s2, s3, s4, s5, s6);
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        if (input.substr(peg$currPos, 5) === peg$c177) {
				                            s1 = peg$c177;
				                            peg$currPos += 5;
				                        }
				                        else {
				                            s1 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e188);
				                            }
				                        }
				                        if (s1 !== peg$FAILED) {
				                            s2 = peg$parsecheck();
				                            if (s2 === peg$FAILED) {
				                                s2 = null;
				                            }
				                            peg$savedPos = s0;
				                            s0 = peg$f148(s2);
				                        }
				                        else {
				                            peg$currPos = s0;
				                            s0 = peg$FAILED;
				                        }
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            if (input.substr(peg$currPos, 3) === peg$c178) {
				                                s1 = peg$c178;
				                                peg$currPos += 3;
				                            }
				                            else {
				                                s1 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e189);
				                                }
				                            }
				                            if (s1 !== peg$FAILED) {
				                                s2 = peg$parsecheck();
				                                if (s2 === peg$FAILED) {
				                                    s2 = null;
				                                }
				                                peg$savedPos = s0;
				                                s0 = peg$f149(s2);
				                            }
				                            else {
				                                peg$currPos = s0;
				                                s0 = peg$FAILED;
				                            }
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$currPos;
				                                s1 = peg$parsefigure();
				                                if (s1 !== peg$FAILED) {
				                                    if (input.charCodeAt(peg$currPos) === 64) {
				                                        s2 = peg$c179;
				                                        peg$currPos++;
				                                    }
				                                    else {
				                                        s2 = peg$FAILED;
				                                        if (peg$silentFails === 0) {
				                                            peg$fail(peg$e190);
				                                        }
				                                    }
				                                    if (s2 !== peg$FAILED) {
				                                        s3 = peg$parsecolumn();
				                                        if (s3 !== peg$FAILED) {
				                                            s4 = peg$parserow();
				                                            if (s4 !== peg$FAILED) {
				                                                peg$savedPos = s0;
				                                                s0 = peg$f150(s1, s3, s4);
				                                            }
				                                            else {
				                                                peg$currPos = s0;
				                                                s0 = peg$FAILED;
				                                            }
				                                        }
				                                        else {
				                                            peg$currPos = s0;
				                                            s0 = peg$FAILED;
				                                        }
				                                    }
				                                    else {
				                                        peg$currPos = s0;
				                                        s0 = peg$FAILED;
				                                    }
				                                }
				                                else {
				                                    peg$currPos = s0;
				                                    s0 = peg$FAILED;
				                                }
				                                if (s0 === peg$FAILED) {
				                                    s0 = peg$currPos;
				                                    if (input.substr(peg$currPos, 2) === peg$c180) {
				                                        s1 = peg$c180;
				                                        peg$currPos += 2;
				                                    }
				                                    else {
				                                        s1 = peg$FAILED;
				                                        if (peg$silentFails === 0) {
				                                            peg$fail(peg$e191);
				                                        }
				                                    }
				                                    if (s1 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s1 = peg$f151();
				                                    }
				                                    s0 = s1;
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsecheck() {
				            var s0, s1, s2, s3;
				            s0 = peg$currPos;
				            s1 = peg$currPos;
				            s2 = peg$currPos;
				            peg$silentFails++;
				            if (input.substr(peg$currPos, 2) === peg$c181) {
				                s3 = peg$c181;
				                peg$currPos += 2;
				            }
				            else {
				                s3 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e192);
				                }
				            }
				            peg$silentFails--;
				            if (s3 === peg$FAILED) {
				                s2 = undefined;
				            }
				            else {
				                peg$currPos = s2;
				                s2 = peg$FAILED;
				            }
				            if (s2 !== peg$FAILED) {
				                if (input.charCodeAt(peg$currPos) === 43) {
				                    s3 = peg$c145;
				                    peg$currPos++;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e153);
				                    }
				                }
				                if (s3 !== peg$FAILED) {
				                    s2 = [s2, s3];
				                    s1 = s2;
				                }
				                else {
				                    peg$currPos = s1;
				                    s1 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s1;
				                s1 = peg$FAILED;
				            }
				            if (s1 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s1 = peg$f152(s1);
				            }
				            s0 = s1;
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                s1 = peg$currPos;
				                s2 = peg$currPos;
				                peg$silentFails++;
				                if (input.substr(peg$currPos, 3) === peg$c182) {
				                    s3 = peg$c182;
				                    peg$currPos += 3;
				                }
				                else {
				                    s3 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e193);
				                    }
				                }
				                peg$silentFails--;
				                if (s3 === peg$FAILED) {
				                    s2 = undefined;
				                }
				                else {
				                    peg$currPos = s2;
				                    s2 = peg$FAILED;
				                }
				                if (s2 !== peg$FAILED) {
				                    if (input.charCodeAt(peg$currPos) === 35) {
				                        s3 = peg$c183;
				                        peg$currPos++;
				                    }
				                    else {
				                        s3 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e194);
				                        }
				                    }
				                    if (s3 !== peg$FAILED) {
				                        s2 = [s2, s3];
				                        s1 = s2;
				                    }
				                    else {
				                        peg$currPos = s1;
				                        s1 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s1;
				                    s1 = peg$FAILED;
				                }
				                if (s1 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s1 = peg$f153(s1);
				                }
				                s0 = s1;
				            }
				            return s0;
				        }
				        function peg$parsepromotion() {
				            var s0, s2;
				            s0 = peg$currPos;
				            if (input.charCodeAt(peg$currPos) === 61) {
				                peg$currPos++;
				            }
				            else {
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e159);
				                }
				            }
				            s2 = peg$parsepromFigure();
				            if (s2 !== peg$FAILED) {
				                peg$savedPos = s0;
				                s0 = peg$f154(s2);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsenags() {
				            var s0, s1, s3;
				            s0 = peg$currPos;
				            s1 = peg$parsenag();
				            if (s1 !== peg$FAILED) {
				                peg$parsews();
				                s3 = peg$parsenags();
				                if (s3 === peg$FAILED) {
				                    s3 = null;
				                }
				                peg$savedPos = s0;
				                s0 = peg$f155(s1, s3);
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsenag() {
				            var s0, s1, s2;
				            s0 = peg$currPos;
				            if (input.charCodeAt(peg$currPos) === 36) {
				                s1 = peg$c184;
				                peg$currPos++;
				            }
				            else {
				                s1 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e195);
				                }
				            }
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parseinteger();
				                if (s2 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s0 = peg$f156(s2);
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            if (s0 === peg$FAILED) {
				                s0 = peg$currPos;
				                if (input.substr(peg$currPos, 2) === peg$c185) {
				                    s1 = peg$c185;
				                    peg$currPos += 2;
				                }
				                else {
				                    s1 = peg$FAILED;
				                    if (peg$silentFails === 0) {
				                        peg$fail(peg$e196);
				                    }
				                }
				                if (s1 !== peg$FAILED) {
				                    peg$savedPos = s0;
				                    s1 = peg$f157();
				                }
				                s0 = s1;
				                if (s0 === peg$FAILED) {
				                    s0 = peg$currPos;
				                    if (input.substr(peg$currPos, 2) === peg$c186) {
				                        s1 = peg$c186;
				                        peg$currPos += 2;
				                    }
				                    else {
				                        s1 = peg$FAILED;
				                        if (peg$silentFails === 0) {
				                            peg$fail(peg$e197);
				                        }
				                    }
				                    if (s1 !== peg$FAILED) {
				                        peg$savedPos = s0;
				                        s1 = peg$f158();
				                    }
				                    s0 = s1;
				                    if (s0 === peg$FAILED) {
				                        s0 = peg$currPos;
				                        if (input.substr(peg$currPos, 2) === peg$c187) {
				                            s1 = peg$c187;
				                            peg$currPos += 2;
				                        }
				                        else {
				                            s1 = peg$FAILED;
				                            if (peg$silentFails === 0) {
				                                peg$fail(peg$e198);
				                            }
				                        }
				                        if (s1 !== peg$FAILED) {
				                            peg$savedPos = s0;
				                            s1 = peg$f159();
				                        }
				                        s0 = s1;
				                        if (s0 === peg$FAILED) {
				                            s0 = peg$currPos;
				                            if (input.substr(peg$currPos, 2) === peg$c188) {
				                                s1 = peg$c188;
				                                peg$currPos += 2;
				                            }
				                            else {
				                                s1 = peg$FAILED;
				                                if (peg$silentFails === 0) {
				                                    peg$fail(peg$e199);
				                                }
				                            }
				                            if (s1 !== peg$FAILED) {
				                                peg$savedPos = s0;
				                                s1 = peg$f160();
				                            }
				                            s0 = s1;
				                            if (s0 === peg$FAILED) {
				                                s0 = peg$currPos;
				                                if (input.charCodeAt(peg$currPos) === 33) {
				                                    s1 = peg$c189;
				                                    peg$currPos++;
				                                }
				                                else {
				                                    s1 = peg$FAILED;
				                                    if (peg$silentFails === 0) {
				                                        peg$fail(peg$e200);
				                                    }
				                                }
				                                if (s1 !== peg$FAILED) {
				                                    peg$savedPos = s0;
				                                    s1 = peg$f161();
				                                }
				                                s0 = s1;
				                                if (s0 === peg$FAILED) {
				                                    s0 = peg$currPos;
				                                    if (input.charCodeAt(peg$currPos) === 63) {
				                                        s1 = peg$c143;
				                                        peg$currPos++;
				                                    }
				                                    else {
				                                        s1 = peg$FAILED;
				                                        if (peg$silentFails === 0) {
				                                            peg$fail(peg$e151);
				                                        }
				                                    }
				                                    if (s1 !== peg$FAILED) {
				                                        peg$savedPos = s0;
				                                        s1 = peg$f162();
				                                    }
				                                    s0 = s1;
				                                    if (s0 === peg$FAILED) {
				                                        s0 = peg$currPos;
				                                        if (input.charCodeAt(peg$currPos) === 8252) {
				                                            s1 = peg$c190;
				                                            peg$currPos++;
				                                        }
				                                        else {
				                                            s1 = peg$FAILED;
				                                            if (peg$silentFails === 0) {
				                                                peg$fail(peg$e201);
				                                            }
				                                        }
				                                        if (s1 !== peg$FAILED) {
				                                            peg$savedPos = s0;
				                                            s1 = peg$f163();
				                                        }
				                                        s0 = s1;
				                                        if (s0 === peg$FAILED) {
				                                            s0 = peg$currPos;
				                                            if (input.charCodeAt(peg$currPos) === 8263) {
				                                                s1 = peg$c191;
				                                                peg$currPos++;
				                                            }
				                                            else {
				                                                s1 = peg$FAILED;
				                                                if (peg$silentFails === 0) {
				                                                    peg$fail(peg$e202);
				                                                }
				                                            }
				                                            if (s1 !== peg$FAILED) {
				                                                peg$savedPos = s0;
				                                                s1 = peg$f164();
				                                            }
				                                            s0 = s1;
				                                            if (s0 === peg$FAILED) {
				                                                s0 = peg$currPos;
				                                                if (input.charCodeAt(peg$currPos) === 8265) {
				                                                    s1 = peg$c192;
				                                                    peg$currPos++;
				                                                }
				                                                else {
				                                                    s1 = peg$FAILED;
				                                                    if (peg$silentFails === 0) {
				                                                        peg$fail(peg$e203);
				                                                    }
				                                                }
				                                                if (s1 !== peg$FAILED) {
				                                                    peg$savedPos = s0;
				                                                    s1 = peg$f165();
				                                                }
				                                                s0 = s1;
				                                                if (s0 === peg$FAILED) {
				                                                    s0 = peg$currPos;
				                                                    if (input.charCodeAt(peg$currPos) === 8264) {
				                                                        s1 = peg$c193;
				                                                        peg$currPos++;
				                                                    }
				                                                    else {
				                                                        s1 = peg$FAILED;
				                                                        if (peg$silentFails === 0) {
				                                                            peg$fail(peg$e204);
				                                                        }
				                                                    }
				                                                    if (s1 !== peg$FAILED) {
				                                                        peg$savedPos = s0;
				                                                        s1 = peg$f166();
				                                                    }
				                                                    s0 = s1;
				                                                    if (s0 === peg$FAILED) {
				                                                        s0 = peg$currPos;
				                                                        if (input.charCodeAt(peg$currPos) === 9633) {
				                                                            s1 = peg$c194;
				                                                            peg$currPos++;
				                                                        }
				                                                        else {
				                                                            s1 = peg$FAILED;
				                                                            if (peg$silentFails === 0) {
				                                                                peg$fail(peg$e205);
				                                                            }
				                                                        }
				                                                        if (s1 !== peg$FAILED) {
				                                                            peg$savedPos = s0;
				                                                            s1 = peg$f167();
				                                                        }
				                                                        s0 = s1;
				                                                        if (s0 === peg$FAILED) {
				                                                            s0 = peg$currPos;
				                                                            if (input.charCodeAt(peg$currPos) === 61) {
				                                                                s1 = peg$c151;
				                                                                peg$currPos++;
				                                                            }
				                                                            else {
				                                                                s1 = peg$FAILED;
				                                                                if (peg$silentFails === 0) {
				                                                                    peg$fail(peg$e159);
				                                                                }
				                                                            }
				                                                            if (s1 !== peg$FAILED) {
				                                                                peg$savedPos = s0;
				                                                                s1 = peg$f168();
				                                                            }
				                                                            s0 = s1;
				                                                            if (s0 === peg$FAILED) {
				                                                                s0 = peg$currPos;
				                                                                if (input.charCodeAt(peg$currPos) === 8734) {
				                                                                    s1 = peg$c195;
				                                                                    peg$currPos++;
				                                                                }
				                                                                else {
				                                                                    s1 = peg$FAILED;
				                                                                    if (peg$silentFails === 0) {
				                                                                        peg$fail(peg$e206);
				                                                                    }
				                                                                }
				                                                                if (s1 !== peg$FAILED) {
				                                                                    peg$savedPos = s0;
				                                                                    s1 = peg$f169();
				                                                                }
				                                                                s0 = s1;
				                                                                if (s0 === peg$FAILED) {
				                                                                    s0 = peg$currPos;
				                                                                    if (input.charCodeAt(peg$currPos) === 10866) {
				                                                                        s1 = peg$c196;
				                                                                        peg$currPos++;
				                                                                    }
				                                                                    else {
				                                                                        s1 = peg$FAILED;
				                                                                        if (peg$silentFails === 0) {
				                                                                            peg$fail(peg$e207);
				                                                                        }
				                                                                    }
				                                                                    if (s1 !== peg$FAILED) {
				                                                                        peg$savedPos = s0;
				                                                                        s1 = peg$f170();
				                                                                    }
				                                                                    s0 = s1;
				                                                                    if (s0 === peg$FAILED) {
				                                                                        s0 = peg$currPos;
				                                                                        if (input.charCodeAt(peg$currPos) === 10865) {
				                                                                            s1 = peg$c197;
				                                                                            peg$currPos++;
				                                                                        }
				                                                                        else {
				                                                                            s1 = peg$FAILED;
				                                                                            if (peg$silentFails === 0) {
				                                                                                peg$fail(peg$e208);
				                                                                            }
				                                                                        }
				                                                                        if (s1 !== peg$FAILED) {
				                                                                            peg$savedPos = s0;
				                                                                            s1 = peg$f171();
				                                                                        }
				                                                                        s0 = s1;
				                                                                        if (s0 === peg$FAILED) {
				                                                                            s0 = peg$currPos;
				                                                                            if (input.charCodeAt(peg$currPos) === 177) {
				                                                                                s1 = peg$c198;
				                                                                                peg$currPos++;
				                                                                            }
				                                                                            else {
				                                                                                s1 = peg$FAILED;
				                                                                                if (peg$silentFails === 0) {
				                                                                                    peg$fail(peg$e209);
				                                                                                }
				                                                                            }
				                                                                            if (s1 !== peg$FAILED) {
				                                                                                peg$savedPos = s0;
				                                                                                s1 = peg$f172();
				                                                                            }
				                                                                            s0 = s1;
				                                                                            if (s0 === peg$FAILED) {
				                                                                                s0 = peg$currPos;
				                                                                                if (input.charCodeAt(peg$currPos) === 8723) {
				                                                                                    s1 = peg$c199;
				                                                                                    peg$currPos++;
				                                                                                }
				                                                                                else {
				                                                                                    s1 = peg$FAILED;
				                                                                                    if (peg$silentFails === 0) {
				                                                                                        peg$fail(peg$e210);
				                                                                                    }
				                                                                                }
				                                                                                if (s1 !== peg$FAILED) {
				                                                                                    peg$savedPos = s0;
				                                                                                    s1 = peg$f173();
				                                                                                }
				                                                                                s0 = s1;
				                                                                                if (s0 === peg$FAILED) {
				                                                                                    s0 = peg$currPos;
				                                                                                    if (input.substr(peg$currPos, 2) === peg$c181) {
				                                                                                        s1 = peg$c181;
				                                                                                        peg$currPos += 2;
				                                                                                    }
				                                                                                    else {
				                                                                                        s1 = peg$FAILED;
				                                                                                        if (peg$silentFails === 0) {
				                                                                                            peg$fail(peg$e192);
				                                                                                        }
				                                                                                    }
				                                                                                    if (s1 !== peg$FAILED) {
				                                                                                        peg$savedPos = s0;
				                                                                                        s1 = peg$f174();
				                                                                                    }
				                                                                                    s0 = s1;
				                                                                                    if (s0 === peg$FAILED) {
				                                                                                        s0 = peg$currPos;
				                                                                                        if (input.substr(peg$currPos, 2) === peg$c200) {
				                                                                                            s1 = peg$c200;
				                                                                                            peg$currPos += 2;
				                                                                                        }
				                                                                                        else {
				                                                                                            s1 = peg$FAILED;
				                                                                                            if (peg$silentFails === 0) {
				                                                                                                peg$fail(peg$e211);
				                                                                                            }
				                                                                                        }
				                                                                                        if (s1 !== peg$FAILED) {
				                                                                                            peg$savedPos = s0;
				                                                                                            s1 = peg$f175();
				                                                                                        }
				                                                                                        s0 = s1;
				                                                                                        if (s0 === peg$FAILED) {
				                                                                                            s0 = peg$currPos;
				                                                                                            if (input.charCodeAt(peg$currPos) === 10752) {
				                                                                                                s1 = peg$c201;
				                                                                                                peg$currPos++;
				                                                                                            }
				                                                                                            else {
				                                                                                                s1 = peg$FAILED;
				                                                                                                if (peg$silentFails === 0) {
				                                                                                                    peg$fail(peg$e212);
				                                                                                                }
				                                                                                            }
				                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                peg$savedPos = s0;
				                                                                                                s1 = peg$f176();
				                                                                                            }
				                                                                                            s0 = s1;
				                                                                                            if (s0 === peg$FAILED) {
				                                                                                                s0 = peg$currPos;
				                                                                                                if (input.charCodeAt(peg$currPos) === 10227) {
				                                                                                                    s1 = peg$c202;
				                                                                                                    peg$currPos++;
				                                                                                                }
				                                                                                                else {
				                                                                                                    s1 = peg$FAILED;
				                                                                                                    if (peg$silentFails === 0) {
				                                                                                                        peg$fail(peg$e213);
				                                                                                                    }
				                                                                                                }
				                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                    peg$savedPos = s0;
				                                                                                                    s1 = peg$f177();
				                                                                                                }
				                                                                                                s0 = s1;
				                                                                                                if (s0 === peg$FAILED) {
				                                                                                                    s0 = peg$currPos;
				                                                                                                    if (input.charCodeAt(peg$currPos) === 8594) {
				                                                                                                        s1 = peg$c203;
				                                                                                                        peg$currPos++;
				                                                                                                    }
				                                                                                                    else {
				                                                                                                        s1 = peg$FAILED;
				                                                                                                        if (peg$silentFails === 0) {
				                                                                                                            peg$fail(peg$e214);
				                                                                                                        }
				                                                                                                    }
				                                                                                                    if (s1 !== peg$FAILED) {
				                                                                                                        peg$savedPos = s0;
				                                                                                                        s1 = peg$f178();
				                                                                                                    }
				                                                                                                    s0 = s1;
				                                                                                                    if (s0 === peg$FAILED) {
				                                                                                                        s0 = peg$currPos;
				                                                                                                        if (input.charCodeAt(peg$currPos) === 8593) {
				                                                                                                            s1 = peg$c204;
				                                                                                                            peg$currPos++;
				                                                                                                        }
				                                                                                                        else {
				                                                                                                            s1 = peg$FAILED;
				                                                                                                            if (peg$silentFails === 0) {
				                                                                                                                peg$fail(peg$e215);
				                                                                                                            }
				                                                                                                        }
				                                                                                                        if (s1 !== peg$FAILED) {
				                                                                                                            peg$savedPos = s0;
				                                                                                                            s1 = peg$f179();
				                                                                                                        }
				                                                                                                        s0 = s1;
				                                                                                                        if (s0 === peg$FAILED) {
				                                                                                                            s0 = peg$currPos;
				                                                                                                            if (input.charCodeAt(peg$currPos) === 8646) {
				                                                                                                                s1 = peg$c205;
				                                                                                                                peg$currPos++;
				                                                                                                            }
				                                                                                                            else {
				                                                                                                                s1 = peg$FAILED;
				                                                                                                                if (peg$silentFails === 0) {
				                                                                                                                    peg$fail(peg$e216);
				                                                                                                                }
				                                                                                                            }
				                                                                                                            if (s1 !== peg$FAILED) {
				                                                                                                                peg$savedPos = s0;
				                                                                                                                s1 = peg$f180();
				                                                                                                            }
				                                                                                                            s0 = s1;
				                                                                                                            if (s0 === peg$FAILED) {
				                                                                                                                s0 = peg$currPos;
				                                                                                                                if (input.charCodeAt(peg$currPos) === 68) {
				                                                                                                                    s1 = peg$c206;
				                                                                                                                    peg$currPos++;
				                                                                                                                }
				                                                                                                                else {
				                                                                                                                    s1 = peg$FAILED;
				                                                                                                                    if (peg$silentFails === 0) {
				                                                                                                                        peg$fail(peg$e217);
				                                                                                                                    }
				                                                                                                                }
				                                                                                                                if (s1 !== peg$FAILED) {
				                                                                                                                    peg$savedPos = s0;
				                                                                                                                    s1 = peg$f181();
				                                                                                                                }
				                                                                                                                s0 = s1;
				                                                                                                            }
				                                                                                                        }
				                                                                                                    }
				                                                                                                }
				                                                                                            }
				                                                                                        }
				                                                                                    }
				                                                                                }
				                                                                            }
				                                                                        }
				                                                                    }
				                                                                }
				                                                            }
				                                                        }
				                                                    }
				                                                }
				                                            }
				                                        }
				                                    }
				                                }
				                            }
				                        }
				                    }
				                }
				            }
				            return s0;
				        }
				        function peg$parsediscriminator() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r8.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e218);
				                }
				            }
				            return s0;
				        }
				        function peg$parsecheckdisc() {
				            var s0, s1, s2, s3, s4;
				            s0 = peg$currPos;
				            s1 = peg$parsediscriminator();
				            if (s1 !== peg$FAILED) {
				                s2 = peg$parsestrike();
				                if (s2 === peg$FAILED) {
				                    s2 = null;
				                }
				                s3 = peg$parsecolumn();
				                if (s3 !== peg$FAILED) {
				                    s4 = peg$parserow();
				                    if (s4 !== peg$FAILED) {
				                        s1 = [s1, s2, s3, s4];
				                        s0 = s1;
				                    }
				                    else {
				                        peg$currPos = s0;
				                        s0 = peg$FAILED;
				                    }
				                }
				                else {
				                    peg$currPos = s0;
				                    s0 = peg$FAILED;
				                }
				            }
				            else {
				                peg$currPos = s0;
				                s0 = peg$FAILED;
				            }
				            return s0;
				        }
				        function peg$parsefigure() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r9.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e219);
				                }
				            }
				            return s0;
				        }
				        function peg$parsepromFigure() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r10.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e220);
				                }
				            }
				            return s0;
				        }
				        function peg$parsecolumn() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r11.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e221);
				                }
				            }
				            return s0;
				        }
				        function peg$parserow() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r12.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e222);
				                }
				            }
				            return s0;
				        }
				        function peg$parsestrike() {
				            var s0;
				            if (input.charCodeAt(peg$currPos) === 120) {
				                s0 = peg$c207;
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e223);
				                }
				            }
				            return s0;
				        }
				        function peg$parsestrikeOrDash() {
				            var s0;
				            s0 = input.charAt(peg$currPos);
				            if (peg$r13.test(s0)) {
				                peg$currPos++;
				            }
				            else {
				                s0 = peg$FAILED;
				                if (peg$silentFails === 0) {
				                    peg$fail(peg$e224);
				                }
				            }
				            return s0;
				        }
				        var messages = [];
				        function addMessage(json) {
				            var o = Object.assign(json, location());
				            messages.push(o);
				            return o;
				        }
				        function makeInteger(o) {
				            return parseInt(o.join(""), 10);
				        }
				        function mi(o) {
				            return o.join("").match(/\?/) ? o.join("") : makeInteger(o);
				        }
				        function merge(array) {
				            var ret = {};
				            // return array
				            array.forEach(function (json) {
				                for (var key in json) {
				                    if (Array.isArray(json[key])) {
				                        ret[key] = ret[key] ? ret[key].concat(json[key]) : json[key];
				                    }
				                    else {
				                        ret[key] = ret[key] ? trimEnd(ret[key]) + " " + trimStart(json[key]) : json[key];
				                    }
				                }
				            });
				            return ret;
				        }
				        function trimStart(st) {
				            if (typeof st !== "string")
				                return st;
				            var r = /^\s+/;
				            return st.replace(r, '');
				        }
				        function trimEnd(st) {
				            if (typeof st !== "string")
				                return st;
				            var r = /\s+$/;
				            return st.replace(r, '');
				        }
				        peg$result = peg$startRuleFunction();
				        if (options.peg$library) {
				            return /** @type {any} */ ({
				                peg$result,
				                peg$currPos,
				                peg$FAILED,
				                peg$maxFailExpected,
				                peg$maxFailPos
				            });
				        }
				        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
				            return peg$result;
				        }
				        else {
				            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
				                peg$fail(peg$endExpectation());
				            }
				            throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
				                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
				                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
				        }
				    }
				    return {
				        StartRules: ["pgn", "tags", "game", "games"],
				        SyntaxError: peg$SyntaxError,
				        parse: peg$parse
				    };
				}); 
			} (_pgnParser));

			var _pgnParserExports = _pgnParser.exports;
			var PegParser = /*@__PURE__*/getDefaultExportFromCjs(_pgnParserExports);

			// import PegParser = require("./_pgn-parser")
			// import * as PegParser from './_pgn-parser'
			/**
			 * General parse function, that accepts all `startRule`s. Calls then the more specific ones, so that the
			 * postParse processing can now rely on the same structure all the time.
			 * @param input - the PGN string that will be parsed according to the `startRule` given
			 * @param options - the parameters that have to include the `startRule`
			 * @returns a ParseTree or an array of ParseTrees, depending on the startRule
			 */
			function parse(input, options) {
			    if (!options || (options.startRule === 'games')) {
			        return parseGames(input, options);
			    }
			    else {
			        return parseGame(input, options);
			    }
			}
			/**
			 * Special parse function to parse one game only, options may be omitted.
			 * @param input - the PGN string that will be parsed
			 * @param options - object with additional parameters (not used at the moment)
			 * @returns a ParseTree with the defined structure
			 */
			function parseGame(input, options = { startRule: "game" }) {
			    input = input.trim();
			    // Ensure that the correct structure exists: { tags: xxx, moves: ... }
			    let result = PegParser.parse(input, options);
			    let res2 = { moves: [], messages: [] };
			    if (options.startRule === "pgn") {
			        res2.moves = result;
			    }
			    else if (options.startRule === "tags") {
			        res2.tags = result;
			    }
			    else {
			        res2 = result;
			    }
			    return postParseGame(res2, input, options);
			}
			function postParseGame(_parseTree, _input, _options) {
			    /** Ensure that the result is kept as tag only, so no check of last move is necessary any more. */
			    function handleGameResult(parseTree) {
			        if (_options.startRule !== 'tags') {
			            let move = parseTree.moves[parseTree.moves.length - 1];
			            if (typeof move == 'string') {
			                parseTree.moves.pop();
			                if (parseTree.tags) {
			                    let tmp = parseTree.tags["Result"];
			                    if (tmp) {
			                        if (move !== tmp) {
			                            parseTree.messages.push({ key: "Result", value: tmp, message: "Result in tags is different to result in SAN" });
			                        }
			                    }
			                    parseTree.tags["Result"] = move;
			                }
			            }
			        }
			        return parseTree;
			    }
			    function handleTurn(parseResult) {
			        function handleTurnGame(_game) {
			            function getTurnFromFEN(fen) {
			                return fen.split(/\s+/)[1];
			            }
			            function setTurn(_move, _currentTurn) {
			                function switchTurn(currentTurn) {
			                    return currentTurn === 'w' ? 'b' : 'w';
			                }
			                _move.turn = _currentTurn;
			                if (_move.variations) {
			                    _move.variations.forEach(function (variation) {
			                        let varTurn = _currentTurn;
			                        variation.forEach(varMove => varTurn = setTurn(varMove, varTurn));
			                    });
			                }
			                return switchTurn(_currentTurn);
			            }
			            const START = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';
			            let fen = _options.fen || (_game.tags && _game.tags['FEN']) || START;
			            let currentTurn = getTurnFromFEN(fen);
			            _game.moves.forEach(move => currentTurn = setTurn(move, currentTurn));
			            return _game;
			        }
			        if (!parseResult.moves) {
			            return parseResult;
			        }
			        return handleTurnGame(parseResult);
			    }
			    return handleTurn(handleGameResult(_parseTree));
			}
			/**
			 * Parses possibly more than one game, therefore returns an array of ParseTree.
			 * @param input the PGN string to parse
			 * @param options the optional parameters (not used at the moment)
			 * @returns an array of ParseTrees, one for each game included
			 */
			function parseGames(input, options = { startRule: "games" }) {
			    function handleGamesAnomaly(parseTree) {
			        if (!Array.isArray(parseTree))
			            return [];
			        if (parseTree.length === 0)
			            return parseTree;
			        let last = parseTree.pop();
			        if ((last.tags !== undefined) || (last.moves.length > 0)) {
			            parseTree.push(last);
			        }
			        return parseTree;
			    }
			    function postParseGames(parseTrees, input, options = { startRule: "games" }) {
			        return handleGamesAnomaly(parseTrees);
			    }
			    const gamesOptions = Object.assign({ startRule: "games" }, options);
			    let result = PegParser.parse(input, gamesOptions);
			    if (!result) {
			        return [];
			    }
			    postParseGames(result, input, gamesOptions);
			    result.forEach((pt) => {
			        postParseGame(pt, input, gamesOptions);
			    });
			    return result;
			}
			// export { SyntaxError }

			const normalizeLineEndings = (str, normalized = '\n') => str.replace(/\r?\n/g, normalized);
			/**
			 * Returns an array of SplitGames, which are objects that may contain tags and / or pgn strings.
			 * The split function expects well formed export format strings (see [8.1 Tag pair section](https://github.com/mliebelt/pgn-spec-commented/blob/main/pgn-specification.md#81-tag-pair-section), statement "a single empty line follows the last tag pair"). So the split function only works when tags are separated from pgn string by an empty line, and the next game is separated by at least one empty line as well.
			 * @param input - the PGN string that may contain multiple games
			 * @param options - not used at the moment
			 * @returns an array of SplitGame to be parsed later
			 */
			function split(input, options = { startRule: "games" }) {
			    // let result = parser.parse(input, options)
			    let result = normalizeLineEndings(input).split(/\n\n+/);
			    let res = [];
			    let g = { tags: '', pgn: '', all: '' };
			    result.forEach(function (part) {
			        if (part.startsWith('[')) {
			            g.tags = part;
			        }
			        else if (part) {
			            g.pgn = part;
			            let game = g.tags ? g.tags + "\n\n" + g.pgn : g.pgn;
			            g.all = game;
			            res.push(g);
			            g = { tags: '', pgn: '', all: '' };
			        }
			    });
			    return res;
			}

			exports.parse = parse;
			exports.parseGame = parseGame;
			exports.parseGames = parseGames;
			exports.split = split;

		})); 
	} (index_umd$2, index_umd$2.exports));

	var index_umdExports$2 = index_umd$2.exports;

	var index_umd$1 = {exports: {}};

	(function (module, exports) {
		(function (global, factory) {
		    factory(exports) ;
		})(commonjsGlobal, (function (exports) {
		    const writeGame = function (game, configuration = {}) {
		        return writePgn(game, configuration);
		    };
		    /**
		     * Writes the pgn (fully) of the current game. The algorithm goes like that:
		     * * Start with the first move (there has to be only one in the main line)
		     * * For each move (call that recursively)
		     * * print-out the move itself
		     * * then the variations (one by one)
		     * * then the next move of the main line
		     * @return the string of all moves
		     */
		    const writePgn = function (game, configuration) {
		        function getGameComment(game) {
		            return game.gameComment ? game.gameComment.comment : undefined;
		        }
		        const startVariation = function (move) {
		            return move.variationLevel !== undefined && move.variationLevel > 0 &&
		                ((typeof move.prev != "number") || (game.moves[move.prev].next !== move.index));
		        };
		        const firstMove = function (move) {
		            return typeof move.prev != "number";
		        };
		        const getMove = function (index) {
		            return game.moves[index];
		        };
		        // Prepend a space if necessary
		        function prependSpace(sb) {
		            if ((!sb.isEmpty()) && (sb.lastChar() !== " ") && (sb.lastChar() !== "\n")) {
		                sb.append(" ");
		            }
		        }
		        const writeComment = function (comment, sb) {
		            if (comment === undefined || comment === null) {
		                return;
		            }
		            prependSpace(sb);
		            sb.append("{");
		            sb.append(comment);
		            sb.append("}");
		        };
		        const writeGameComment = function (game, sb) {
		            writeComment(getGameComment(game), sb);
		        };
		        const writeCommentMove = function (move, sb) {
		            writeComment(move.commentMove, sb);
		        };
		        const writeCommentAfter = function (move, sb) {
		            writeComment(move.commentAfter, sb);
		        };
		        const writeCommentDiag = function (move, sb) {
		            let has_diags = (move) => {
		                return move.commentDiag &&
		                    ((move.commentDiag.colorArrows && move.commentDiag.colorArrows.length > 0) ||
		                        (move.commentDiag.colorFields && move.commentDiag.colorFields.length > 0));
		            };
		            let arrows = (move) => { return move.commentDiag.colorArrows || []; };
		            let fields = (move) => { return move.commentDiag.colorFields || []; };
		            if (has_diags(move)) {
		                let sbdiags = new StringBuilder();
		                let first = true;
		                sbdiags.append("[%csl ");
		                fields(move).forEach((field) => {
		                    !first ? sbdiags.append(",") : sbdiags.append("");
		                    first = false;
		                    sbdiags.append(field);
		                });
		                sbdiags.append("]");
		                first = true;
		                sbdiags.append("[%cal ");
		                arrows(move).forEach((arrow) => {
		                    !first ? sbdiags.append(",") : sbdiags.append("");
		                    first = false;
		                    sbdiags.append(arrow);
		                });
		                sbdiags.append("]");
		                writeComment(sbdiags.toString(), sb);
		            }
		        };
		        const writeMoveNumber = function (move, sb) {
		            prependSpace(sb);
		            if (move.turn === "w") {
		                sb.append("" + move.moveNumber);
		                sb.append(".");
		            }
		            else if (firstMove(move) || startVariation(move)) {
		                sb.append("" + move.moveNumber);
		                sb.append("...");
		            }
		        };
		        const writeNotation = function (move, sb) {
		            function san(move) {
		                function getFig(fig) {
		                    if (fig === 'P') {
		                        return '';
		                    }
		                    return fig;
		                }
		                let notation = move.notation;
		                if (notation.notation && configuration.notation != 'long') { // notation is filled, no need to try to compute it again
		                    return notation.notation; // move like O-O and O-O-O
		                }
		                const fig = notation.fig ? getFig(notation.fig) : '';
		                let disc = notation.disc ? notation.disc : '';
		                const strike = notation.strike ? notation.strike : '';
		                // Pawn moves with capture need the col as "discriminator"
		                if (strike && !fig) { // Pawn capture
		                    disc = move.from.substring(0, 1);
		                }
		                const check = notation.check ? notation.check : '';
		                const prom = notation.promotion ? '=' + getFig(notation.promotion.substring(1, 2)) : '';
		                if (configuration.notation === 'long') {
		                    return fig + move.from + (notation.strike ? strike : '-') + move.to + prom + check;
		                }
		                return fig + disc + strike + notation.col + notation.row + prom + check;
		            }
		            prependSpace(sb);
		            sb.append(san(move));
		        };
		        const writeNAGs = function (move, sb) {
		            if (move.nag) {
		                move.nag.forEach(function (ele) {
		                    sb.append(ele);
		                });
		            }
		        };
		        const writeVariation = function (move, sb) {
		            prependSpace(sb);
		            sb.append("(");
		            writeMove(move, sb);
		            prependSpace(sb);
		            sb.append(")");
		        };
		        const writeVariations = function (move, sb) {
		            for (let i = 0; i < move.variations.length; i++) {
		                writeVariation(move.variations[i], sb);
		            }
		        };
		        const getNextMove = function (move) {
		            return move.next ? getMove(move.next) : null;
		        };
		        /**
		         * Write the normalised notation: comment move, move number (if necessary),
		         * comment before, move, NAGs, comment after, variations.
		         * Then go into recursion for the next move.
		         * @param move the move in the exploded format
		         * @param sb the string builder to use
		         */
		        const writeMove = function (move, sb) {
		            if (move === null || move === undefined) {
		                return;
		            }
		            writeCommentMove(move, sb);
		            writeMoveNumber(move, sb);
		            writeNotation(move, sb);
		            //write_check_or_mate(move, sb)    // not necessary if san from chess.src is used
		            writeNAGs(move, sb);
		            writeCommentAfter(move, sb);
		            writeCommentDiag(move, sb);
		            writeVariations(move, sb);
		            const next = getNextMove(move);
		            writeMove(next, sb);
		        };
		        const writeEndGame = function (game, sb) {
		            if ((game.tags !== undefined) && ('Result' in game.tags)) {
		                prependSpace(sb);
		                sb.append(game.tags['Result']);
		            }
		        };
		        function writeTags(game, sb) {
		            function writeTag(key, value, _sb) {
		                if (value) {
		                    let _v;
		                    if (typeof value === "string") {
		                        if (value.length > 0) {
		                            _v = value;
		                        }
		                        else {
		                            return;
		                        }
		                    }
		                    else if (typeof value === "object") {
		                        _v = value.value;
		                    }
		                    else {
		                        _v = value;
		                    }
		                    _sb.append('[').append(key).append(' ').append('"').append(_v).append('"').append("]\n");
		                }
		            }
		            function consumeTag(key, tags, _sb) {
		                writeTag(key, tags.get(key), _sb);
		                tags.delete(key);
		            }
		            if (configuration.tags && (configuration.tags == "no")) {
		                return;
		            }
		            if ((game.tags) && (Object.keys(game.tags).length)) {
		                let _tags = new Map(Object.entries(game.tags));
		                _tags.delete("messages"); // workaround for internal working of pgn-parser
		                "Event Site Date Round White Black Result".split(' ').forEach(value => consumeTag(value, _tags, sb));
		                _tags.forEach(function (value, key) {
		                    writeTag(key, value, sb);
		                });
		                sb.append("\n");
		            }
		        }
		        const writePgn2 = function (game, move, sb) {
		            writeTags(game, sb);
		            writeGameComment(game, sb);
		            writeMove(move, sb);
		            writeEndGame(game, sb);
		            return sb.toString();
		        };
		        const sb = new StringBuilder();
		        let indexFirstMove = 0;
		        return writePgn2(game, getMove(indexFirstMove), sb);
		    };
		    // Initializes a new instance of the StringBuilder class
		    // and appends the given value if supplied
		    class StringBuilder {
		        strings = new Array("");
		        constructor(value = "") {
		            this.append(value);
		        }
		        // Appends the given value to the end of this instance.
		        append(value) {
		            if (!value) {
		                return this;
		            }
		            if (typeof value === "string") {
		                this.strings.push(value);
		            }
		            else {
		                this.strings.push(value.toString());
		            }
		            return this;
		        }
		        // Return true if the receiver is empty. Don't compute length!!
		        isEmpty() {
		            for (let i = 0; i < this.strings.length; i++) {
		                if (this.strings[i].length > 0) {
		                    return false;
		                }
		            }
		            return true;
		        }
		        // Return the last character (as string) of the receiver.
		        // Return null if none is found
		        lastChar() {
		            if (this.strings.length === 0) {
		                return null;
		            }
		            return this.strings[this.strings.length - 1].slice(-1);
		        }
		        // Converts this instance to a String.
		        toString() {
		            return this.strings.join("");
		        }
		    }

		    const PROMOTIONS = {
		        'q': 'queen',
		        'r': 'rook',
		        'b': 'bishop',
		        'n': 'knight'
		    };
		    const prom_short = ['q', 'r', 'b', 'n'];
		    const colors = ['white', 'black'];
		    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
		    const ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];

		    exports.PROMOTIONS = PROMOTIONS;
		    exports.StringBuilder = StringBuilder;
		    exports.colors = colors;
		    exports.files = files;
		    exports.prom_short = prom_short;
		    exports.ranks = ranks;
		    exports.writeGame = writeGame;

		    Object.defineProperty(exports, '__esModule', { value: true });

		})); 
	} (index_umd$1, index_umd$1.exports));

	var index_umdExports$1 = index_umd$1.exports;

	var chess = {};

	/*
	 * Copyright (c) 2021, Jeff Hlywa (jhlywa@gmail.com)
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 *    this list of conditions and the following disclaimer.
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 *    this list of conditions and the following disclaimer in the documentation
	 *    and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 *
	 *----------------------------------------------------------------------------*/

	(function (exports) {
		var Chess = function (fen) {
		  var BLACK = 'b';
		  var WHITE = 'w';

		  var EMPTY = -1;

		  var PAWN = 'p';
		  var KNIGHT = 'n';
		  var BISHOP = 'b';
		  var ROOK = 'r';
		  var QUEEN = 'q';
		  var KING = 'k';

		  var SYMBOLS = 'pnbrqkPNBRQK';

		  var DEFAULT_POSITION =
		    'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';

		  var TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];

		  var PAWN_OFFSETS = {
		    b: [16, 32, 17, 15],
		    w: [-16, -32, -17, -15],
		  };

		  var PIECE_OFFSETS = {
		    n: [-18, -33, -31, -14, 18, 33, 31, 14],
		    b: [-17, -15, 17, 15],
		    r: [-16, 1, 16, -1],
		    q: [-17, -16, -15, 1, 17, 16, 15, -1],
		    k: [-17, -16, -15, 1, 17, 16, 15, -1],
		  };

		  // prettier-ignore
		  var ATTACKS = [
		    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,
		     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,
		     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,
		     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,
		     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,
		     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,
		     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,
		    24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,
		     0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,
		     0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,
		     0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,
		     0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,
		     0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,
		     0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,
		    20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20
		  ];

		  // prettier-ignore
		  var RAYS = [
		     17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,
		      0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,
		      0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,
		      0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,
		      0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,
		      0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,
		      0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,
		      1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,
		      0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,
		      0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,
		      0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,
		      0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,
		      0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,
		      0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,
		    -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17
		  ];

		  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };

		  var FLAGS = {
		    NORMAL: 'n',
		    CAPTURE: 'c',
		    BIG_PAWN: 'b',
		    EP_CAPTURE: 'e',
		    PROMOTION: 'p',
		    KSIDE_CASTLE: 'k',
		    QSIDE_CASTLE: 'q',
		  };

		  var BITS = {
		    NORMAL: 1,
		    CAPTURE: 2,
		    BIG_PAWN: 4,
		    EP_CAPTURE: 8,
		    PROMOTION: 16,
		    KSIDE_CASTLE: 32,
		    QSIDE_CASTLE: 64,
		  };

		  var RANK_1 = 7;
		  var RANK_2 = 6;
		  var RANK_7 = 1;
		  var RANK_8 = 0;

		  // prettier-ignore
		  var SQUARES = {
		    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,
		    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,
		    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,
		    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,
		    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,
		    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,
		    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,
		    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119
		  };

		  var ROOKS = {
		    w: [
		      { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },
		      { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE },
		    ],
		    b: [
		      { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },
		      { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE },
		    ],
		  };

		  var board = new Array(128);
		  var kings = { w: EMPTY, b: EMPTY };
		  var turn = WHITE;
		  var castling = { w: 0, b: 0 };
		  var ep_square = EMPTY;
		  var half_moves = 0;
		  var move_number = 1;
		  var history = [];
		  var header = {};
		  var comments = {};

		  /* if the user passes in a fen string, load it, else default to
		   * starting position
		   */
		  if (typeof fen === 'undefined') {
		    load(DEFAULT_POSITION);
		  } else {
		    load(fen);
		  }

		  function clear(keep_headers) {
		    if (typeof keep_headers === 'undefined') {
		      keep_headers = false;
		    }

		    board = new Array(128);
		    kings = { w: EMPTY, b: EMPTY };
		    turn = WHITE;
		    castling = { w: 0, b: 0 };
		    ep_square = EMPTY;
		    half_moves = 0;
		    move_number = 1;
		    history = [];
		    if (!keep_headers) header = {};
		    comments = {};
		    update_setup(generate_fen());
		  }

		  function prune_comments() {
		    var reversed_history = [];
		    var current_comments = {};
		    var copy_comment = function (fen) {
		      if (fen in comments) {
		        current_comments[fen] = comments[fen];
		      }
		    };
		    while (history.length > 0) {
		      reversed_history.push(undo_move());
		    }
		    copy_comment(generate_fen());
		    while (reversed_history.length > 0) {
		      make_move(reversed_history.pop());
		      copy_comment(generate_fen());
		    }
		    comments = current_comments;
		  }

		  function reset() {
		    load(DEFAULT_POSITION);
		  }

		  function load(fen, keep_headers) {
		    if (typeof keep_headers === 'undefined') {
		      keep_headers = false;
		    }

		    var tokens = fen.split(/\s+/);
		    var position = tokens[0];
		    var square = 0;

		    if (!validate_fen(fen).valid) {
		      return false
		    }

		    clear(keep_headers);

		    for (var i = 0; i < position.length; i++) {
		      var piece = position.charAt(i);

		      if (piece === '/') {
		        square += 8;
		      } else if (is_digit(piece)) {
		        square += parseInt(piece, 10);
		      } else {
		        var color = piece < 'a' ? WHITE : BLACK;
		        put({ type: piece.toLowerCase(), color: color }, algebraic(square));
		        square++;
		      }
		    }

		    turn = tokens[1];

		    if (tokens[2].indexOf('K') > -1) {
		      castling.w |= BITS.KSIDE_CASTLE;
		    }
		    if (tokens[2].indexOf('Q') > -1) {
		      castling.w |= BITS.QSIDE_CASTLE;
		    }
		    if (tokens[2].indexOf('k') > -1) {
		      castling.b |= BITS.KSIDE_CASTLE;
		    }
		    if (tokens[2].indexOf('q') > -1) {
		      castling.b |= BITS.QSIDE_CASTLE;
		    }

		    ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]];
		    half_moves = parseInt(tokens[4], 10);
		    move_number = parseInt(tokens[5], 10);

		    update_setup(generate_fen());

		    return true
		  }

		  /* TODO: this function is pretty much crap - it validates structure but
		   * completely ignores content (e.g. doesn't verify that each side has a king)
		   * ... we should rewrite this, and ditch the silly error_number field while
		   * we're at it
		   */
		  function validate_fen(fen) {
		    var errors = {
		      0: 'No errors.',
		      1: 'FEN string must contain six space-delimited fields.',
		      2: '6th field (move number) must be a positive integer.',
		      3: '5th field (half move counter) must be a non-negative integer.',
		      4: '4th field (en-passant square) is invalid.',
		      5: '3rd field (castling availability) is invalid.',
		      6: '2nd field (side to move) is invalid.',
		      7: "1st field (piece positions) does not contain 8 '/'-delimited rows.",
		      8: '1st field (piece positions) is invalid [consecutive numbers].',
		      9: '1st field (piece positions) is invalid [invalid piece].',
		      10: '1st field (piece positions) is invalid [row too large].',
		      11: 'Illegal en-passant square',
		    };

		    /* 1st criterion: 6 space-seperated fields? */
		    var tokens = fen.split(/\s+/);
		    if (tokens.length !== 6) {
		      return { valid: false, error_number: 1, error: errors[1] }
		    }

		    /* 2nd criterion: move number field is a integer value > 0? */
		    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {
		      return { valid: false, error_number: 2, error: errors[2] }
		    }

		    /* 3rd criterion: half move counter is an integer >= 0? */
		    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {
		      return { valid: false, error_number: 3, error: errors[3] }
		    }

		    /* 4th criterion: 4th field is a valid e.p.-string? */
		    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {
		      return { valid: false, error_number: 4, error: errors[4] }
		    }

		    /* 5th criterion: 3th field is a valid castle-string? */
		    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {
		      return { valid: false, error_number: 5, error: errors[5] }
		    }

		    /* 6th criterion: 2nd field is "w" (white) or "b" (black)? */
		    if (!/^(w|b)$/.test(tokens[1])) {
		      return { valid: false, error_number: 6, error: errors[6] }
		    }

		    /* 7th criterion: 1st field contains 8 rows? */
		    var rows = tokens[0].split('/');
		    if (rows.length !== 8) {
		      return { valid: false, error_number: 7, error: errors[7] }
		    }

		    /* 8th criterion: every row is valid? */
		    for (var i = 0; i < rows.length; i++) {
		      /* check for right sum of fields AND not two numbers in succession */
		      var sum_fields = 0;
		      var previous_was_number = false;

		      for (var k = 0; k < rows[i].length; k++) {
		        if (!isNaN(rows[i][k])) {
		          if (previous_was_number) {
		            return { valid: false, error_number: 8, error: errors[8] }
		          }
		          sum_fields += parseInt(rows[i][k], 10);
		          previous_was_number = true;
		        } else {
		          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {
		            return { valid: false, error_number: 9, error: errors[9] }
		          }
		          sum_fields += 1;
		          previous_was_number = false;
		        }
		      }
		      if (sum_fields !== 8) {
		        return { valid: false, error_number: 10, error: errors[10] }
		      }
		    }

		    if (
		      (tokens[3][1] == '3' && tokens[1] == 'w') ||
		      (tokens[3][1] == '6' && tokens[1] == 'b')
		    ) {
		      return { valid: false, error_number: 11, error: errors[11] }
		    }

		    /* everything's okay! */
		    return { valid: true, error_number: 0, error: errors[0] }
		  }

		  function generate_fen() {
		    var empty = 0;
		    var fen = '';

		    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {
		      if (board[i] == null) {
		        empty++;
		      } else {
		        if (empty > 0) {
		          fen += empty;
		          empty = 0;
		        }
		        var color = board[i].color;
		        var piece = board[i].type;

		        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();
		      }

		      if ((i + 1) & 0x88) {
		        if (empty > 0) {
		          fen += empty;
		        }

		        if (i !== SQUARES.h1) {
		          fen += '/';
		        }

		        empty = 0;
		        i += 8;
		      }
		    }

		    var cflags = '';
		    if (castling[WHITE] & BITS.KSIDE_CASTLE) {
		      cflags += 'K';
		    }
		    if (castling[WHITE] & BITS.QSIDE_CASTLE) {
		      cflags += 'Q';
		    }
		    if (castling[BLACK] & BITS.KSIDE_CASTLE) {
		      cflags += 'k';
		    }
		    if (castling[BLACK] & BITS.QSIDE_CASTLE) {
		      cflags += 'q';
		    }

		    /* do we have an empty castling flag? */
		    cflags = cflags || '-';
		    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square);

		    return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')
		  }

		  function set_header(args) {
		    for (var i = 0; i < args.length; i += 2) {
		      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {
		        header[args[i]] = args[i + 1];
		      }
		    }
		    return header
		  }

		  /* called when the initial board setup is changed with put() or remove().
		   * modifies the SetUp and FEN properties of the header object.  if the FEN is
		   * equal to the default position, the SetUp and FEN are deleted
		   * the setup is only updated if history.length is zero, ie moves haven't been
		   * made.
		   */
		  function update_setup(fen) {
		    if (history.length > 0) return

		    if (fen !== DEFAULT_POSITION) {
		      header['SetUp'] = '1';
		      header['FEN'] = fen;
		    } else {
		      delete header['SetUp'];
		      delete header['FEN'];
		    }
		  }

		  function get(square) {
		    var piece = board[SQUARES[square]];
		    return piece ? { type: piece.type, color: piece.color } : null
		  }

		  function put(piece, square) {
		    /* check for valid piece object */
		    if (!('type' in piece && 'color' in piece)) {
		      return false
		    }

		    /* check for piece */
		    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {
		      return false
		    }

		    /* check for valid square */
		    if (!(square in SQUARES)) {
		      return false
		    }

		    var sq = SQUARES[square];

		    /* don't let the user place more than one king */
		    if (
		      piece.type == KING &&
		      !(kings[piece.color] == EMPTY || kings[piece.color] == sq)
		    ) {
		      return false
		    }

		    board[sq] = { type: piece.type, color: piece.color };
		    if (piece.type === KING) {
		      kings[piece.color] = sq;
		    }

		    update_setup(generate_fen());

		    return true
		  }

		  function remove(square) {
		    var piece = get(square);
		    board[SQUARES[square]] = null;
		    if (piece && piece.type === KING) {
		      kings[piece.color] = EMPTY;
		    }

		    update_setup(generate_fen());

		    return piece
		  }

		  function build_move(board, from, to, flags, promotion) {
		    var move = {
		      color: turn,
		      from: from,
		      to: to,
		      flags: flags,
		      piece: board[from].type,
		    };

		    if (promotion) {
		      move.flags |= BITS.PROMOTION;
		      move.promotion = promotion;
		    }

		    if (board[to]) {
		      move.captured = board[to].type;
		    } else if (flags & BITS.EP_CAPTURE) {
		      move.captured = PAWN;
		    }
		    return move
		  }

		  function generate_moves(options) {
		    function add_move(board, moves, from, to, flags) {
		      /* if pawn promotion */
		      if (
		        board[from].type === PAWN &&
		        (rank(to) === RANK_8 || rank(to) === RANK_1)
		      ) {
		        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];
		        for (var i = 0, len = pieces.length; i < len; i++) {
		          moves.push(build_move(board, from, to, flags, pieces[i]));
		        }
		      } else {
		        moves.push(build_move(board, from, to, flags));
		      }
		    }

		    var moves = [];
		    var us = turn;
		    var them = swap_color(us);
		    var second_rank = { b: RANK_7, w: RANK_2 };

		    var first_sq = SQUARES.a8;
		    var last_sq = SQUARES.h1;
		    var single_square = false;

		    /* do we want legal moves? */
		    var legal =
		      typeof options !== 'undefined' && 'legal' in options
		        ? options.legal
		        : true;

		    var piece_type =
		      typeof options !== 'undefined' &&
		      'piece' in options &&
		      typeof options.piece === 'string'
		        ? options.piece.toLowerCase()
		        : true;

		    /* are we generating moves for a single square? */
		    if (typeof options !== 'undefined' && 'square' in options) {
		      if (options.square in SQUARES) {
		        first_sq = last_sq = SQUARES[options.square];
		        single_square = true;
		      } else {
		        /* invalid square */
		        return []
		      }
		    }

		    for (var i = first_sq; i <= last_sq; i++) {
		      /* did we run off the end of the board */
		      if (i & 0x88) {
		        i += 7;
		        continue
		      }

		      var piece = board[i];
		      if (piece == null || piece.color !== us) {
		        continue
		      }

		      if (piece.type === PAWN && (piece_type === true || piece_type === PAWN)) {
		        /* single square, non-capturing */
		        var square = i + PAWN_OFFSETS[us][0];
		        if (board[square] == null) {
		          add_move(board, moves, i, square, BITS.NORMAL);

		          /* double square */
		          var square = i + PAWN_OFFSETS[us][1];
		          if (second_rank[us] === rank(i) && board[square] == null) {
		            add_move(board, moves, i, square, BITS.BIG_PAWN);
		          }
		        }

		        /* pawn captures */
		        for (j = 2; j < 4; j++) {
		          var square = i + PAWN_OFFSETS[us][j];
		          if (square & 0x88) continue

		          if (board[square] != null && board[square].color === them) {
		            add_move(board, moves, i, square, BITS.CAPTURE);
		          } else if (square === ep_square) {
		            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);
		          }
		        }
		      } else if (piece_type === true || piece_type === piece.type) {
		        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {
		          var offset = PIECE_OFFSETS[piece.type][j];
		          var square = i;

		          while (true) {
		            square += offset;
		            if (square & 0x88) break

		            if (board[square] == null) {
		              add_move(board, moves, i, square, BITS.NORMAL);
		            } else {
		              if (board[square].color === us) break
		              add_move(board, moves, i, square, BITS.CAPTURE);
		              break
		            }

		            /* break, if knight or king */
		            if (piece.type === 'n' || piece.type === 'k') break
		          }
		        }
		      }
		    }

		    /* check for castling if: a) we're generating all moves, or b) we're doing
		     * single square move generation on the king's square
		     */
		    if (piece_type === true || piece_type === KING) {
		      if (!single_square || last_sq === kings[us]) {
		        /* king-side castling */
		        if (castling[us] & BITS.KSIDE_CASTLE) {
		          var castling_from = kings[us];
		          var castling_to = castling_from + 2;

		          if (
		            board[castling_from + 1] == null &&
		            board[castling_to] == null &&
		            !attacked(them, kings[us]) &&
		            !attacked(them, castling_from + 1) &&
		            !attacked(them, castling_to)
		          ) {
		            add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE);
		          }
		        }

		        /* queen-side castling */
		        if (castling[us] & BITS.QSIDE_CASTLE) {
		          var castling_from = kings[us];
		          var castling_to = castling_from - 2;

		          if (
		            board[castling_from - 1] == null &&
		            board[castling_from - 2] == null &&
		            board[castling_from - 3] == null &&
		            !attacked(them, kings[us]) &&
		            !attacked(them, castling_from - 1) &&
		            !attacked(them, castling_to)
		          ) {
		            add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE);
		          }
		        }
		      }
		    }

		    /* return all pseudo-legal moves (this includes moves that allow the king
		     * to be captured)
		     */
		    if (!legal) {
		      return moves
		    }

		    /* filter out illegal moves */
		    var legal_moves = [];
		    for (var i = 0, len = moves.length; i < len; i++) {
		      make_move(moves[i]);
		      if (!king_attacked(us)) {
		        legal_moves.push(moves[i]);
		      }
		      undo_move();
		    }

		    return legal_moves
		  }

		  /* convert a move from 0x88 coordinates to Standard Algebraic Notation
		   * (SAN)
		   *
		   * @param {boolean} sloppy Use the sloppy SAN generator to work around over
		   * disambiguation bugs in Fritz and Chessbase.  See below:
		   *
		   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4
		   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned
		   * 4. ... Ne7 is technically the valid SAN
		   */
		  function move_to_san(move, moves) {
		    var output = '';

		    if (move.flags & BITS.KSIDE_CASTLE) {
		      output = 'O-O';
		    } else if (move.flags & BITS.QSIDE_CASTLE) {
		      output = 'O-O-O';
		    } else {
		      if (move.piece !== PAWN) {
		        var disambiguator = get_disambiguator(move, moves);
		        output += move.piece.toUpperCase() + disambiguator;
		      }

		      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {
		        if (move.piece === PAWN) {
		          output += algebraic(move.from)[0];
		        }
		        output += 'x';
		      }

		      output += algebraic(move.to);

		      if (move.flags & BITS.PROMOTION) {
		        output += '=' + move.promotion.toUpperCase();
		      }
		    }

		    make_move(move);
		    if (in_check()) {
		      if (in_checkmate()) {
		        output += '#';
		      } else {
		        output += '+';
		      }
		    }
		    undo_move();

		    return output
		  }
		  // parses all of the decorators out of a SAN string
		  function stripped_san(move) {
		    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')
		  }

		  function attacked(color, square) {
		    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {
		      /* did we run off the end of the board */
		      if (i & 0x88) {
		        i += 7;
		        continue
		      }

		      /* if empty square or wrong color */
		      if (board[i] == null || board[i].color !== color) continue

		      var piece = board[i];
		      var difference = i - square;
		      var index = difference + 119;

		      if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {
		        if (piece.type === PAWN) {
		          if (difference > 0) {
		            if (piece.color === WHITE) return true
		          } else {
		            if (piece.color === BLACK) return true
		          }
		          continue
		        }

		        /* if the piece is a knight or a king */
		        if (piece.type === 'n' || piece.type === 'k') return true

		        var offset = RAYS[index];
		        var j = i + offset;

		        var blocked = false;
		        while (j !== square) {
		          if (board[j] != null) {
		            blocked = true;
		            break
		          }
		          j += offset;
		        }

		        if (!blocked) return true
		      }
		    }

		    return false
		  }

		  function king_attacked(color) {
		    return attacked(swap_color(color), kings[color])
		  }

		  function in_check() {
		    return king_attacked(turn)
		  }

		  function in_checkmate() {
		    return in_check() && generate_moves().length === 0
		  }

		  function in_stalemate() {
		    return !in_check() && generate_moves().length === 0
		  }

		  function insufficient_material() {
		    var pieces = {};
		    var bishops = [];
		    var num_pieces = 0;
		    var sq_color = 0;

		    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {
		      sq_color = (sq_color + 1) % 2;
		      if (i & 0x88) {
		        i += 7;
		        continue
		      }

		      var piece = board[i];
		      if (piece) {
		        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;
		        if (piece.type === BISHOP) {
		          bishops.push(sq_color);
		        }
		        num_pieces++;
		      }
		    }

		    /* k vs. k */
		    if (num_pieces === 2) {
		      return true
		    } else if (
		      /* k vs. kn .... or .... k vs. kb */
		      num_pieces === 3 &&
		      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)
		    ) {
		      return true
		    } else if (num_pieces === pieces[BISHOP] + 2) {
		      /* kb vs. kb where any number of bishops are all on the same color */
		      var sum = 0;
		      var len = bishops.length;
		      for (var i = 0; i < len; i++) {
		        sum += bishops[i];
		      }
		      if (sum === 0 || sum === len) {
		        return true
		      }
		    }

		    return false
		  }

		  function in_threefold_repetition() {
		    /* TODO: while this function is fine for casual use, a better
		     * implementation would use a Zobrist key (instead of FEN). the
		     * Zobrist key would be maintained in the make_move/undo_move functions,
		     * avoiding the costly that we do below.
		     */
		    var moves = [];
		    var positions = {};
		    var repetition = false;

		    while (true) {
		      var move = undo_move();
		      if (!move) break
		      moves.push(move);
		    }

		    while (true) {
		      /* remove the last two fields in the FEN string, they're not needed
		       * when checking for draw by rep */
		      var fen = generate_fen().split(' ').slice(0, 4).join(' ');

		      /* has the position occurred three or move times */
		      positions[fen] = fen in positions ? positions[fen] + 1 : 1;
		      if (positions[fen] >= 3) {
		        repetition = true;
		      }

		      if (!moves.length) {
		        break
		      }
		      make_move(moves.pop());
		    }

		    return repetition
		  }

		  function push(move) {
		    history.push({
		      move: move,
		      kings: { b: kings.b, w: kings.w },
		      turn: turn,
		      castling: { b: castling.b, w: castling.w },
		      ep_square: ep_square,
		      half_moves: half_moves,
		      move_number: move_number,
		    });
		  }

		  function make_move(move) {
		    var us = turn;
		    var them = swap_color(us);
		    push(move);

		    board[move.to] = board[move.from];
		    board[move.from] = null;

		    /* if ep capture, remove the captured pawn */
		    if (move.flags & BITS.EP_CAPTURE) {
		      if (turn === BLACK) {
		        board[move.to - 16] = null;
		      } else {
		        board[move.to + 16] = null;
		      }
		    }

		    /* if pawn promotion, replace with new piece */
		    if (move.flags & BITS.PROMOTION) {
		      board[move.to] = { type: move.promotion, color: us };
		    }

		    /* if we moved the king */
		    if (board[move.to].type === KING) {
		      kings[board[move.to].color] = move.to;

		      /* if we castled, move the rook next to the king */
		      if (move.flags & BITS.KSIDE_CASTLE) {
		        var castling_to = move.to - 1;
		        var castling_from = move.to + 1;
		        board[castling_to] = board[castling_from];
		        board[castling_from] = null;
		      } else if (move.flags & BITS.QSIDE_CASTLE) {
		        var castling_to = move.to + 1;
		        var castling_from = move.to - 2;
		        board[castling_to] = board[castling_from];
		        board[castling_from] = null;
		      }

		      /* turn off castling */
		      castling[us] = '';
		    }

		    /* turn off castling if we move a rook */
		    if (castling[us]) {
		      for (var i = 0, len = ROOKS[us].length; i < len; i++) {
		        if (
		          move.from === ROOKS[us][i].square &&
		          castling[us] & ROOKS[us][i].flag
		        ) {
		          castling[us] ^= ROOKS[us][i].flag;
		          break
		        }
		      }
		    }

		    /* turn off castling if we capture a rook */
		    if (castling[them]) {
		      for (var i = 0, len = ROOKS[them].length; i < len; i++) {
		        if (
		          move.to === ROOKS[them][i].square &&
		          castling[them] & ROOKS[them][i].flag
		        ) {
		          castling[them] ^= ROOKS[them][i].flag;
		          break
		        }
		      }
		    }

		    /* if big pawn move, update the en passant square */
		    if (move.flags & BITS.BIG_PAWN) {
		      if (turn === 'b') {
		        ep_square = move.to - 16;
		      } else {
		        ep_square = move.to + 16;
		      }
		    } else {
		      ep_square = EMPTY;
		    }

		    /* reset the 50 move counter if a pawn is moved or a piece is captured */
		    if (move.piece === PAWN) {
		      half_moves = 0;
		    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {
		      half_moves = 0;
		    } else {
		      half_moves++;
		    }

		    if (turn === BLACK) {
		      move_number++;
		    }
		    turn = swap_color(turn);
		  }

		  function undo_move() {
		    var old = history.pop();
		    if (old == null) {
		      return null
		    }

		    var move = old.move;
		    kings = old.kings;
		    turn = old.turn;
		    castling = old.castling;
		    ep_square = old.ep_square;
		    half_moves = old.half_moves;
		    move_number = old.move_number;

		    var us = turn;
		    var them = swap_color(turn);

		    board[move.from] = board[move.to];
		    board[move.from].type = move.piece; // to undo any promotions
		    board[move.to] = null;

		    if (move.flags & BITS.CAPTURE) {
		      board[move.to] = { type: move.captured, color: them };
		    } else if (move.flags & BITS.EP_CAPTURE) {
		      var index;
		      if (us === BLACK) {
		        index = move.to - 16;
		      } else {
		        index = move.to + 16;
		      }
		      board[index] = { type: PAWN, color: them };
		    }

		    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {
		      var castling_to, castling_from;
		      if (move.flags & BITS.KSIDE_CASTLE) {
		        castling_to = move.to + 1;
		        castling_from = move.to - 1;
		      } else if (move.flags & BITS.QSIDE_CASTLE) {
		        castling_to = move.to - 2;
		        castling_from = move.to + 1;
		      }

		      board[castling_to] = board[castling_from];
		      board[castling_from] = null;
		    }

		    return move
		  }

		  /* this function is used to uniquely identify ambiguous moves */
		  function get_disambiguator(move, moves) {
		    var from = move.from;
		    var to = move.to;
		    var piece = move.piece;

		    var ambiguities = 0;
		    var same_rank = 0;
		    var same_file = 0;

		    for (var i = 0, len = moves.length; i < len; i++) {
		      var ambig_from = moves[i].from;
		      var ambig_to = moves[i].to;
		      var ambig_piece = moves[i].piece;

		      /* if a move of the same piece type ends on the same to square, we'll
		       * need to add a disambiguator to the algebraic notation
		       */
		      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {
		        ambiguities++;

		        if (rank(from) === rank(ambig_from)) {
		          same_rank++;
		        }

		        if (file(from) === file(ambig_from)) {
		          same_file++;
		        }
		      }
		    }

		    if (ambiguities > 0) {
		      /* if there exists a similar moving piece on the same rank and file as
		       * the move in question, use the square as the disambiguator
		       */
		      if (same_rank > 0 && same_file > 0) {
		        return algebraic(from)
		      } else if (same_file > 0) {
		        /* if the moving piece rests on the same file, use the rank symbol as the
		         * disambiguator
		         */
		        return algebraic(from).charAt(1)
		      } else {
		        /* else use the file symbol */
		        return algebraic(from).charAt(0)
		      }
		    }

		    return ''
		  }

		  function infer_piece_type(san) {
		    var piece_type = san.charAt(0);
		    if (piece_type >= 'a' && piece_type <= 'h') {
		      var matches = san.match(/[a-h]\d.*[a-h]\d/);
		      if (matches) {
		        return undefined
		      }
		      return PAWN
		    }
		    piece_type = piece_type.toLowerCase();
		    if (piece_type === 'o') {
		      return KING
		    }
		    return piece_type
		  }
		  function ascii() {
		    var s = '   +------------------------+\n';
		    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {
		      /* display the rank */
		      if (file(i) === 0) {
		        s += ' ' + '87654321'[rank(i)] + ' |';
		      }

		      /* empty piece */
		      if (board[i] == null) {
		        s += ' . ';
		      } else {
		        var piece = board[i].type;
		        var color = board[i].color;
		        var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();
		        s += ' ' + symbol + ' ';
		      }

		      if ((i + 1) & 0x88) {
		        s += '|\n';
		        i += 8;
		      }
		    }
		    s += '   +------------------------+\n';
		    s += '     a  b  c  d  e  f  g  h\n';

		    return s
		  }

		  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates
		  function move_from_san(move, sloppy) {
		    // strip off any move decorations: e.g Nf3+?! becomes Nf3
		    var clean_move = stripped_san(move);

		    var overly_disambiguated = false;

		    if (sloppy) {
		      // The sloppy parser allows the user to parse non-standard chess
		      // notations. This parser is opt-in (by specifying the
		      // '{ sloppy: true }' setting) and is only run after the Standard
		      // Algebraic Notation (SAN) parser has failed.
		      //
		      // When running the sloppy parser, we'll run a regex to grab the piece,
		      // the to/from square, and an optional promotion piece. This regex will
		      // parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7, f7f8q,
		      // b1c3

		      // NOTE: Some positions and moves may be ambiguous when using the sloppy
		      // parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,
		      // the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated
		      // bishop move). In these cases, the sloppy parser will default to the
		      // most most basic interpretation - b1c3 parses to Nc3.

		      var matches = clean_move.match(
		        /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/
		      );
		      if (matches) {
		        var piece = matches[1];
		        var from = matches[2];
		        var to = matches[3];
		        var promotion = matches[4];

		        if (from.length == 1) {
		          overly_disambiguated = true;
		        }
		      } else {
		        // The [a-h]?[1-8]? portion of the regex below handles moves that may
		        // be overly disambiguated (e.g. Nge7 is unnecessary and non-standard
		        // when there is one legal knight move to e7). In this case, the value
		        // of 'from' variable will be a rank or file, not a square.
		        var matches = clean_move.match(
		          /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/
		        );

		        if (matches) {
		          var piece = matches[1];
		          var from = matches[2];
		          var to = matches[3];
		          var promotion = matches[4];

		          if (from.length == 1) {
		            var overly_disambiguated = true;
		          }
		        }
		      }
		    }

		    var piece_type = infer_piece_type(clean_move);
		    var moves = generate_moves({
		      legal: true,
		      piece: piece ? piece : piece_type,
		    });

		    for (var i = 0, len = moves.length; i < len; i++) {
		      // try the strict parser first, then the sloppy parser if requested
		      // by the user
		      if (clean_move === stripped_san(move_to_san(moves[i], moves))) {
		        return moves[i]
		      } else {
		        if (sloppy && matches) {
		          // hand-compare move properties with the results from our sloppy
		          // regex
		          if (
		            (!piece || piece.toLowerCase() == moves[i].piece) &&
		            SQUARES[from] == moves[i].from &&
		            SQUARES[to] == moves[i].to &&
		            (!promotion || promotion.toLowerCase() == moves[i].promotion)
		          ) {
		            return moves[i]
		          } else if (overly_disambiguated) {
		            // SPECIAL CASE: we parsed a move string that may have an unneeded
		            // rank/file disambiguator (e.g. Nge7).  The 'from' variable will
		            var square = algebraic(moves[i].from);
		            if (
		              (!piece || piece.toLowerCase() == moves[i].piece) &&
		              SQUARES[to] == moves[i].to &&
		              (from == square[0] || from == square[1]) &&
		              (!promotion || promotion.toLowerCase() == moves[i].promotion)
		            ) {
		              return moves[i]
		            }
		          }
		        }
		      }
		    }

		    return null
		  }

		  /*****************************************************************************
		   * UTILITY FUNCTIONS
		   ****************************************************************************/
		  function rank(i) {
		    return i >> 4
		  }

		  function file(i) {
		    return i & 15
		  }

		  function algebraic(i) {
		    var f = file(i),
		      r = rank(i);
		    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)
		  }

		  function swap_color(c) {
		    return c === WHITE ? BLACK : WHITE
		  }

		  function is_digit(c) {
		    return '0123456789'.indexOf(c) !== -1
		  }

		  /* pretty = external move object */
		  function make_pretty(ugly_move) {
		    var move = clone(ugly_move);
		    move.san = move_to_san(move, generate_moves({ legal: true }));
		    move.to = algebraic(move.to);
		    move.from = algebraic(move.from);

		    var flags = '';

		    for (var flag in BITS) {
		      if (BITS[flag] & move.flags) {
		        flags += FLAGS[flag];
		      }
		    }
		    move.flags = flags;

		    return move
		  }

		  function clone(obj) {
		    var dupe = obj instanceof Array ? [] : {};

		    for (var property in obj) {
		      if (typeof property === 'object') {
		        dupe[property] = clone(obj[property]);
		      } else {
		        dupe[property] = obj[property];
		      }
		    }

		    return dupe
		  }

		  function trim(str) {
		    return str.replace(/^\s+|\s+$/g, '')
		  }

		  /*****************************************************************************
		   * DEBUGGING UTILITIES
		   ****************************************************************************/
		  function perft(depth) {
		    var moves = generate_moves({ legal: false });
		    var nodes = 0;
		    var color = turn;

		    for (var i = 0, len = moves.length; i < len; i++) {
		      make_move(moves[i]);
		      if (!king_attacked(color)) {
		        if (depth - 1 > 0) {
		          var child_nodes = perft(depth - 1);
		          nodes += child_nodes;
		        } else {
		          nodes++;
		        }
		      }
		      undo_move();
		    }

		    return nodes
		  }

		  return {
		    /***************************************************************************
		     * PUBLIC CONSTANTS (is there a better way to do this?)
		     **************************************************************************/
		    WHITE: WHITE,
		    BLACK: BLACK,
		    PAWN: PAWN,
		    KNIGHT: KNIGHT,
		    BISHOP: BISHOP,
		    ROOK: ROOK,
		    QUEEN: QUEEN,
		    KING: KING,
		    SQUARES: (function () {
		      /* from the ECMA-262 spec (section 12.6.4):
		       * "The mechanics of enumerating the properties ... is
		       * implementation dependent"
		       * so: for (var sq in SQUARES) { keys.push(sq); } might not be
		       * ordered correctly
		       */
		      var keys = [];
		      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {
		        if (i & 0x88) {
		          i += 7;
		          continue
		        }
		        keys.push(algebraic(i));
		      }
		      return keys
		    })(),
		    FLAGS: FLAGS,

		    /***************************************************************************
		     * PUBLIC API
		     **************************************************************************/
		    load: function (fen) {
		      return load(fen)
		    },

		    reset: function () {
		      return reset()
		    },

		    moves: function (options) {
		      /* The internal representation of a chess move is in 0x88 format, and
		       * not meant to be human-readable.  The code below converts the 0x88
		       * square coordinates to algebraic coordinates.  It also prunes an
		       * unnecessary move keys resulting from a verbose call.
		       */

		      var ugly_moves = generate_moves(options);
		      var moves = [];

		      for (var i = 0, len = ugly_moves.length; i < len; i++) {
		        /* does the user want a full move object (most likely not), or just
		         * SAN
		         */
		        if (
		          typeof options !== 'undefined' &&
		          'verbose' in options &&
		          options.verbose
		        ) {
		          moves.push(make_pretty(ugly_moves[i]));
		        } else {
		          moves.push(
		            move_to_san(ugly_moves[i], generate_moves({ legal: true }))
		          );
		        }
		      }

		      return moves
		    },

		    in_check: function () {
		      return in_check()
		    },

		    in_checkmate: function () {
		      return in_checkmate()
		    },

		    in_stalemate: function () {
		      return in_stalemate()
		    },

		    in_draw: function () {
		      return (
		        half_moves >= 100 ||
		        in_stalemate() ||
		        insufficient_material() ||
		        in_threefold_repetition()
		      )
		    },

		    insufficient_material: function () {
		      return insufficient_material()
		    },

		    in_threefold_repetition: function () {
		      return in_threefold_repetition()
		    },

		    game_over: function () {
		      return (
		        half_moves >= 100 ||
		        in_checkmate() ||
		        in_stalemate() ||
		        insufficient_material() ||
		        in_threefold_repetition()
		      )
		    },

		    validate_fen: function (fen) {
		      return validate_fen(fen)
		    },

		    fen: function () {
		      return generate_fen()
		    },

		    board: function () {
		      var output = [],
		        row = [];

		      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {
		        if (board[i] == null) {
		          row.push(null);
		        } else {
		          row.push({ type: board[i].type, color: board[i].color });
		        }
		        if ((i + 1) & 0x88) {
		          output.push(row);
		          row = [];
		          i += 8;
		        }
		      }

		      return output
		    },

		    pgn: function (options) {
		      /* using the specification from http://www.chessclub.com/help/PGN-spec
		       * example for html usage: .pgn({ max_width: 72, newline_char: "<br />" })
		       */
		      var newline =
		        typeof options === 'object' && typeof options.newline_char === 'string'
		          ? options.newline_char
		          : '\n';
		      var max_width =
		        typeof options === 'object' && typeof options.max_width === 'number'
		          ? options.max_width
		          : 0;
		      var result = [];
		      var header_exists = false;

		      /* add the PGN header headerrmation */
		      for (var i in header) {
		        /* TODO: order of enumerated properties in header object is not
		         * guaranteed, see ECMA-262 spec (section 12.6.4)
		         */
		        result.push('[' + i + ' "' + header[i] + '"]' + newline);
		        header_exists = true;
		      }

		      if (header_exists && history.length) {
		        result.push(newline);
		      }

		      var append_comment = function (move_string) {
		        var comment = comments[generate_fen()];
		        if (typeof comment !== 'undefined') {
		          var delimiter = move_string.length > 0 ? ' ' : '';
		          move_string = `${move_string}${delimiter}{${comment}}`;
		        }
		        return move_string
		      };

		      /* pop all of history onto reversed_history */
		      var reversed_history = [];
		      while (history.length > 0) {
		        reversed_history.push(undo_move());
		      }

		      var moves = [];
		      var move_string = '';

		      /* special case of a commented starting position with no moves */
		      if (reversed_history.length === 0) {
		        moves.push(append_comment(''));
		      }

		      /* build the list of moves.  a move_string looks like: "3. e3 e6" */
		      while (reversed_history.length > 0) {
		        move_string = append_comment(move_string);
		        var move = reversed_history.pop();

		        /* if the position started with black to move, start PGN with 1. ... */
		        if (!history.length && move.color === 'b') {
		          move_string = move_number + '. ...';
		        } else if (move.color === 'w') {
		          /* store the previous generated move_string if we have one */
		          if (move_string.length) {
		            moves.push(move_string);
		          }
		          move_string = move_number + '.';
		        }

		        move_string =
		          move_string + ' ' + move_to_san(move, generate_moves({ legal: true }));
		        make_move(move);
		      }

		      /* are there any other leftover moves? */
		      if (move_string.length) {
		        moves.push(append_comment(move_string));
		      }

		      /* is there a result? */
		      if (typeof header.Result !== 'undefined') {
		        moves.push(header.Result);
		      }

		      /* history should be back to what it was before we started generating PGN,
		       * so join together moves
		       */
		      if (max_width === 0) {
		        return result.join('') + moves.join(' ')
		      }

		      var strip = function () {
		        if (result.length > 0 && result[result.length - 1] === ' ') {
		          result.pop();
		          return true
		        }
		        return false
		      };

		      /* NB: this does not preserve comment whitespace. */
		      var wrap_comment = function (width, move) {
		        for (var token of move.split(' ')) {
		          if (!token) {
		            continue
		          }
		          if (width + token.length > max_width) {
		            while (strip()) {
		              width--;
		            }
		            result.push(newline);
		            width = 0;
		          }
		          result.push(token);
		          width += token.length;
		          result.push(' ');
		          width++;
		        }
		        if (strip()) {
		          width--;
		        }
		        return width
		      };

		      /* wrap the PGN output at max_width */
		      var current_width = 0;
		      for (var i = 0; i < moves.length; i++) {
		        if (current_width + moves[i].length > max_width) {
		          if (moves[i].includes('{')) {
		            current_width = wrap_comment(current_width, moves[i]);
		            continue
		          }
		        }
		        /* if the current move will push past max_width */
		        if (current_width + moves[i].length > max_width && i !== 0) {
		          /* don't end the line with whitespace */
		          if (result[result.length - 1] === ' ') {
		            result.pop();
		          }

		          result.push(newline);
		          current_width = 0;
		        } else if (i !== 0) {
		          result.push(' ');
		          current_width++;
		        }
		        result.push(moves[i]);
		        current_width += moves[i].length;
		      }

		      return result.join('')
		    },

		    load_pgn: function (pgn, options) {
		      // allow the user to specify the sloppy move parser to work around over
		      // disambiguation bugs in Fritz and Chessbase
		      var sloppy =
		        typeof options !== 'undefined' && 'sloppy' in options
		          ? options.sloppy
		          : false;

		      function mask(str) {
		        return str.replace(/\\/g, '\\')
		      }

		      function parse_pgn_header(header, options) {
		        var newline_char =
		          typeof options === 'object' &&
		          typeof options.newline_char === 'string'
		            ? options.newline_char
		            : '\r?\n';
		        var header_obj = {};
		        var headers = header.split(new RegExp(mask(newline_char)));
		        var key = '';
		        var value = '';

		        for (var i = 0; i < headers.length; i++) {
		          key = headers[i].replace(/^\[([A-Z][A-Za-z]*)\s.*\]$/, '$1');
		          value = headers[i].replace(/^\[[A-Za-z]+\s"(.*)"\ *\]$/, '$1');
		          if (trim(key).length > 0) {
		            header_obj[key] = value;
		          }
		        }

		        return header_obj
		      }

		      var newline_char =
		        typeof options === 'object' && typeof options.newline_char === 'string'
		          ? options.newline_char
		          : '\r?\n';

		      // RegExp to split header. Takes advantage of the fact that header and movetext
		      // will always have a blank line between them (ie, two newline_char's).
		      // With default newline_char, will equal: /^(\[((?:\r?\n)|.)*\])(?:\r?\n){2}/
		      var header_regex = new RegExp(
		        '^(\\[((?:' +
		          mask(newline_char) +
		          ')|.)*\\])' +
		          '(?:' +
		          mask(newline_char) +
		          '){2}'
		      );

		      // If no header given, begin with moves.
		      var header_string = header_regex.test(pgn)
		        ? header_regex.exec(pgn)[1]
		        : '';

		      // Put the board in the starting position
		      reset();

		      /* parse PGN header */
		      var headers = parse_pgn_header(header_string, options);
		      for (var key in headers) {
		        set_header([key, headers[key]]);
		      }

		      /* load the starting position indicated by [Setup '1'] and
		       * [FEN position] */
		      if (headers['SetUp'] === '1') {
		        if (!('FEN' in headers && load(headers['FEN'], true))) {
		          // second argument to load: don't clear the headers
		          return false
		        }
		      }

		      /* NB: the regexes below that delete move numbers, recursive
		       * annotations, and numeric annotation glyphs may also match
		       * text in comments. To prevent this, we transform comments
		       * by hex-encoding them in place and decoding them again after
		       * the other tokens have been deleted.
		       *
		       * While the spec states that PGN files should be ASCII encoded,
		       * we use {en,de}codeURIComponent here to support arbitrary UTF8
		       * as a convenience for modern users */

		      var to_hex = function (string) {
		        return Array.from(string)
		          .map(function (c) {
		            /* encodeURI doesn't transform most ASCII characters,
		             * so we handle these ourselves */
		            return c.charCodeAt(0) < 128
		              ? c.charCodeAt(0).toString(16)
		              : encodeURIComponent(c).replace(/\%/g, '').toLowerCase()
		          })
		          .join('')
		      };

		      var from_hex = function (string) {
		        return string.length == 0
		          ? ''
		          : decodeURIComponent('%' + string.match(/.{1,2}/g).join('%'))
		      };

		      var encode_comment = function (string) {
		        string = string.replace(new RegExp(mask(newline_char), 'g'), ' ');
		        return `{${to_hex(string.slice(1, string.length - 1))}}`
		      };

		      var decode_comment = function (string) {
		        if (string.startsWith('{') && string.endsWith('}')) {
		          return from_hex(string.slice(1, string.length - 1))
		        }
		      };

		      /* delete header to get the moves */
		      var ms = pgn
		        .replace(header_string, '')
		        .replace(
		          /* encode comments so they don't get deleted below */
		          new RegExp(`(\{[^}]*\})+?|;([^${mask(newline_char)}]*)`, 'g'),
		          function (match, bracket, semicolon) {
		            return bracket !== undefined
		              ? encode_comment(bracket)
		              : ' ' + encode_comment(`{${semicolon.slice(1)}}`)
		          }
		        )
		        .replace(new RegExp(mask(newline_char), 'g'), ' ');

		      /* delete recursive annotation variations */
		      var rav_regex = /(\([^\(\)]+\))+?/g;
		      while (rav_regex.test(ms)) {
		        ms = ms.replace(rav_regex, '');
		      }

		      /* delete move numbers */
		      ms = ms.replace(/\d+\.(\.\.)?/g, '');

		      /* delete ... indicating black to move */
		      ms = ms.replace(/\.\.\./g, '');

		      /* delete numeric annotation glyphs */
		      ms = ms.replace(/\$\d+/g, '');

		      /* trim and get array of moves */
		      var moves = trim(ms).split(new RegExp(/\s+/));

		      /* delete empty entries */
		      moves = moves.join(',').replace(/,,+/g, ',').split(',');
		      var move = '';

		      var result = '';

		      for (var half_move = 0; half_move < moves.length; half_move++) {
		        var comment = decode_comment(moves[half_move]);
		        if (comment !== undefined) {
		          comments[generate_fen()] = comment;
		          continue
		        }

		        move = move_from_san(moves[half_move], sloppy);

		        /* invalid move */
		        if (move == null) {
		          /* was the move an end of game marker */
		          if (TERMINATION_MARKERS.indexOf(moves[half_move]) > -1) {
		            result = moves[half_move];
		          } else {
		            return false
		          }
		        } else {
		          /* reset the end of game marker if making a valid move */
		          result = '';
		          make_move(move);
		        }
		      }

		      /* Per section 8.2.6 of the PGN spec, the Result tag pair must match
		       * match the termination marker. Only do this when headers are present,
		       * but the result tag is missing
		       */
		      if (result && Object.keys(header).length && !header['Result']) {
		        set_header(['Result', result]);
		      }

		      return true
		    },

		    header: function () {
		      return set_header(arguments)
		    },

		    ascii: function () {
		      return ascii()
		    },

		    turn: function () {
		      return turn
		    },

		    move: function (move, options) {
		      /* The move function can be called with in the following parameters:
		       *
		       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string
		       *
		       * .move({ from: 'h7', <- where the 'move' is a move object (additional
		       *         to :'h8',      fields are ignored)
		       *         promotion: 'q',
		       *      })
		       */

		      // allow the user to specify the sloppy move parser to work around over
		      // disambiguation bugs in Fritz and Chessbase
		      var sloppy =
		        typeof options !== 'undefined' && 'sloppy' in options
		          ? options.sloppy
		          : false;

		      var move_obj = null;

		      if (typeof move === 'string') {
		        move_obj = move_from_san(move, sloppy);
		      } else if (typeof move === 'object') {
		        var moves = generate_moves();

		        /* convert the pretty move object to an ugly move object */
		        for (var i = 0, len = moves.length; i < len; i++) {
		          if (
		            move.from === algebraic(moves[i].from) &&
		            move.to === algebraic(moves[i].to) &&
		            (!('promotion' in moves[i]) ||
		              move.promotion === moves[i].promotion)
		          ) {
		            move_obj = moves[i];
		            break
		          }
		        }
		      }

		      /* failed to find move */
		      if (!move_obj) {
		        return null
		      }

		      /* need to make a copy of move because we can't generate SAN after the
		       * move is made
		       */
		      var pretty_move = make_pretty(move_obj);

		      make_move(move_obj);

		      return pretty_move
		    },

		    undo: function () {
		      var move = undo_move();
		      return move ? make_pretty(move) : null
		    },

		    clear: function () {
		      return clear()
		    },

		    put: function (piece, square) {
		      return put(piece, square)
		    },

		    get: function (square) {
		      return get(square)
		    },

		    remove: function (square) {
		      return remove(square)
		    },

		    perft: function (depth) {
		      return perft(depth)
		    },

		    square_color: function (square) {
		      if (square in SQUARES) {
		        var sq_0x88 = SQUARES[square];
		        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'
		      }

		      return null
		    },

		    history: function (options) {
		      var reversed_history = [];
		      var move_history = [];
		      var verbose =
		        typeof options !== 'undefined' &&
		        'verbose' in options &&
		        options.verbose;

		      while (history.length > 0) {
		        reversed_history.push(undo_move());
		      }

		      while (reversed_history.length > 0) {
		        var move = reversed_history.pop();
		        if (verbose) {
		          move_history.push(make_pretty(move));
		        } else {
		          move_history.push(move_to_san(move, generate_moves({ legal: true })));
		        }
		        make_move(move);
		      }

		      return move_history
		    },

		    get_comment: function () {
		      return comments[generate_fen()]
		    },

		    set_comment: function (comment) {
		      comments[generate_fen()] = comment.replace('{', '[').replace('}', ']');
		    },

		    delete_comment: function () {
		      var comment = comments[generate_fen()];
		      delete comments[generate_fen()];
		      return comment
		    },

		    get_comments: function () {
		      prune_comments();
		      return Object.keys(comments).map(function (fen) {
		        return { fen: fen, comment: comments[fen] }
		      })
		    },

		    delete_comments: function () {
		      prune_comments();
		      return Object.keys(comments).map(function (fen) {
		        var comment = comments[fen];
		        delete comments[fen];
		        return { fen: fen, comment: comment }
		      })
		    },
		  }
		};

		/* export Chess object if using node or any other CommonJS compatible
		 * environment */
		exports.Chess = Chess;
	} (chess));

	const NAGs = new Array(256);
	NAGs[1] = "!"; // 1
	NAGs[2] = "?"; // 2
	NAGs[3] = "‼"; // 3
	NAGs[4] = "⁇"; // 4
	NAGs[5] = "⁉"; // 5
	NAGs[6] = "⁈"; // 6
	NAGs[7] = "□"; // 7
	NAGs[10] = "="; // 10
	NAGs[13] = "∞"; // 13
	NAGs[14] = "⩲"; // 14➢0x2a72
	NAGs[15] = "⩱"; // 15 0x2a71
	NAGs[16] = "±"; // 16
	NAGs[17] = "∓"; // 17
	NAGs[18] = "+−"; // 18
	NAGs[19] = "-+"; // 19
	NAGs[22] = "⨀";
	NAGs[23] = "⨀";
	NAGs[26] = "○";
	NAGs[27] = "○";
	NAGs[32] = "⟳";
	NAGs[33] = "⟳";
	NAGs[36] = "↑";
	NAGs[37] = "↑";
	NAGs[40] = "→";
	NAGs[41] = "→";
	NAGs[44] = "=∞";
	NAGs[45] = "=∞";
	NAGs[132] = "⇆";
	NAGs[133] = "⇆";
	NAGs[138] = "⊕";
	NAGs[139] = "⊕";
	NAGs[140] = "∆";
	NAGs[141] = "∇";
	NAGs[142] = "⌓";
	NAGs[143] = "<=";
	NAGs[144] = "==";
	NAGs[145] = "RR";
	NAGs[146] = "N";
	NAGs[220] = "⬒";
	NAGs[221] = "⬓";
	NAGs[238] = "○";
	NAGs[239] = "⇔";
	NAGs[240] = "⇗";
	NAGs[241] = "⊞";
	NAGs[242] = "⟫";
	NAGs[243] = "⟪";
	NAGs[244] = "✕";
	NAGs[245] = "⊥";
	const PGN_NAGS = {};
	// build the reverse index
	for (let i = 0; i < NAGs.length; i++) {
	    PGN_NAGS[NAGs[i]] = i;
	}
	// Special case for duplicate NAGs
	PGN_NAGS['!!'] = 3;
	PGN_NAGS['??'] = 4;
	PGN_NAGS['!?'] = 5;
	PGN_NAGS['?!'] = 6;
	/**
	 * Returns the NAG notation from the array of symbols
	 * @param array the NAG symbols like $1, $3, ...
	 * @returns {string} the result string like !, !!
	 */
	function nagToSymbol(array) {
	    let ret_string = "";
	    if (array === null || array === undefined) {
	        return ret_string;
	    }
	    for (let i = 0; i < array.length; i++) {
	        const number = parseInt(array[i].substring(1));
	        if ((number !== 220) && (number !== 221)) { // Don't add diagrams to notation
	            const ret = NAGs[number];
	            ret_string += (typeof ret != 'undefined') ? ret : "$" + number;
	        }
	    }
	    return ret_string;
	}
	/**
	 * Returns the SYM notation for a single NAG (like !!, ?!, ...)
	 * @param string the NAG in the chess notation
	 * @returns {*} the symbold like $0, $3, ...
	 */
	function symbolToNag(string) {
	    const nag = PGN_NAGS[string];
	    if (nag === undefined) {
	        return null;
	    }
	    else {
	        return "$" + nag;
	    }
	}
	function hasDiagramNag(move) {
	    if (typeof move.nag == "undefined")
	        return false;
	    if (move.nag == null)
	        return false;
	    return (move.nag.indexOf('$220') > -1) || (move.nag.indexOf('$221') > -1);
	}

	var index_umd = {exports: {}};

	(function (module, exports) {
		(function (global, factory) {
		    factory(exports) ;
		})(commonjsGlobal, (function (exports) {
		    /* From pgn-writer */
		    const PROMOTIONS = {
		        'q': 'queen',
		        'r': 'rook',
		        'b': 'bishop',
		        'n': 'knight'
		    };
		    const prom_short = ['q', 'r', 'b', 'n'];
		    const colors = ['white', 'black'];
		    const files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
		    const ranks = ['1', '2', '3', '4', '5', '6', '7', '8'];

		    exports.PROMOTIONS = PROMOTIONS;
		    exports.colors = colors;
		    exports.files = files;
		    exports.prom_short = prom_short;
		    exports.ranks = ranks;

		    Object.defineProperty(exports, '__esModule', { value: true });

		})); 
	} (index_umd, index_umd.exports));

	var index_umdExports = index_umd.exports;

	let isBrowser = new Function("try {return this===window;}catch(e){ return false;}");
	/**
	 * Defines the base functionality for reading and working with PGN.
	 * The configuration is the part of the configuration given to the PgnViewer that is relevant
	 * for the reader.
	 * The reader is an abstraction that just knows the current games, and handles changes by keeping the change
	 * in the state of the game. So all local storage in the reader should be avoided besides `configuration`, `games`
	 * and `currentGameIndex`.
	 * @param {*} configuration Given values are relevant for reading and working with PGN
	 */
	class PgnReader {
	    constructor(configuration) {
	        function initializeConfiguration(configuration) {
	            function browserReadFromURL(url) {
	                const request = new XMLHttpRequest();
	                request.open('GET', url, false);
	                request.send();
	                if (request.status === 200) {
	                    return request.responseText;
	                }
	                throw new Error("URL not found or could not read: " + url);
	            }
	            let defaults = {
	                notation: 'short',
	                position: 'start',
	                locale: 'en'
	            };
	            if (!configuration.pgn) {
	                if (typeof configuration.pgnFile === 'undefined') {
	                    configuration.pgn = '*';
	                }
	                else {
	                    // the following only works in the browser
	                    configuration.pgn = isBrowser() ? browserReadFromURL(configuration.pgnFile) : '*';
	                }
	            }
	            return Object.assign(defaults, configuration);
	        }
	        this.configuration = initializeConfiguration(configuration);
	        this.chess = chess.Chess();
	        if ((!this.configuration.lazyLoad) || (this.configuration.mode === 'board')) {
	            this.loadPgn();
	        }
	    }
	    /**
	     * Returns the real notation from the move (excluding NAGs).
	     * @param move given move in JSON notation
	     * @return {*} the SAN string created from the move
	     */
	    san(move) {
	        function getFig(fig) {
	            if (fig === 'P') {
	                return '';
	            }
	            return fig;
	        }
	        let prevMovePosition = (move.prev) ? this.getMove(move.prev).fen : this.setToStart();
	        this.chess.load(prevMovePosition);
	        let prettySan = this.chess.move({ from: move.from, to: move.to });
	        if (prettySan && (this.configuration.notation != 'long')) {
	            // console.log("Found SAN: " + prettySan.san)
	            return prettySan.san;
	        }
	        // console.log("No SAN found")
	        // The following is done in case configuration.notation == 'long' or something failed
	        let notation = move.notation;
	        if (typeof notation.row === 'undefined') {
	            return notation.notation; // move like O-O and O-O-O
	        }
	        const fig = notation.fig ? getFig(notation.fig) : '';
	        let disc = notation.disc ? notation.disc : '';
	        const strike = notation.strike ? notation.strike : '';
	        // Pawn moves with capture need the col as "discriminator"
	        if (strike && !fig) { // Pawn capture
	            disc = move.from.substring(0, 1);
	        }
	        const check = notation.check ? notation.check : '';
	        const prom = notation.promotion ? '=' + getFig(notation.promotion.substring(1, 2)) : '';
	        if (this.configuration.notation === 'short') {
	            return fig + disc + strike + notation.col + notation.row + prom + check;
	        }
	        return fig + move.from + (notation.strike ? strike : '-') + move.to + prom + check;
	    }
	    sanWithNags(move) {
	        let _san = this.san(move);
	        if (move.nag) {
	            _san += nagToSymbol(move.nag);
	        }
	        return _san;
	    }
	    loadPgn() {
	        let hasManyGames = () => {
	            return this.configuration.manyGames || (this.configuration.manyGames !== undefined);
	        };
	        if (hasManyGames()) {
	            this.loadMany();
	            this.loadOne(this.games[0]);
	            return this;
	        }
	        let _mgame = index_umdExports$2.parse(this.configuration.pgn, { startRule: 'game' });
	        this.games = [_mgame];
	        this.loadOne(_mgame);
	        return this;
	    }
	    loadMany() {
	        this.games = index_umdExports$2.parse(this.configuration.pgn, { startRule: 'games' });
	    }
	    loadOne(game) {
	        let interpretHeaders = (_game) => {
	            var _a, _b;
	            if ((_a = _game.tags) === null || _a === void 0 ? void 0 : _a.SetUp) {
	                const setup = (_b = _game.tags) === null || _b === void 0 ? void 0 : _b.SetUp;
	                if (setup === '0') {
	                    this.configuration.position = 'start';
	                }
	                else {
	                    this.configuration.position = _game.tags.FEN;
	                }
	            }
	            else {
	                if (this.configuration.manyGames == true) {
	                    this.configuration.position = 'start';
	                }
	            }
	            if (_game.tags.Result) {
	                this.endGame = _game.tags.Result;
	            }
	            else {
	                this.endGame = undefined;
	            }
	        };
	        this.currentGameIndex = typeof game === 'number' ? game : 0;
	        let _game = typeof game === 'number' ? this.games[game] : game;
	        interpretHeaders(_game);
	        this.readMoves(_game.moves);
	        if (this.configuration.startPlay && this.configuration.hideMovesBefore) {
	            let new_fen = this.deleteMovesBefore(this.configuration.startPlay);
	            let new_pgn = this.writePgn();
	            this.configuration.startPlay = null;
	            this.configuration.hideMovesBefore = false;
	            this.configuration.pgn = new_pgn;
	            this.configuration.position = new_fen;
	            this.loadPgn();
	        }
	    }
	    getGame(index) {
	        var _a;
	        // this.loadOne(index)
	        if ((this.games === undefined) || !this.games[index]) {
	            return { moves: [] };
	        }
	        let tags = ((_a = this.games[index]) === null || _a === void 0 ? void 0 : _a.tags) || {};
	        return { moves: this.getMoves(), gameComment: this.getGameComment(), tags: tags };
	    }
	    possibleMoves(move) {
	        let _fen = typeof move === 'number' ? this.getMove(move).fen : move;
	        const dests = new Map();
	        if (!this.chess.load(_fen)) { // Not a valid position, no move possible
	            return dests;
	        }
	        this.chess.SQUARES.forEach(s => {
	            const ms = this.chess.moves({ square: s, verbose: true });
	            if (ms.length)
	                dests.set(s, ms.map(m => m.to));
	        });
	        return dests;
	    }
	    readMoves(moves) {
	        let correctVariations = () => {
	            this.getMoves().forEach(function (move) {
	                for (let i = 0; i < move.variations.length; i++) {
	                    move.variations[i] = move.variations[i][0];
	                }
	            });
	        };
	        let remindEndGame = (movesMainLine) => {
	            if (typeof movesMainLine[movesMainLine.length - 1] === "string") {
	                this.endGame = movesMainLine.pop();
	            }
	        };
	        let correctTurn = () => {
	            function getTurn(fen) {
	                const tokens = fen.split(/\s+/);
	                return tokens[1];
	            }
	            if ((getTurn(this.configuration.position) === 'b') &&
	                (this.isMove(0)) &&
	                (this.moves[0].turn === 'w')) {
	                this.getMoves().forEach(function (move) {
	                    move.turn = (move.turn === 'w') ? 'b' : 'w';
	                });
	            }
	        };
	        let movesMainLine = moves;
	        remindEndGame(movesMainLine);
	        this.eachMove(movesMainLine);
	        correctTurn();
	        correctVariations();
	    }
	    ;
	    isMove(id) {
	        return this.getMoves().length > id;
	    }
	    ;
	    isDeleted(id) {
	        if (!this.isMove(id))
	            return true; // Every non-existing moves is "deleted"
	        const current = this.getMoves()[id];
	        if (current === null) {
	            return true;
	        }
	        if (id === 0 && (current)) {
	            return false;
	        }
	        return false; // default
	    }
	    getMove(id) {
	        return this.getMoves() ? this.getMoves()[id] : undefined;
	    }
	    deleteMove(id) {
	        let removeFromArray = (array, index) => {
	            const ret = array[index];
	            array.splice(index, 1);
	            return ret;
	        };
	        if (this.isDeleted(id)) {
	            return;
	        }
	        // 1. Main line first move
	        if (id === 0) {
	            // Delete all moves
	            this.moves = [];
	            return;
	        }
	        let current = this.getMove(id);
	        // 2. First move of variation
	        if (this.startVariation(current)) {
	            const vars = this.getMove(this.getMove(current.prev).next).variations;
	            for (let i = 0; vars.length; i++) {
	                if (vars[i] === current) {
	                    removeFromArray(vars, i);
	                    if (current.next !== undefined) {
	                        this.deleteMove(current.next);
	                    }
	                    this.getMoves()[current.index] = null;
	                    return;
	                }
	            }
	        }
	        // 3. Some line some other move, no variation
	        if (current.variations.length === 0) {
	            if (current.next !== undefined && (current.next !== null)) {
	                this.deleteMove(current.next);
	            }
	            this.moves[current.prev].next = null;
	            this.moves[id] = null;
	            return;
	        }
	        // 4. Some line some other move, with variation
	        if (current.variations.length > 0) {
	            if (current.next !== undefined) {
	                this.deleteMove(current.next);
	            }
	            let variationMove = removeFromArray(current.variations, 0);
	            let varLevel = variationMove.variationLevel;
	            this.moves[current.prev].next = variationMove.index;
	            this.moves[id] = null;
	            this.updateVariationLevel(variationMove, varLevel - 1);
	        }
	    }
	    updateVariationLevel(move, varLevel) {
	        if (arguments.length === 0) {
	            // Workaround: we don't know which is the first move, so this this with index 0
	            const my_move = this.getFirstMove();
	            this.updateVariationLevel(my_move, 0);
	        }
	        else {
	            move.variationLevel = varLevel;
	            if (move.next !== undefined) {
	                this.updateVariationLevel(this.getMove(move.next), varLevel);
	            }
	            if (move.variations) {
	                for (let i = 0; i < move.variations.length; i++) {
	                    this.updateVariationLevel(move.variations[i], varLevel + 1);
	                }
	            }
	        }
	    }
	    findMove(moveRep) {
	        if (!isNaN(moveRep)) { // the following goes only over the main line, move number cannot denote a variation
	            let moveNum = moveRep - 1;
	            let move = this.getMove(0);
	            while (moveNum > 0) {
	                if (!move.next) {
	                    return null;
	                }
	                moveNum = moveNum - 1;
	                move = this.getMove(move.next);
	            }
	            return move;
	        }
	        let moves = this.getMoves();
	        for (let move of moves) {
	            if (move.fen.startsWith(moveRep)) {
	                return move;
	            }
	            else if (move.notation.notation === moveRep) {
	                return move;
	            }
	        }
	        return undefined;
	    }
	    deleteMovesBefore(moveRep) {
	        // Inner function, this really deletes
	        let deleteMovesBeforeIncluding = (id) => {
	            let my_fen = this.moves[id].fen;
	            this.moves[id] = null;
	            if (id <= 0)
	                return my_fen;
	            deleteMovesBeforeIncluding(id - 1);
	            return my_fen;
	        };
	        let move = this.findMove(moveRep);
	        if (move === undefined) {
	            return "";
	        }
	        if (move.index <= 0) {
	            return "";
	        }
	        let my_fen = deleteMovesBeforeIncluding(move.index - 1);
	        this.getMove(move.index).prev = null;
	        return my_fen; // Need position to start game here
	    }
	    promoteMove(id) {
	        /**
	         * Returns the first move of a variation.
	         */
	        let firstMoveOfVariation = (move) => {
	            if (this.startVariation(move)) {
	                return move;
	            }
	            return firstMoveOfVariation(this.getMove(move.prev));
	        };
	        const move = this.getMove(id);
	        // 1. Check this is variation
	        if ((typeof move.variationLevel == "undefined") || (move.variationLevel === 0)) {
	            return;
	        }
	        // 2. Get the first move of the variation
	        const myFirst = firstMoveOfVariation(move);
	        // 3. Get the index of this moves variation array
	        const higherVariationMove = (myFirst.prev == null) ? this.getFirstMove() : this.getMove(this.getMove(myFirst.prev).next);
	        let indexVariation;
	        for (let i = 0; i < higherVariationMove.variations.length; i++) {
	            if (higherVariationMove.variations[i] === myFirst) {
	                indexVariation = i;
	            }
	        }
	        // 4. If variation index is > 0 (not the first variation)
	        if (indexVariation > 0) {
	            // Just switch with the previous index
	            let tmpMove = higherVariationMove.variations[indexVariation - 1];
	            higherVariationMove.variations[indexVariation - 1] = higherVariationMove.variations[indexVariation];
	            higherVariationMove.variations[indexVariation] = tmpMove;
	        }
	        else if (higherVariationMove.prev == null) {
	            // 5. Special case: variation has no previous move, switch main line
	            const tmpVariations = higherVariationMove.variations;
	            higherVariationMove.variations = myFirst.variations;
	            myFirst.variations = tmpVariations;
	            myFirst.variations[0] = higherVariationMove;
	            // Update the variation level because there will be changes
	            this.updateVariationLevel(myFirst, 0);
	        }
	        else {
	            // 6. Now the most difficult case: create new array from line above, switch this with
	            // the variation
	            let tmpMove = higherVariationMove;
	            const tmpVariations = higherVariationMove.variations;
	            const prevMove = this.getMove(higherVariationMove.prev);
	            prevMove.next = myFirst.index;
	            tmpMove.variations = myFirst.variations;
	            myFirst.variations = tmpVariations;
	            myFirst.variations[0] = tmpMove;
	            this.updateVariationLevel(myFirst, myFirst.variationLevel - 1);
	        }
	    }
	    /* Ensure that if variationLevel is not set, it is interpreted as 0. */
	    startMainLine(move) {
	        return ((typeof move.variationLevel == "undefined") || (move.variationLevel === 0)) && (typeof move.prev !== "number");
	    }
	    startVariation(move) {
	        return (typeof move.variationLevel != "undefined") && (move.variationLevel > 0) &&
	            ((typeof move.prev != "number") || (this.getMoves()[move.prev].next !== move.index));
	    }
	    endVariation(move) {
	        return (typeof move.variationLevel != "undefined") && (move.variationLevel > 0) && !move.next;
	    }
	    afterMoveWithVariation(move) {
	        return this.getMoves()[move.prev] && (this.getMoves()[move.prev].variations.length > 0);
	    }
	    writePgn(configuration = {}) {
	        var _a;
	        if (((_a = this.getGames()) === null || _a === void 0 ? void 0 : _a.length) === 0)
	            return "";
	        return index_umdExports$1.writeGame(this.getGame(this.currentGameIndex) || 0, configuration);
	    }
	    /**
	     * Sets the position to the start position, depending on the configuration. Returns the resulting position as FEN string.
	     * @return string The position as FEN string
	     */
	    setToStart() {
	        if (this.configuration.position === 'start') {
	            this.chess.reset();
	        }
	        else {
	            this.chess.load(this.configuration.position);
	        }
	        return this.chess.fen();
	    }
	    eachMove(movesMainLine) {
	        this.moves = [];
	        let current = -1;
	        let findPrevMove = (level, index) => {
	            while (index >= 0) {
	                if (this.moves[index].variationLevel === level) {
	                    return this.moves[index];
	                }
	                index--;
	            }
	            return null;
	        };
	        let eachMoveVariation = (moveArray, level, prev) => {
	            function wireMoves(current, prev, currentMove, prevMove) {
	                if (prevMove != null) {
	                    currentMove.prev = prev;
	                    if (!prevMove.next) { // only set, if not set already
	                        prevMove.next = current;
	                    }
	                }
	                currentMove.index = current;
	            }
	            function getMoveNumberFromPosition(fen) {
	                const tokens = fen.split(/\s+/);
	                const move_number = parseInt(tokens[5], 10);
	                return (tokens[1] === 'b') ? move_number : move_number - 1;
	            }
	            let prevMove = (prev != null ? this.moves[prev] : null);
	            moveArray.forEach((move, i) => {
	                current++;
	                // PgnMove and PgnReaderMove are similar, but different. The following is a hack to convert one to the other.
	                let _move = move;
	                _move.variationLevel = level;
	                this.moves.push(_move);
	                if (i > 0) {
	                    if (this.moves[current - 1].variationLevel > level) {
	                        prevMove = findPrevMove(level, current - 1);
	                        prev = prevMove.index;
	                    }
	                    else {
	                        prev = current - 1;
	                        prevMove = this.moves[prev];
	                    }
	                }
	                wireMoves(current, prev, _move, prevMove);
	                // Checks the move on a real board, and hold the fen
	                // TODO: Use the position from the configuration, to ensure, this games
	                // could be played not starting at the start position.
	                if (typeof _move.prev == "number") {
	                    this.chess.load(this.getMove(_move.prev).fen);
	                }
	                else {
	                    this.setToStart();
	                }
	                // TODO: It is not possible to use here `san` instead of  the ugly `notation.notation`. In case of `Pe4`
	                // chess.js spits an error. No solution for this yet.
	                // The current lib sometimes has failures sloppy == true (like bxc6 which is legal), therefore the duplication.
	                let pgn_move = this.chess.move(_move.notation.notation, { 'sloppy': false });
	                if (pgn_move === null) {
	                    pgn_move = this.chess.move(_move.notation.notation, { 'sloppy': true });
	                    if (pgn_move === null) {
	                        throw new Error("No legal move: " + _move.notation.notation);
	                    }
	                }
	                let fen = this.chess.fen();
	                _move.fen = fen;
	                _move.from = pgn_move.from;
	                _move.to = pgn_move.to;
	                _move.notation.notation = pgn_move.san;
	                if (pgn_move.flags === 'c') {
	                    _move.notation.strike = 'x';
	                }
	                if (this.chess.in_checkmate()) {
	                    _move.notation.check = '#';
	                }
	                else if (this.chess.in_check()) {
	                    _move.notation.check = '+';
	                }
	                _move.moveNumber = getMoveNumberFromPosition(fen);
	                move.variations.forEach(function (variation) {
	                    eachMoveVariation(variation, level + 1, prev);
	                });
	            });
	        };
	        eachMoveVariation(movesMainLine, 0, null);
	    }
	    addMove(move, moveNumber) {
	        let getTurn = (moveNumber) => {
	            return this.getMove(moveNumber).turn === "w" ? 'b' : "w";
	        };
	        // Special case: first move, so there is no previous move
	        let existingFirstMove = (move) => {
	            let first_move_notation = () => {
	                if (typeof this.getMove(0) == 'undefined')
	                    return null;
	                return this.getMove(0).notation.notation;
	            };
	            this.setToStart();
	            let pgn_move = this.chess.move(move);
	            if (!pgn_move) {
	                return null;
	            }
	            else if (first_move_notation() === pgn_move.san) {
	                return 0;
	            }
	            else { // TODO: Could be a variation of the first move ...
	                return existingVariationFirstMove(pgn_move);
	            }
	        };
	        // Handles the first move this may be a variation of the first move, returns this.
	        // If not, returns null
	        let existingVariationFirstMove = (pgn_move) => {
	            if (typeof this.getMove(0) == 'undefined')
	                return null;
	            let variations = this.getMove(0).variations;
	            let vari;
	            for (vari in variations) {
	                if (variations[vari].notation.notation === pgn_move.san)
	                    return variations[vari].moveNumber;
	            }
	            return null; // no variation found
	        };
	        // Returns the existing move number or null
	        // Should include all variations as well
	        let existingMove = (move, moveNumber) => {
	            if (moveNumber == null)
	                return existingFirstMove(move);
	            let prevMove = this.getMove(moveNumber);
	            if (typeof prevMove == "undefined")
	                return null;
	            this.chess.load(prevMove.fen);
	            let pgn_move = this.chess.move(move);
	            let nextMove = this.getMove(prevMove.next);
	            if (typeof nextMove == "undefined")
	                return null;
	            if (nextMove.notation.notation === pgn_move.san) {
	                return prevMove.next;
	            }
	            else { // check if there exists variations
	                let mainMove = this.getMove(prevMove.next);
	                for (let i = 0; i < mainMove.variations.length; i++) {
	                    let variation = mainMove.variations[i];
	                    if (variation.notation.notation === pgn_move.san) {
	                        return variation.index;
	                    }
	                }
	            }
	            return null;
	        };
	        // Handle possible variation
	        let handleVariation = (move, prev, next) => {
	            //console.log("handle variation: prev == " + prev + " next == " + next);
	            let prevMove = this.getMove(prev);
	            if (prevMove === undefined) { // special case: variation on first move
	                if (next <= 0)
	                    return; // First move
	                this.getMove(0).variations.push(move);
	                move.variationLevel = 1;
	                return;
	            }
	            if (prevMove.next) { // has a next move set, so should be a variation
	                this.getMove(prevMove.next).variations.push(move);
	                move.variationLevel = (prevMove.variationLevel ? prevMove.variationLevel : 0) + 1;
	                if (move.turn === 'b') {
	                    move.moveNumber = prevMove.moveNumber;
	                }
	            }
	            else { // main variation
	                prevMove.next = next;
	                move.variationLevel = prevMove.variationLevel;
	            }
	        };
	        let curr = existingMove(move, moveNumber);
	        if (typeof curr == 'number')
	            return curr;
	        let realMove = {
	            variations: [],
	            nag: [],
	            notation: { notation: null },
	            from: 'a0', to: 'a0'
	        };
	        if (moveNumber == null) {
	            this.setToStart();
	            realMove.turn = this.chess.turn();
	            realMove.moveNumber = 1;
	        }
	        else {
	            this.chess.load(this.getMove(moveNumber).fen);
	            realMove.turn = getTurn(moveNumber);
	            if (realMove.turn === "w") {
	                realMove.moveNumber = this.getMove(moveNumber).moveNumber + 1;
	            }
	            else {
	                realMove.moveNumber = this.getMove(moveNumber).moveNumber;
	            }
	        }
	        let pgn_move = this.chess.move(move);
	        realMove.fen = this.chess.fen();
	        realMove.from = pgn_move.from;
	        realMove.to = pgn_move.to;
	        // san is the real notation, in case of O-O is this O-O.
	        // to is the to field, in case of (white) O-O is this g1.
	        if (pgn_move.san.substring(0, 1) !== "O") {
	            realMove.notation.notation = pgn_move.san;
	            realMove.notation.col = pgn_move.to.substring(0, 1);
	            realMove.notation.row = pgn_move.to.substring(1, 2);
	            if (pgn_move.piece !== "p") {
	                realMove.notation.fig = pgn_move.piece.charAt(0).toUpperCase();
	            }
	            if (pgn_move.promotion) {
	                realMove.notation.promotion = '=' + pgn_move.promotion.toUpperCase();
	            }
	            if (pgn_move.flags.includes(this.chess.FLAGS.CAPTURE) || (pgn_move.flags.includes(this.chess.FLAGS.EP_CAPTURE))) {
	                realMove.notation.strike = 'x';
	            }
	            realMove.notation.ep = pgn_move.flags.includes(this.chess.FLAGS.EP_CAPTURE);
	            if (this.chess.in_check()) {
	                if (this.chess.in_checkmate()) {
	                    realMove.notation.check = '#';
	                }
	                else {
	                    realMove.notation.check = '+';
	                }
	            }
	        }
	        else {
	            realMove.notation.notation = pgn_move.san;
	        }
	        this.getMoves().push(realMove);
	        realMove.prev = moveNumber;
	        let next = this.getMoves().length - 1;
	        realMove.index = next;
	        handleVariation(realMove, moveNumber, next);
	        return next;
	    }
	    ;
	    changeNag(_nag, moveNumber, added) {
	        let move = this.getMove(moveNumber);
	        if (move.nag == null) {
	            move.nag = [];
	        }
	        let nagSym = (_nag[0] === "$") ? _nag : symbolToNag(_nag);
	        if (added) {
	            if (move.nag.indexOf(nagSym) === -1) {
	                move.nag.push(nagSym);
	            }
	        }
	        else {
	            let index = move.nag.indexOf(nagSym);
	            if (index > -1) {
	                move.nag.splice(index, 1);
	            }
	        }
	    }
	    clearNags(moveNumber) {
	        let move = this.getMove(moveNumber);
	        move.nag = [];
	    }
	    // TODO This function is only used once in the whole system, can we get rid of it.
	    // And it is only used in the viewer, perhaps it should go to there ...
	    getOrderedMoves(current, returnedMoves) {
	        if (arguments.length === 0) {
	            return this.getOrderedMoves(this.getFirstMove(), []);
	        }
	        returnedMoves.push(current);
	        if (current.variations) {
	            for (let i = 0; i < current.variations.length; i++) {
	                this.getOrderedMoves(current.variations[i], returnedMoves);
	            }
	        }
	        if (current.next) {
	            return this.getOrderedMoves(this.getMove(current.next), returnedMoves);
	        }
	        else {
	            return returnedMoves;
	        }
	    }
	    getMoves() {
	        return this.moves ? this.moves : [];
	    }
	    getFirstMove() {
	        let _moves = this.getMoves();
	        for (const _move of _moves) {
	            if ((typeof _move.variationLevel == "undefined") || _move.variationLevel == 0 && _move.prev == null) {
	                return _move;
	            }
	        }
	        return null;
	    }
	    getTags() {
	        if (!this.games) {
	            return {};
	        }
	        return this.games[this.currentGameIndex].tags;
	        // return new Map(Object.entries(_tags)) as unknown as Tags
	    }
	    getGameComment() {
	        if (!this.games) {
	            return undefined;
	        }
	        return this.games[this.currentGameIndex].gameComment ? this.games[this.currentGameIndex].gameComment : undefined;
	    }
	    getGames() {
	        return this.games;
	    }
	    getEndGame() {
	        return this.endGame;
	    }
	    getPosition(index) {
	        if (index === null) {
	            this.chess.reset();
	            return this.chess.fen();
	        }
	        else {
	            return this.getMove(index).fen;
	        }
	    }
	    setShapes(move, shapes) {
	        if (!move.commentDiag) {
	            move.commentDiag = {};
	        }
	        // Ensure everything is reset
	        move.commentDiag.colorArrows = [];
	        move.commentDiag.colorFields = [];
	        shapes.forEach((shape) => {
	            if (shape.dest) { // arrow
	                let colArrow = shape.brush.slice(0, 1).toUpperCase();
	                let arr = shape.orig + shape.dest;
	                move.commentDiag.colorArrows.push(colArrow + arr);
	            }
	            else { // field
	                let colField = shape.brush.slice(0, 1).toUpperCase();
	                let fie = shape.orig;
	                move.commentDiag.colorFields.push(colField + fie);
	            }
	        });
	    }
	    makeMove(move) {
	        return false;
	    }
	    setPosition(position) {
	        return false;
	    }
	    loadGame(game) {
	        this.checkedGames = [game];
	        this.moves = game.moves;
	        this.currentGameIndex = 0;
	    }
	}

	class StringBuilder {
	    constructor(value) {
	        this.strings = new Array("");
	        this.append(value);
	    }
	    // Appends the given value to the end of this instance.
	    append(value) {
	        if (value) {
	            this.strings.push(value);
	        }
	        return this;
	    }
	    isEmpty() {
	        for (let i = 0; i < this.strings.length; i++) {
	            if (this.strings[i].length > 0) {
	                return false;
	            }
	        }
	        return true;
	    }
	    lastChar() {
	        if (this.strings.length === 0) {
	            return '';
	        }
	        return this.strings[this.strings.length - 1].slice(-1);
	    }
	    toString() {
	        return this.strings.join("");
	    }
	}

	/**
	 * Read a PGN string and return the game.
	 * @param pgn the PGN string to read.
	 */
	function read(pgn) {
	    const reader = new PgnReader({ pgn: pgn });
	    return {
	        moves: reader.getMoves(),
	        gameComment: reader.getGameComment(),
	        tags: reader.getTags()
	    };
	}
	/**
	 * Read a PGN string and return the games read as array.
	 * @param pgn the PGN string to read.
	 */
	function readMany(pgn) {
	    const reader = new PgnReader({ pgn: pgn, manyGames: true });
	    const numGames = reader.games.length;
	    const games = [];
	    for (let i = 0; i < numGames; i++) {
	        reader.loadOne(i);
	        games.push({
	            moves: reader.getMoves(),
	            gameComment: reader.getGameComment(),
	            tags: reader.getTags()
	        });
	    }
	    return games;
	}
	/*
	    Implement it in a way that is backward compatible with the PgnReader. Later on, we have to refactor it,
	    and then create (possibly) a new major version of it. Current problems:
	    * PgnGame knows only implicit about the starting position (but can be computed, if SetUp and FEN is given).
	    * PgnReader is not really playing a game. It gets all information needed for the next move. The current structure
	        helps here, because moves are linked to each other
	    * We need a new constructor for PgnReader, that allows to create it from a PgnGame (that is already read)
	 */
	function view(game, configuration) {
	    const reader = new PgnReader(configuration);
	    reader.loadGame(game);
	    let gameState = {
	        game: game
	    };
	    return {
	        gameState: gameState,
	        makeMove: (move) => {
	            if (!move) {
	                let _move = reader.getFirstMove();
	                reader.makeMove(_move);
	                gameState.currentMove = _move;
	            }
	            else {
	                if (move.notation !== undefined) {
	                    reader.makeMove(move);
	                    gameState.currentMove = move;
	                }
	                else {
	                    let _move = reader.findMove(move);
	                    reader.makeMove(_move);
	                    gameState.currentMove = _move;
	                }
	            }
	            return gameState;
	        },
	        setPosition: (position) => {
	            return this.makeMove(position);
	        },
	        getCurrentPosition: () => {
	            return gameState.currentMove.fen;
	        },
	        getMoves: () => {
	            return gameState.game.moves;
	        }
	    };
	}
	/*
	export interface EditApi extends ViewApi {
	    addMove(gameState: GameState, move: PgnReaderMove): boolean // Returns true if the move was legal.
	    deleteMove(gameState: GameState, move: PgnReaderMove): boolean // Returns true if the move could be deleted.
	    addComment(gameState: GameState, comment: string, before: boolean): void // Add a comment to the current move, if before, add it before the move.
	    setNAGs(gameState: GameState, nag: NAGs): void // Set the NAG of the current move.
	    // ... and many more...
	}
	*/
	/*

	export function edit(game: PgnGame, configuration: PgnReaderConfiguration): EditApi {
	    let gameState: GameState = { game: game}
	    return {
	        gameState: gameState,
	        makeMove: (move?: PgnReaderMove | SAN): boolean => {   return false },
	        setPosition: (position: FEN): boolean => { return false },
	        getPosition: (): FEN => { return "" },
	        getMoves: (): PgnReaderMove[] => { return [] },
	        addMove: (gameState: GameState, move: PgnReaderMove): boolean => { return false},
	        deleteMove: (gameState: GameState, move: PgnReaderMove): boolean => { return false },
	        addComment: (gameState: GameState, comment: string, before: boolean = false): void => { return},
	        setNAGs: (gameState: GameState, nag: NAGs): void => { return }
	    }
	}*/

	exports.NAGs = NAGs;
	exports.PGN_NAGS = PGN_NAGS;
	exports.PROMOTIONS = index_umdExports.PROMOTIONS;
	exports.PgnReader = PgnReader;
	exports.StringBuilder = StringBuilder;
	exports.hasDiagramNag = hasDiagramNag;
	exports.nagToSymbol = nagToSymbol;
	exports.read = read;
	exports.readMany = readMany;
	exports.symbolToNag = symbolToNag;
	exports.view = view;

}));
